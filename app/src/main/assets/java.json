{
  "fresheriqs": [
    {
      "ques": "What do you mean by platform independence of Java?",
      "ans": "Platform independence means that you can run the same Java Program in any Operating System. For example, you can write java program in Windows and run it in Mac OS. "
    },
    {
      "ques": "What is JVM and is it platform independent?",
      "ans": "Java Virtual Machine (JVM) is the heart of java programming language. JVM is responsible for converting byte code into machine readable code. JVM is not platform independent, thats why you have different JVM for different operating systems. We can customize JVM with Java Options, such as allocating minimum and maximum memory to JVM. It’s called virtual because it provides an interface that doesn’t depend on the underlying OS. "
    },
    {
      "ques": "What is the difference between JDK and JVM?",
      "ans": "Java Development Kit (JDK) is for development purpose and JVM is a part of it to execute the java programs JDK provides all the tools, executables and binaries required to compile, debug and execute a Java Program. The execution part is handled by JVM to provide machine independence.  "
    },
    {
      "ques": "What is the difference between JVM and JRE?",
      "ans": "Java Runtime Environment (JRE) is the implementation of JVM. JRE consists of JVM and java binaries and other classes to execute any program successfully. JRE doesn’t contain any development tools like java compiler, debugger etc. If you want to execute any java program, you should have JRE installed."
    },
    {
      "ques": "Why Java is not pure Object Oriented language?",
      "ans": "Java is not said to be pure object oriented because it support primitive types such as int, byte, short, long etc. I believe it brings simplicity to the language while writing our code. Obviously java could have wrapper objects for the primitive types but just for the representation, they would not have provided any benefit. "
    },
    {
      "ques": "Why Java doesn’t support multiple inheritance?",
      "ans": "Java doesn’t support multiple inheritance in classes because of “Diamond Problem”. To know more about diamond problem with example, read Multiple Inheritance in Java however multiple inheritance is supported in interfaces. An interface can extend multiple interfaces because they just declare the methods and implementation will be present in the implementing class. So there is no issue of diamond problem with interfaces.  "
    },
    {
      "ques": "Which class is the superclass of all classes?",
      "ans": "java.lang.Object is the root class for all the java classes and we don’t need to extend it."
    },
    {
      "ques": "What is difference between path and classpath variables?",
      "ans": "PATH is an environment variable used by operating system to locate the executables. That’s why when we install Java or want any executable to be found by OS, we need to add the directory location in the PATH variable. If you work on Windows OS, read this post to learn how to setup PATH variable on Windows.Classpath is specific to java and used by java executables to locate class files. We can provide the classpath location while running java application and it can be a directory, ZIP files, JAR files etc."
    },
    {
      "ques": "What is the importance of main method in Java?",
      "ans": "main() method is the entry point of any standalone java application. The syntax of main method is public static void main(String args[]). main method is public and static so that java can access it without initializing the class. The input parameter is an array of String through which we can pass runtime arguments to the java program. Check this post to learn how to compile and run java program."
    },
    {
      "ques": "What is overloading and overriding in java?",
      "ans": "When we have more than one method with same name in a single class but the arguments are different, then it is called as method overloading.Overriding concept comes in picture with inheritance when we have two methods with same signature, one in parent class and another in child class. We can use @Override annotation in the child class overridden method to make sure if parent class method is changed, so as child class."
    },
    {
      "ques": "Can we overload main method?",
      "ans": "Yes, we can have multiple methods with name “main” in a single class. However if we run the class, java runtime environment will look for main method with syntax as public static void main(String args[]). "
    },
    {
      "ques": "Can we have multiple public classes in a java source file?",
      "ans": "We can’t have more than one public class in a single java source file. A single source file can have multiple classes that are not public."
    },
    {
      "ques": "What is Java Package and which package is imported by default?",
      "ans": "Java package is the mechanism to organize the java classes by grouping them. The grouping logic can be based on functionality or modules based. A java class fully classified name contains package and class name. For example, java.lang.Object is the fully classified name of Object class that is part of java.lang package.java.lang package is imported by default and we don’t need to import any class from this package explicitly. "
    },
    {
      "ques": "What are access modifiers?",
      "ans": "Java provides access control through public, private and protected access modifier keywords. When none of these are used, it’s called default access modifier.A java class can only have public or default access modifier. Read Java Access Modifiers to learn more about these in detail. "
    },
    {
      "ques": "What is final keyword?",
      "ans": "final keyword is used with Class to make sure no other class can extend it, for example String class is final and we can’t extend it.We can use final keyword with methods to make sure child classes can’t override it.final keyword can be used with variables to make sure that it can be assigned only once. However the state of the variable can be changed, for example we can assign a final variable to an object only once but the object variables can change later on.Java interface variables are by default final and static. "
    },
    {
      "ques": "What is static keyword?",
      "ans": "static keyword can be used with class level variables to make it global i.e all the objects will share the same variable.static keyword can be used with methods also. A static method can access only static variables of class and invoke only static methods of the class.Read more in detail at java static keyword. "
    },
    {
      "ques": "What is finally and finalize in java?",
      "ans": "finally block is used with try-catch to put the code that you want to get executed always, even if any exception is thrown by the try-catch block. finally block is mostly used to release resources created in the try block.finalize() is a special method in Object class that we can override in our classes. This method get’s called by garbage collector when the object is getting garbage collected. This method is usually overridden to release system resources when object is garbage collected. "
    },
    {
      "ques": "What is try-with-resources in java?",
      "ans": "One of the Java 7 features is try-with-resources statement for automatic resource management. Before Java 7, there was no auto resource management and we should explicitly close the resource. Usually, it was done in the finally block of a try-catch statement. This approach used to cause memory leaks when we forgot to close the resource.From Java 7, we can create resources inside try block and use it. Java takes care of closing it as soon as try-catch block gets finished. Read more at Java Automatic Resource Management."
    },
    {
      "ques": "Can we declare a class as static?",
      "ans": "We can’t declare a top-level class as static however an inner class can be declared as static. If inner class is declared as static, it’s called static nested class. Static nested class is same as any other top-level class and is nested for only packaging convenience.Read more about inner classes at java inner class. "
    },
    {
      "ques": "What is multi-catch block in java?",
      "ans": "Java 7 one of the improvement was multi-catch block where we can catch multiple exceptions in a single catch block. This makes are code shorter and cleaner when every catch block has similar code.If a catch block handles multiple exception, you can separate them using a pipe (|) and in this case exception parameter (ex) is final, so you can’t change it."
    },
    {
      "ques": "What is static block?",
      "ans": "Java static block is the group of statements that gets executed when the class is loaded into memory by Java ClassLoader. It is used to initialize static variables of the class. Mostly it’s used to create static resources when class is loaded. "
    },
    {
      "ques": "What is an interface?",
      "ans": "Interfaces are core part of java programming language and used a lot not only in JDK but also java design patterns, most of the frameworks and tools. Interfaces provide a way to achieve abstraction in java and used to define the contract for the subclasses to implement.Interfaces are good for starting point to define Type and create top level hierarchy in our code. Since a java class can implements multiple interfaces, it’s better to use interfaces as super class in most of the cases. Read more at java interface. "
    },
    {
      "ques": "What is an abstract class?",
      "ans": "Abstract classes are used in java to create a class with some default method implementation for subclasses. An abstract class can have abstract method without body and it can have methods with implementation also.abstract keyword is used to create a abstract class. Abstract classes can’t be instantiated and mostly used to provide base for sub-classes to extend and implement the abstract methods and override or use the implemented methods in abstract class. Read important points about abstract classes at java abstract class."
    },
    {
      "ques": "What is the difference between abstract class and interface?",
      "ans": "abstract keyword is used to create abstract class whereas interface is the keyword for interfaces.Abstract classes can have method implementations whereas interfaces can’t.A class can extend only one abstract class but it can implement multiple interfaces.We can run abstract class if it has main() method whereas we can’t run an interface.Some more differences in detail are at Difference between Abstract Class and Interface. "
    },
    {
      "ques": "Can an interface implement or extend another interface?",
      "ans": "Interfaces don’t implement another interface, they extend it. Since interfaces can’t have method implementations, there is no issue of diamond problem. That’s why we have multiple inheritance in interfaces i.e an interface can extend multiple interfaces.From Java 8 onwards, interfaces can have default method implementations. So to handle diamond problem when a common default method is present in multiple interfaces, it’s mandatory to provide implementation of the method in the class implementing them. For more details with examples, read Java 8 interface changes. "
    },
    {
      "ques": "What is Marker interface?",
      "ans": "A marker interface is an empty interface without any method but used to force some functionality in implementing classes by Java. Some of the well known marker interfaces are Serializable and Cloneable. "
    },
    {
      "ques": "What are Wrapper classes?",
      "ans": "Java wrapper classes are the Object representation of eight primitive types in java. All the wrapper classes in java are immutable and final. Java 5 autoboxing and unboxing allows easy conversion between primitive types and their corresponding wrapper classes.Read more at Wrapper classes in Java. "
    },
    {
      "ques": "What is Enum in Java?",
      "ans": "Enum was introduced in Java 1.5 as a new type whose fields consists of fixed set of constants. For example, in Java we can create Direction as enum with fixed fields as EAST, WEST, NORTH, SOUTH.enum is the keyword to create an enum type and similar to class. Enum constants are implicitly static and final. Read more in detail at java enum. "
    },
    {
      "ques": "What is Java Annotations?",
      "ans": "Java Annotations provide information about the code and they have no direct effect on the code they annotate. Annotations are introduced in Java 5. Annotation is metadata about the program embedded in the program itself. It can be parsed by the annotation parsing tool or by compiler. We can also specify annotation availability to either compile time only or till runtime also. Java Built-in annotations are @Override, @Deprecated and @SuppressWarnings. Read more at java annotations. "
    },
    {
      "ques": "What is Java Reflection API? Why it’s so important to have?",
      "ans": "Java Reflection API provides ability to inspect and modify the runtime behavior of java application. We can inspect a java class, interface, enum and get their methods and field details. Reflection API is an advanced topic and we should avoid it in normal programming. Reflection API usage can break the design pattern such as Singleton pattern by invoking the private constructor i.e violating the rules of access modifiers.Even though we don’t use Reflection API in normal programming, it’s very important to have. We can’t have any frameworks such as Spring, Hibernate or servers such as Tomcat, JBoss without Reflection API. They invoke the appropriate methods and instantiate classes through reflection API and use it a lot for other processing.Read Java Reflection Tutorial to get in-depth knowledge of reflection api. ."
    },
    {
      "ques": "What is composition in java?",
      "ans": "Composition is the design technique to implement has-a relationship in classes. We can use Object composition for code reuse.Java composition is achieved by using instance variables that refers to other objects. Benefit of using composition is that we can control the visibility of other object to client classes and reuse only what we need. Read more with example at Java Composition example. "
    },
    {
      "ques": "What is the benefit of Composition over Inheritance?",
      "ans": "One of the best practices of java programming is to “favor composition over inheritance”. Some of the possible reasons are:Any change in the superclass might affect subclass even though we might not be using the superclass methods. For example, if we have a method test() in subclass and suddenly somebody introduces a method test() in superclass, we will get compilation errors in subclass. Composition will never face this issue because we are using only what methods we need.Inheritance exposes all the super class methods and variables to client and if we have no control in designing superclass, it can lead to security holes. Composition allows us to provide restricted access to the methods and hence more secure.We can get runtime binding in composition where inheritance binds the classes at compile time. So composition provides flexibility in invocation of methods.You can read more about above benefits of composition over inheritance at java composition vs inheritance. "
    },
    {
      "ques": "How to sort a collection of custom Objects in Java?",
      "ans": "WWe need to implement Comparable interface to support sorting of custom objects in a collection. Comparable interface has compareTo(T obj) method which is used by sorting methods and by providing this method implementation, we can provide default way to sort custom objects collection.However, if you want to sort based on different criteria, such as sorting an Employees collection based on salary or age, then we can create Comparator instances and pass it as sorting methodology. For more details read Java Comparable and Comparator."
    },
    {
      "ques": "What is inner class in java?",
      "ans": "We can define a class inside a class and they are called nested classes. Any non-static nested class is known as inner class. Inner classes are associated with the object of the class and they can access all the variables and methods of the outer class. Since inner classes are associated with instance, we can’t have any static variables in them.We can have local inner class or anonymous inner class inside a class. For more details read java inner class. "
    },
    {
      "ques": "What is anonymous inner class?",
      "ans": "A local inner class without name is known as anonymous inner class. An anonymous class is defined and instantiated in a single statement. Anonymous inner class always extend a class or implement an interface.Since an anonymous class has no name, it is not possible to define a constructor for an anonymous class. Anonymous inner classes are accessible only at the point where it is defined."
    },
    {
      "ques": "What is Classloader in Java?",
      "ans": "Java Classloader is the program that loads byte code program into memory when we want to access any class. We can create our own classloader by extending ClassLoader class and overriding loadClass(String name) method. Learn more at java classloader. "
    },
    {
      "ques": "What are different types of classloaders?",
      "ans": "There are three types of built-in Class Loaders in Java:Bootstrap Class Loader – It loads JDK internal classes, typically loads rt.jar and other core classes.Extensions Class Loader – It loads classes from the JDK extensions directory, usually $JAVA_HOME/lib/ext directory.System Class Loader – It loads classes from the current classpath that can be set while invoking a program using -cp or -classpath command line options."
    },
    {
      "ques": "What is ternary operator in java?",
      "ans": "Java ternary operator is the only conditional operator that takes three operands. It’s a one liner replacement for if-then-else statement and used a lot in java programming. We can use ternary operator if-else conditions or even switch conditions using nested ternary operators. An example can be found at java ternary operator. "
    },
    {
      "ques": "What is break and continue statement?",
      "ans": "We can use break statement to terminate for, while, or do-while loop. We can use break statement in switch statement to exit the switch case. You can see the example of break statement at java break. We can use break with label to terminate the nested loops.The continue statement skips the current iteration of a for, while or do-while loop. We can use continue statement with label to skip the current iteration of outermost loop."
    },
    {
      "ques": "What is default constructor?",
      "ans": "No argument constructor of a class is known as default constructor. When we don’t define any constructor for the class, java compiler automatically creates the default no-args constructor for the class. If there are other constructors defined, then compiler won’t create default constructor for us. "
    },
    {
      "ques": "Can we have try without catch block?",
      "ans": "Yes, we can have try-finally statement and hence avoiding catch block."
    },
    {
      "ques": "What is Garbage Collection?",
      "ans": "Garbage Collection is the process of looking at heap memory, identifying which objects are in use and which are not, and deleting the unused objects. In Java, process of deallocating memory is handled automatically by the garbage collector.We can run the garbage collector with code Runtime.getRuntime().gc() or use utility method System.gc(). For a detailed analysis of Heap Memory and Garbage Collection, please read Java Garbage Collection."
    },
    {
      "ques": "What is Serialization and Deserialization?",
      "ans": "We can convert a Java object to an Stream that is called Serialization. Once an object is converted to Stream, it can be saved to file or send over the network or used in socket connections.The object should implement Serializable interface and we can use java.io.ObjectOutputStream to write object to file or to any OutputStream object. Read more at Java Serialization.The process of converting stream data created through serialization to Object is called deserialization. Read more at Java Deserialization. "
    },
    {
      "ques": "How to run a JAR file through command prompt?",
      "ans": "We can run a jar file using java command but it requires Main-Class entry in jar manifest file. Main-Class is the entry point of the jar and used by java command to execute the class. Learn more at java jar file. "
    },
    {
      "ques": "What is the use of System class?",
      "ans": "Java System Class is one of the core classes. One of the easiest way to log information for debugging is System.out.print() method.System class is final so that we can’t subclass and override it’s behavior through inheritance. System class doesn’t provide any public constructors, so we can’t instantiate this class and that’s why all of it’s methods are static.Some of the utility methods of System class are for array copy, get current time, reading environment variables. Read more at Java System Class."
    },
    {
      "ques": "Can we use String with switch case?",
      "ans": "One of the Java 7 feature was improvement of switch case of allow Strings. So if you are using Java 7 or higher version, you can use String in switch-case statements. Read more at Java switch-case String example. "
    },
    {
      "ques": "Java is Pass by Value or Pass by Reference?",
      "ans": "This is a very confusing question, we know that object variables contain reference to the Objects in heap space. When we invoke any method, a copy of these variables is passed and gets stored in the stack memory of the method. We can test any language whether it’s pass by reference or pass by value through a simple generic swap method, to learn more read Java is Pass by Value and Not Pass by Reference."
    },
    {
      "ques": "What is difference between Heap and Stack Memory?",
      "ans": "Major difference between Heap and Stack memory are as follows: Heap memory is used by all the parts of the application whereas stack memory is used only by one thread of execution. Whenever an object is created, it’s always stored in the Heap space and stack memory contains the reference to it. Stack memory only contains local primitive variables and reference variables to objects in heap space.Memory management in stack is done in LIFO manner whereas it’s more complex in Heap memory because it’s used globally.For a detailed explanation with a sample program, read Java Heap vs Stack Memory. "
    },
    {
      "ques": "Java Compiler is stored in JDK, JRE or JVM?",
      "ans": "The task of java compiler is to convert java program into bytecode, we have javac executable for that. So it must be stored in JDK, we don’t need it in JRE and JVM is just the specs."
    },
    {
      "ques": "What is defined as an immutable object? How would you create an immutable object in Java?",
      "ans": "Immutable objects are defined as those whose state cannot be changed once it has been made, any alteration will result in a new object, e.g. String, Integer, and other wrapper class."
    },
    {
      "ques": "What’s the difference between Callable and Runnable?",
      "ans": "Both of these are interfaces used to carry out task to be executed by a thread. The main difference between the two interfaces is that Callable can return a value, while Runnable cannot. Another difference is that Callable can throw a checked exception, while Runnable cannot. Runnable has been around since Java 1.0, while Callable was introduced as part of Java 1.5."
    },
    {
      "ques": "What is the right data type to represent a price in Java?",
      "ans": "If memory is not a concern and performance is not critical, BigDecimal will be the right data type represent a price in Java. If not, double with predefined precision."
    },
    {
      "ques": "How would you convert bytes to String?",
      "ans": "To convert bytes to String, you would use Strong constructor which accepts byte[]."
    },
    {
      "ques": "Is it possible to cast an int value into a byte variable? What would happen if the value of int is larger than byte?",
      "ans": "Yes, it is possible but int is 32 bit long in Java, while byte is 8 bit long in Java. Therefore when you can cast an int to byte higher, 24 bits are gone and a byte can only hold a value between -128 to 128."
    },
    {
      "ques": "Which class contains method: Cloneable or Object?",
      "ans": " java.lang.Cloneable is marker interface and does not contain at all any method. Clone method is well-defined in the object class.Remember that clone() is a native method, therefore it is applied in C or C++ or any other native programming language."
    },
    {
      "ques": "Is ++ operator thread-safe in Java?",
      "ans": "++ is not thread-safe in Java because it involves multiple commands such as reading a value, implicating it, and then storing it back into memory.This can be overlapped between multiple threads."
    },
    {
      "ques": "Is it possible to store a double value in a long variable without casting?",
      "ans": " No, it is not possible to store a double value into a long variable without casting since the range of double is more, meaning you would need to type cast."
    },
    {
      "ques": "What is the size of int in 64-bit JVM?",
      "ans": "The size of an int variable is constant in Java, it is always 32-bit regardless of platform. This means the size of primitive int is identical in both 32-bit and 64-bit Java Virtual Machine."
    },
    {
      "ques": "What is the size of an int variable in 32-bit and 64-bit JVM?",
      "ans": "The size of int is identical in both 32-bit and 64-bit JVM, and it is always 32-bits or 4 bytes"
    },
    {
      "ques": "What is the difference between ‘a == b’ and ‘a.equals(b)’?",
      "ans": "hashCode() method returns an int hash value corresponding to an object. It is used in hash-based collection classes e.g. HashTable, HashMap, LinkedHashMap. It is very closely related to equals() method.According to the Java specification, two objects which are identical to each other using equals() method needs to have the same hash code."
    },
    {
      "ques": "What is a.hashCode() used for? How is it related to a.equals(b)",
      "ans": "hashCode() method returns an int hash value corresponding to an object. It is used in hash-based collection classes e.g. HashTable, HashMap, LinkedHashMap. It is very closely related to equals() method. According to the Java specification, two objects which are identical to each other using equals() method needs to have the same hash code."
    },
    {
      "ques": "What is the difference between final, finalize and finally?",
      "ans": "Final is a modifier which you can apply to variable, methods, and classes. If you create a variable final, this means its value cannot be changed once initialised.Finalise is a method, which is called just before an object is a garbage collected, allowing it a final chance to save itself, but the call to finalise is not definite.Finally is a keyword which is used in exception handling, along with try and catch. The finally block is always implemented regardless of whether an exception is thrown from try block or not."
    },
    {
      "ques": "What is a compile time constant in Java? What is the risk of using it?",
      "ans": "Public static final variables are also known as the compile time constant, the public is optional there. They are substituted with actual values at compile time because compiler recognises their value up-front, and also recognise that it cannot be altered during runtime.One of the issues is that if you choose to use a public static final variable from in-house or a third party library, and their value changed later, then your client will still be using the old value even after you deploy a new version of JARs."
    },
    {
      "ques": "	What happens when a finally block has a return statement?",
      "ans": "The returned value will override any value returned by the corresponding try block."
    },
    {
      "ques": "Can you override a static method?",
      "ans": "No, static methods are not overridable."
    },
    {
      "ques": "What is the difference between poll() and remove() method?",
      "ans": " Both poll() and remove() take out the object from the Queue but if poll() fails, then it returns null. However, if remove() fails, it throws exception."
    },
    {
      "ques": "What is the difference between LinkedHashMap and PriorityQueue in Java?",
      "ans": " PriorityQueue guarantees that the lowest or highest priority element always remains at the head of the queue. However, LinkedHashMap maintains the order on which elements are inserted.When you repeat over a PriorityQueue, iterator does not promise any order but iterator of LinkedHashMap does promise the order on which elements are put in."
    },
    {
      "ques": "What is the difference between ArrayList and LinkedList in Java?",
      "ans": "The main difference between them is that ArrayList is supported by array data structure, supports random access. LinkedList is backed by linked list data structure and doesn’t support random access.s"
    },
    {
      "ques": " How do you print Array in Java?",
      "ans": "You can print an array by using the Arrays.toString() and Arrays.deepToString() method. Since Array does not implement to String() by itself, just passing an array to System.out.printIn() will not print its content but Array.to.String will print each element."
    },
    {
      "ques": "Is LinkedList in Java a doubly or singly linked list?",
      "ans": "LinkedList is a doubly linked list, and you can review the code in JDK. In Eclipse, you are able to use the shortcut, Ctrl + T to directly open this class in editor."
    },
    {
      "ques": "What is the difference between Hashtable and HashMap?",
      "ans": "There are several differences between the two classes, including:Hashtable is a legacy class and current from JDK 1, HashMap was introduced and added later.Hashtable is synchronised and slower whereas HashMap is not synchronised and faster.Hashtable does not allow null keys but HashMap allows one null key."
    },
    {
      "ques": "How does HashSet work internally in Java?",
      "ans": "HashSet is internally implemented using a HashMap. Since a Map needs a key and value, a default value is used for all keys. Like HashMap, HashSet does not allow identical keys and only one null key – you are only able to store one null object in HashSet."
    },
    {
      "ques": "Is it possible for two unequal objects to have the same hashcode",
      "ans": "TYes, two unequal objects can have the same hashcode. This is why collision can occur in hashmap. The equal hashcode contract only says that two equal objects must have the identical hashcode, but there is no indication to say anything about the unequal object."
    },
    {
      "ques": "What is the difference between Comparator and Comparable in Java?",
      "ans": "The comparable interface is used to define the natural order of object while Comparator is used to describe custom order. Comparable can always be one, but it is possible to have multiple comparators to define a custom order for objects."
    },
    {
      "ques": "What is the byte order of ByteBuffer?",
      "ans": "The byte order is used when reading or writing multibyte values, and when creating buffers that are views of this byte buffer. The order of a new byte buffer is always BIG_ENDIAN."
    },
    {
      "ques": "	What is the memory mapped buffer in Java?",
      "ans": "TJava IO has been considerably fast after the introduction of NIO and memory mapped file offers fastest IO operation possible in Java.A key advantage of memory mapped file is that operating system is responsible for reading and writing and even if your program malfunctioned just after writing into memory. OS will take care of writing content to file."
    },
    {
      "ques": "How would you format a data in Java? i.e. in the DDMMYYY format.",
      "ans": " This can be done by using either SimpleDateFormat class or java-time library to format a date in Java. DateFormat class lets you format the date on many common formats."
    },
    {
      "ques": " How do you show the time zone in a formatted date In Kava?",
      "ans": " You are able to put time zone information in formatted Date using z attribute of DateFormat class."
    },
    {
      "ques": " How do you test static method?",
      "ans": "PowerMock library can be used to test static methods in Java."
    },
    {
      "ques": "What is the difference between state-based unit testing and interaction-based unit testing?",
      "ans": "State-based unit testing tests that the resulting state of a piece of code under test is as expected. Interaction-based testing tests that the piece of code under tests followed a certain flow or invoked certain methods as expected."
    },
    {
      "ques": "How do you write a Java program to convert bytes to long?",
      "ans": "The byte takes 1 byte of memory and long takes 8 bytes of memory. Assignment 1 byte value to 8 bytes is done indirectly by the JVM.Byte -> short -> int -> long -> float -> double.The left-side value can be assigned to any right-side value and is done indirectly. The reverse requires explicit casting."
    },
    {
      "ques": "How do you reverse a String in Java without using StringBuffer?",
      "ans": " To reverse a String in Java, you are able to use rich Java API to quickly reverse contents of any String object. The Java library provides String Buffer and StringBuilder class with reverse() method, which can be used to reverse String in Java.Since changing between String and StringBuffer is very easy, this is the easiest way presented to reverse String in Java. Reverse is a recursive job, and for that reason you can use recursion as well as loop to reverse String in Java."
    },
    {
      "ques": "How do you check if two given String are anagrams?",
      "ans": "Anagrams are a mix-up of characters in String e.g. army and mary, stop and pots etc. To identify if Strings are anagram, you will need to get their character array and identify if they are equal or not.You are able to use indexOf(), substring() and StringBuffer or StringBuilder class to solve this question."
    },
    {
      "ques": "How do you convert String to int in Java?",
      "ans": " Java provides Integer.parseInt() method to parse a String to an int value. However, there is another way to do this, which takes advantage of the parsing logic of parseInt() method as well as caching offered by Flyweight design pattern, which makes it more efficient and useful."
    },
    {
      "ques": "What is the difference between abstract class and interface in Java?",
      "ans": " There are various differences between abstract class and interface in Java, however, the most significant would be Java’s restriction on permitting a class to extend just one class but lets it implement multiple interfaces.An abstract class is good to define default behaviour for a family of class, but the interface is good to outline which is then used to leverage Polymorphism."
    },
    {
      "ques": " What is Law of Demeter violation and why does it matter?",
      "ans": " Java is centred on application programming and structuring code. If you have good knowledge of common coding best practices, patterns, and what not do, then you can write good code.Law of Demeter suggests you ‘talk to friends and not stranger’, therefore used to reduce coupling between classes."
    },
    {
      "ques": "What is Adapter pattern and when would you use it?",
      "ans": "Adapter pattern provides interface conversion. For example, if your client is using some interface but you have something else, you can write an adapter to bridge them together."
    },
    {
      "ques": "What is an abstract class? How is it different from an interface, and why would you use it?",
      "ans": " An abstract class is a class which can have state, code, and implementation, but an interface is a contract which is totally abstract.The abstract class and inheritance equally take precautions that most of the code is written with abstract and high-level classes, therefore it can influence Inheritance and Polymorphism."
    },
    {
      "ques": "Which is better: constructor injection or setter dependency injection?",
      "ans": " Both have their advantages and disadvantages. Constructor injection guaranteed that class will be initialised with all its dependency. However, setter dependency injection offers flexibility to set an optional dependency.Setter dependency injection is also more understandable if you are using XML file to define dependency. A general rule of thumb is to use constructor injection for compulsory dependency and use setter injection for non-compulsory dependency."
    },
    {
      "ques": "What is the difference between Adapter and Decorator pattern?",
      "ans": "Though they are both similar, the difference is the intent of each pattern. The adapter pattern is used to bridge the gap in the middle of two interfaces, but Decorator pattern is used to add an extra level of indirection to support distributed, controlled or intelligent access."
    },
    {
      "ques": "What is Template method pattern?",
      "ans": "Template pattern provides an outline of an algorithm and lets you configure or customise its steps. For example, you are able to view a sorting algorithm as a template to sort object.It describes steps for sorting but lets you arrange how to associate them using Comparable or something comparable in another language. This pattern uses double dispatch to supplement another level of indirection."
    },
    {
      "ques": "What is the difference between Inheritance and Composition?",
      "ans": "Both allow code reuse, however, Composition is more flexible than Inheritance because it lets you switch to a different implementation at run-time. Code written using Composition is also better and easier to test than code including inheritance hierarchies."
    },
    {
      "ques": "Explain overloading and overriding in Java.",
      "ans": "They both let you write two methods of different functionality but with the same name, but overloading accumulates time activity while overriding is runtime activity. You can overload a method in the same class, however, you can only override a method in child classes."
    },
    {
      "ques": "What is the difference between nester static class and top-level class?",
      "ans": " A public top-level class must have the same name as the name of the source file – there is no obligation for nested static class. nester static class is at all times inside a top-level class and you need to use the name of the top-level class to refer nested static class. For example, HashMap.Entry is a nester static class, whereby HashMap is a top-level class and Entry is a nested static class."
    },
    {
      "ques": "Is it possible to write a regular expression to check if String is a number?",
      "ans": "A numeric String is only able to contain digits i.e. 0-9 and +/- sign. By using this information, you can write following regular expression to check if given String is number or not."
    },
    {
      "ques": "What is the difference between throw and throws in Java?",
      "ans": " The throw is used to actually throw an instance of java.lang.throwable class, meaning you can throw both Error and Exception using throw keyword.However, throws is used as part of method declaration and indicate which kind of exceptions are thrown by this method, so that its caller can handle them.It is compulsory to assert any unhandled checked exception in throws clause in Java."
    },
    {
      "ques": "What is the difference between Serializable and Externalizable in Java?",
      "ans": "Serializable interface is used to make Java classes serializable so that they can be transmitted over the network or their state can be kept on disk. However, it influences default serialization built-in JVM, which is pricey, fragile, and unsecured.Externalizable lets you fully control the Serialization process, identify a customer binary format and enhance security measure."
    },
    {
      "ques": "What is the difference between DOM and SAX parser in Java?",
      "ans": "PowerMock library can be used to test static methods in Java."
    },
    {
      "ques": " How do you test static method?",
      "ans": "DOM parser loads the whole XML into memory to create a tree-based DOM model. This helps it quickly locate nodes and make a change in the structure of XML. SAX parser is an event based parser and does not load the whole XML into memory.For this reason, DOM is quicker than SAX but it needs more memory and is not fitting to parse large XML files."
    },
    {
      "ques": "What is the difference between Maven and ANT in Java?",
      "ans": "Both are a build tool and used to create a Java application build but Maven is more advanced. It provides a standard structure for Java projects based on the ‘convention over configuration’ concept and routinely manages dependencies (JAR files on which your application is dependent) for Java application."
    },
    {
      "ques": "What is the difference between checked and unchecked exceptions?",
      "ans": " Checked exception are checked at compile time. If your code throws a checked exception, it must handle it or specify it using the ‘throws’ keyword.Unchecked exceptions extend the RuntimeException or Error class and do not need to be handled in the code if they are thrown or specified using ‘throws’. You can always write code to specifically handle an unchecked exception."
    },
    {
      "ques": "What is the difference between Object Oriented Programming and Object Based Programming?",
      "ans": "Object oriented programming supports all the usual OOP features such as inheritance and polymorphism. It also has no built in objects. Object based programming does not support inheritance or polymorphism and does have some built in objects."
    },
    {
      "ques": " What is JIT compiler?",
      "ans": "Just-In-Time(JIT) compiler:It is used to improve the performance. JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of time needed for compilation.Here the term “compiler” refers to a translator from the instruction set of a Java virtual machine (JVM) to the instruction set of a specific CPU.	"
    },
    {
      "ques": "What is platform?",
      "ans": "A platform is basically the hardware or software environment in which a program runs. There are two types of platforms software-based and hardware-based. Java provides software-based platform. "
    },
    {
      "ques": "What is the main difference between Java platform and other platforms?",
      "ans": "The Java platform differs from most other platforms in the sense that it's a software-based platform that runs on top of other hardware-based platforms.It has two components:1)Runtime Environment 2)API(Application Programming Interface)"
    },
    {
      "ques": "What gives Java its 'write once and run anywhere' nature? ",
      "ans": "The bytecode. Java is compiled to be a byte code which is the intermediate language between source code and machine code. This byte code is not platform specific and hence can be fed to any platform."
    },
    {
      "ques": "What is classloader?",
      "ans": "The classloader is a subsystem of JVM that is used to load classes and interfaces.There are many types of classloaders e.g. Bootstrap classloader, Extension classloader, System classloader, Plugin classloader etc."
    },
    {
      "ques": "What is the default value of the local variables? ",
      "ans": "The local variables are not initialized to any default value, neither primitives nor object references. "
    },
    {
      "ques": "What is difference between object oriented programming language and object based programming language?",
      "ans": "Object based programming languages follow all the features of OOPs except Inheritance. Examples of object based programming languages are JavaScript, VBScript etc. "
    },
    {
      "ques": " What is javac ?",
      "ans": "It produces the java byte code from *.java file. It is the intermediate representation of your source code that contains instructions."
    },
    {
      "ques": " What is class?",
      "ans": "Class is nothing but a template that describes the data and behavior associated with instances of that class."
    },
    {
      "ques": "  Path and ClassPath?",
      "ans": "Path specifies the location of .exe files while classpath is used for specifying the location of .class files."
    },
    {
      "ques": "What is Unicode?",
      "ans": "Java uses Unicode to represent the characters. Unicode defines a fully international character set that can represent all of the characters found in human languages."
    },
    {
      "ques": "What are Literals?",
      "ans": "A literal is a value that may be assigned to a primitive or string variable or passed as an argument to a method."
    },
    {
      "ques": "Dynamic Initialization?",
      "ans": "Java allows variables to be initialized dynamically, using any expression valid at the time the variable is declared."
    },
    {
      "ques": "Why can’t I do myArray.length () ? Arrays are just objects, right?",
      "ans": "Yes, the specification says that arrays are object references just like classes are. You can even invoke the methods of Object such as toString () and hashCode () on an array. However, length is a data item of an array and not a method. So you have to use myArray.length."
    },
    {
      "ques": "  Can I declare a data type inside loop in java?",
      "ans": "Any Data type declaration should not be inside the loop."
    },
    {
      "ques": " What is static and dynamic binding?",
      "ans": "Binding refers to the linking of method call to its body. A binding that happens at compile time is known as static binding while binding at runtime is known as dynamic binding."
    },
    {
      "ques": " What is Encapsulation?",
      "ans": "Encapsulation means the localization of the information or knowledge within an object.Encapsulation is also called as “Information Hiding”. Read it here in detail."
    },
    {
      "ques": " Abstract class?",
      "ans": "An abstract class is a class which can’t be instantiated (we cannot create the object of abstract class), we can only extend such classes. It provides the generalized form that will be shared by all of its subclasses, leaving it to each subclass to fill in the details. We can achieve partial abstraction using abstract classes, to achieve full abstraction we use interfaces."
    },
    {
      "ques": " Which access modifiers can be applied to the inner classes?",
      "ans": "public ,private , abstract, final, protected."
    },
    {
      "ques": " What is default and parameterized constructors?",
      "ans": "Default: Constructors with no arguments are known as default constructors, when you don’t declare any constructor in a class, compiler creates a default one automatically."
    },
    {
      "ques": "  What is default and parameterized constructors?",
      "ans": "Default: Constructors with no arguments are known as default constructors, when you don’t declare any constructor in a class, compiler creates a default one automatically.Parameterized: Constructor with arguments are known as parameterized constructors."
    },
    {
      "ques": " Can a constructor call another constructor?",
      "ans": "Yes. A constructor can call the another constructor of same class using this keyword. For e.g. this() calls the default constructor.Note: this() must be the first statement in the calling constructor."
    },
    {
      "ques": "Can a constructor call the constructor of parent class?",
      "ans": "Yes. In fact it happens by default. A child class constructor always calls the parent class constructor. However we can still call it using super keyword. For e.g. super() can be used for calling super class default constructor."
    },
    {
      "ques": "What’s the purpose of Static methods and static variables?",
      "ans": " When there is a requirement to share a method or a variable between multiple objects of a class instead of creating separate copies for each object, we use static keyword to make a method or variable shared for all objects."
    },
    {
      "ques": " What is data encapsulation and what’s its significance?",
      "ans": "Encapsulation is a concept in Object Oriented Programming for combining properties and methods in a single unit.Encapsulation helps programmers to follow a modular approach for software development as each object has its own set of methods and variables and serves its functions independent of other objects. Encapsulation also serves data hiding purpose."
    },
    {
      "ques": " Explain ways to pass the arguments in Java?",
      "ans": "In java, arguments can be passed in 2 ways,Pass by value – Changes made to the parameter of the subroutines have no effect on the argument used to call it.Pass by reference – Changes made to the parameter will affect the argument used to call the subroutine."
    },
    {
      "ques": "What is static variable in java?",
      "ans": "Static variables are also known as class level variables. A static variable is same for all the objects of that particular class in which it is declared."
    },
    {
      "ques": "What are Packages? ",
      "ans": "A Package can be defined as a grouping of related types (classes, interfaces, enumerations and annotations )"
    },
    {
      "ques": "What is the difference between import java.util.Date and java.util.* ?",
      "ans": "The star form (java.util.* ) includes all the classes of that package and that may increase the compilation time – especially if you import several packages. However it doesn’t have any effect run-time performance."
    },
    {
      "ques": " Use of finalize() method in java?",
      "ans": "finalize() method is used to free the allocated resource."
    },
    {
      "ques": "Can the Garbage Collection be forced by any means?",
      "ans": "No, its not possible. you cannot force garbage collection. you can call system.gc() methods for garbage collection but it does not guarantee that garbage collection would be done."
    },
    {
      "ques": "  What is an exception?",
      "ans": "Exceptions are abnormal conditions that arise during execution of the program. It may occur due to wrong user input or wrong logic written by programmer."
    },
    {
      "ques": " What is the difference between Error and Exception?",
      "ans": "Error: Mostly a system issue. It always occur at run time and must be resolved in order to proceed further.Exception: Mostly an input data issue or wrong logic in code. Can occur at compile time or run time."
    },
    {
      "ques": "What is throw keyword in exception handling?",
      "ans": "The throw keyword is used for throwing user defined or pre-defined exception."
    },
    {
      "ques": " What is throws keyword?",
      "ans": "If a method does not handle a checked exception, the method must declare it using the throwskeyword. The throws keyword appears at the end of a method’s signature."
    },
    {
      "ques": " Can static block throw exception?",
      "ans": "Yes, A static block can throw exceptions. It has its own limitations: It can throw only Runtime exception (Unchecked exceptions), In order to throw checked exceptions you can use a try-catch block inside it."
    },
    {
      "ques": "Can we have a try block without catch or finally block?",
      "ans": "No, we cannot have a try block without catch or finally block. We must have either one of them or both."
    },
    {
      "ques": "Can we have multiple catch blocks following a single try block?",
      "ans": "Yes we can have multiple catch blocks in order to handle more than one exception."
    },
    {
      "ques": " Is it possible to have finally block without catch block?",
      "ans": "Yes, we can have try block followed by finally block without even using catch blocks in between."
    },
    {
      "ques": "When a finally block does not get executed?",
      "ans": "The only time finally won’t be called is if you call System.exit() or if the JVM crashes first."
    },
    {
      "ques": " Can we handle more than one exception in a single catch block?",
      "ans": "Yes we can do that using if-else statement but it is not considered as a good practice. We should have one catch block for one exception."
    },
    {
      "ques": "What is a Java Bean?",
      "ans": "A JavaBean is a Java class that follows some simple conventions including conventions on the names of certain methods to get and set state called Introspection. Because it follows conventions, it can easily be processed by a software tool that connects Beans together at runtime. JavaBeans are reusable software components.."
    },
    {
      "ques": "What is Multithreading?",
      "ans": "It is a process of executing two or more part of a program simultaneously. Each of these parts is known as threads. In short the process of executing multiple threads simultaneously is known as multithreading.."
    },
    {
      "ques": "What is the main purpose of having multithread environment?",
      "ans": "Maximizing CPU usage and reducing CPU idle time"
    },
    {
      "ques": "Explain yield and sleep?",
      "ans": "yield() – It causes the currently executing thread object to temporarily pause and allow other threads to execute.sleep() – It causes the current thread to suspend execution for a specified period. When a thread goes into sleep state it doesn’t release the lock."
    },
    {
      "ques": "What is the difference between sleep() and wait()?",
      "ans": "sleep() – It causes the current thread to suspend execution for a specified period. When a thread goes into sleep state it doesn’t release the lockwait() – It causes current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed."
    },
    {
      "ques": " What is a daemon thread?",
      "ans": "A daemon thread is a thread, that does not prevent the JVM from exiting when the program finishes but the thread is still running. An example for a daemon thread is the garbage collection."
    },
    {
      "ques": "What does join( ) method do?",
      "ans": "if you use join() ,it makes sure that as soon as a thread calls join,the current thread(yes,currently running thread) will not execute unless the thread you have called join is finished."
    },
    {
      "ques": "Preemptive scheduling vs. time slicing?",
      "ans": "1) The preemptive scheduling is prioritized. The highest priority process should always be the process that is currently utilized.2) Time slicing means task executes for a defined slice/ period of time and then enter in the pool of ready state. The scheduler then determines which task execute next based on priority or other factor."
    },
    {
      "ques": " Can we call run() method of a Thread class?",
      "ans": "Yes, we can call run() method of a Thread class but then it will behave like a normal method. To actually execute it in a Thread, you should call Thread.start() method to start it."
    },
    {
      "ques": " What is Starvation?",
      "ans": "Starvation describes a situation where a thread is unable to gain regular access to shared resources and is unable to make progress. This happens when shared resources are made unavailable for long periods by “greedy” threads. For example, suppose an object provides a synchronized method that often takes a long time to return. If one thread invokes this method frequently, other threads that also need frequent synchronized access to the same object will often be blocked."
    },
    {
      "ques": "What is deadlock?",
      "ans": "Deadlock describes a situation where two or more threads are blocked forever, waiting for each other."
    },
    {
      "ques": "What is Serialization and de-serialization? ",
      "ans": "Serialization is a process of converting an object and its attributes to the stream of bytes. De-serialization is recreating the object from stream of bytes; it is just a reverse process of serialization. To know more about serialization with example program"
    },
    {
      "ques": " Do we need to implement any method of Serializable interface to make an object serializable?",
      "ans": "No. In order to make an object serializable we just need to implement the interface Serializable. We don’t need to implement any methods."
    },
    {
      "ques": " A string class is immutable or mutable?",
      "ans": "String class is immutable that’s the reason once its object gets created, it cannot be changed further."
    },
    {
      "ques": "What is toString() method in Java?",
      "ans": "The toString() method returns the string representation of any object."
    },
    {
      "ques": "What is List?",
      "ans": "Elements can be inserted or accessed by their position in the list, using a zero-based index.A list may contain duplicate elements."
    },
    {
      "ques": " What is Map?",
      "ans": "Map interface maps unique keys to values. A key is an object that we use to retrieve a value later. A map cannot contain duplicate keys: Each key can map to at most one value."
    },
    {
      "ques": "What is Set?",
      "ans": "A Set is a Collection that cannot contain duplicate elements."
    },
    {
      "ques": " Why ArrayList is better than Arrays?",
      "ans": "Array can hold fixed number of elements. ArrayList can grow dynamically."
    },
    {
      "ques": "For addition and deletion. Which one is most preferred: ArrayList or LinkedList?",
      "ans": "LinkedList. Because deleting or adding a node in LinkedList is faster than ArrayList."
    },
    {
      "ques": " For searches. Which one is most preferred: ArrayList or LinkedList?",
      "ans": "ArrayList. Searching an element is faster in ArrayList compared to LinkedList."
    },
    {
      "ques": "How do you do file I/O from an appl",
      "ans": "Unsigned applets are simply not allowed to read or write files on the local file system .Unsigned applets can, however, read (but not write) non-class files bundled with your applet on the server, called resource files"
    },
    {
      "ques": " Applet Life cycle?",
      "ans": "Following stage of any applets life cycle, starts with init(), start(), paint(), stop() and destroy()"
    },
    {
      "ques": "showStatus() ?–",
      "ans": "To display the message at the bottom of the browser when applet is started."
    },
    {
      "ques": " What is the Event handling?",
      "ans": "Is irrespective of any component, if any action performed/done on Frame, Panel or on window, handling those actions are called Event Handling."
    },
    {
      "ques": "What is the difference between an Inner Class and a Sub-Class?",
      "ans": "An Inner class is a class which is nested within another class. An Inner class has access rights for the class which is nesting it and it can access all variables and methods defined in the outer class.A sub-class is a class which inherits from another class called super class. Sub-class can access all public and protected methods and fields of its super class."
    },
    {
      "ques": "What’s the purpose of Static methods and static variables?",
      "ans": "A Set is a Collection that cannot contain duplicate elements."
    },
    {
      "ques": "What is Set?",
      "ans": "When there is a requirement to share a method or a variable between multiple objects of a class instead of creating separate copies for each object, we use static keyword to make a method or variable shared for all objects."
    },
    {
      "ques": "What is data encapsulation and what’s its significance?",
      "ans": "Encapsulation is a concept in Object Oriented Programming for combining properties and methods in a single unit.Encapsulation helps programmers to follow a modular approach for software development as each object has its own set of methods and variables and serves its functions independent of other objects. Encapsulation also serves data hiding purpose."
    },
    {
      "ques": " What is a singleton class? Give a practical example of its usage.",
      "ans": "A singleton class in java can have only one instance and hence all its methods and variables belong to just one instance. Singleton class concept is useful for the situations when there is a need to limit the number of objects for a class.The best example of singleton usage scenario is when there is a limit of having only one connection to a database due to some driver limitations or because of any licensing issues."
    },
    {
      "ques": "What is Set?",
      "ans": "A Set is a Collection that cannot contain duplicate elements."
    },
    {
      "ques": "What is the difference between double and float variables in Java?",
      "ans": "In java, float takes 4 bytes in memory while Double takes 8 bytes in memory. Float is single precision floating point decimal number while Double is double precision decimal number."
    },
    {
      "ques": "What’s the base class in Java from which all classes are derived?",
      "ans": "java.lang.object"
    },
    {
      "ques": " Can main() method in Java can return any data?",
      "ans": "In java, main() method can’t return any data and hence, it’s always declared with a void return type."
    },
    {
      "ques": "Can we declare a class as Abstract without having any abstract method?",
      "ans": "Yes we can create an abstract class by using abstract keyword before class name even if it doesn’t have any abstract method. However, if a class has even one abstract method, it must be declared as abstract otherwise it will give an error."
    },
    {
      "ques": "What are Java Packages? What’s the significance of packages?",
      "ans": "In Java, package is a collection of classes and interfaces which are bundled together as they are related to each other. Use of packages helps developers to modularize the code and group the code for proper re-use. Once code has been packaged in Packages, it can be imported in other classes and used."
    },
    {
      "ques": "Can we declare the main method of our class as private?",
      "ans": "In java, main method must be public static in order to run any application correctly. If main method is declared as private, developer won’t get any compilation error however, it will not get executed and will give a runtime error."
    },
    {
      "ques": "How can we pass argument to a function by reference instead of pass by value?",
      "ans": "In java, we can pass argument to a function only by value and not by reference"
    },
    {
      "ques": " How an object is serialized in java?",
      "ans": " In java, to convert an object into byte stream by serialization, an interface with the name Serializable is implemented by the class. All objects of a class implementing serializable interface get serialized and their state is saved in byte stream."
    },
    {
      "ques": "When we should use serialization?",
      "ans": "Serialization is used when data needs to be transmitted over the network. Using serialization, object’s state is saved and converted into byte stream .The  byte stream is transferred over the network and the object is re-created at destination."
    },
    {
      "ques": " Is it compulsory for a Try Block to be followed by a Catch Block in Java for Exception handling?",
      "ans": "Try block needs to be followed by either Catch block or Finally block or both. Any exception thrown from try block needs to be either caught in the catch block or else any specific tasks to be performed before code abortion are put in the Finally block."
    },
    {
      "ques": "Can a class have multiple constructors?",
      "ans": "Yes, a class can have multiple constructors with different parameters. Which constructor gets used for object creation depends on the arguments passed while creating the objects."
    },
    {
      "ques": "Can we override static methods of a class?",
      "ans": "We cannot override static methods. Static methods belong to a class and not to individual objects and are resolved at the time of compilation (not at runtime).Even if we try to override static method,we will not get an complitaion error,nor the impact of overriding when running the code."
    },
    {
      "ques": "Is String a data type in java?",
      "ans": "String is not a primitive data type in java. When a string is created in java, it’s actually an object of Java.Lang.String class that gets created. After creation of this string object, all built-in methods of String class can be used on the string object."
    },
    {
      "ques": "What is Set?",
      "ans": "A Set is a Collection that cannot contain duplicate elements."
    },
    {
      "ques": "Why Strings in Java are called as Immutable?",
      "ans": " In java, string objects are called immutable as once value has been assigned to a string, it can’t be changed and if changed, a new object is created."
    },
    {
      "ques": "What’s the difference between an array and Vector?",
      "ans": "An array groups data of same primitive type and is static in nature while vectors are dynamic in nature and can hold data of different data types."
    },
    {
      "ques": " When a lot of changes are required in data, which one should be a preference to be used? String or StringBuffer?",
      "ans": "Since StringBuffers are dynamic in nature and we can change the values of StringBuffer objects unlike String which is immutable, it’s always a good choice to use StringBuffer when data is being changed too much. If we use String in such a case, for every data change a new String object will be created which will be an extra overhead."
    },
    {
      "ques": "How garbage collection is done in Java?",
      "ans": "In java, when an object is not referenced any more, garbage collection takes place and the object is destroyed automatically. For automatic garbage collection java calls either System.gc() method or Runtime.gc() method."
    },
    {
      "ques": "How we can execute any code even before main method?",
      "ans": " If we want to execute any statements before even creation of objects at load time of class, we can use a static block of code in the class. Any statements inside this static block of code will get executed once at the time of loading the class even before creation of objects in the main method."
    },
    {
      "ques": "  How objects of a class are created if no constructor is defined in the class?",
      "ans": "Even if no explicit constructor is defined in a java class, objects get created successfully as a default  constructor is implicitly used for object creation. This constructor has no parameters."
    },
    {
      "ques": "In multi-threading how can we ensure that a resource isn’t used by multiple threads simultaneously?",
      "ans": " In multi-threading, access to the resources which are shared among multiple threads can be controlled by using the concept of synchronization. Using synchronized keyword, we can ensure that only one thread can use shared resource at a time and others can get control of the resource only once it has become free from the other one using it."
    },
    {
      "ques": "Can we call the constructor of a class more than once for an object?",
      "ans": "Constructor is called automatically when we create an object using new keyword. It’s called only once for an object at the time of object creation and hence, we can’t invoke the constructor again for an object after its creation."
    },
    {
      "ques": "There are two classes named classA and classB. Both classes are in the same package. Can a private member of classA can be accessed by an object of classB?",
      "ans": "Private members of a class aren’t accessible outside the scope of that class and any other class even in the same package can’t access them."
    },
    {
      "ques": "What’s the benefit of using inheritance?",
      "ans": "Key benefit of using inheritance is reusability of code as inheritance enables sub-classes to reuse the code of its super class. Polymorphism (Extensibility ) is another great benefit which allow new functionality to be introduced without effecting existing derived classes.."
    },
    {
      "ques": "What’s the default access specifier for variables and methods of a class?",
      "ans": "Default access specifier for variables and method is package protected i.e variables and class is available to any other class but in the same package,not outside the package."
    },
    {
      "ques": "What’s difference between Stack and Queue?",
      "ans": "Stack and Queue both are used as placeholder for a collection of data. The primary difference between a stack and a queue is that stack is based on Last in First out (LIFO) principle while a queue is based on FIFO (First In First Out) principle."
    },
    {
      "ques": "How can we use primitive data types as objects?",
      "ans": "Primitive data types like int can be handled as objects by the use of their respective wrapper classes. For example, Integer is a wrapper class for primitive data type int. We can apply different methods to a wrapper class, just like any other object."
    },
    {
      "ques": "Which types of exceptions are caught at compile time?",
      "ans": " Checked exceptions can be caught at the time of program compilation. Checked exceptions must be handled by using try catch block in the code in order to successfully compile the code"
    },
    {
      "ques": "Can we use a default constructor of a class even if an explicit constructor is defined?",
      "ans": "Java provides a default no argument constructor if no explicit constructor is defined in a Java class. But if an explicit constructor has been defined, default constructor can’t be invoked and developer can use only those constructors which are defined in the class.."
    },
    {
      "ques": " Can we override a method by using same method name and arguments but different return types?",
      "ans": "The basic condition of method overriding is that method name, arguments as well as return type must be exactly same as is that of the method being overridden.  Hence using a different return type doesn’t override a method."
    },
    {
      "ques": " A person says that he compiled a java class successfully without even having a main method in it? Is it possible?",
      "ans": "main method is an entry point of Java class and is required for execution of the program however; a class gets compiled successfully even if it doesn’t have a main method. It can’t be run though."
    },
    {
      "ques": " Can we call a non-static method from inside a static method?",
      "ans": "Non-Static methods are owned by objects of a class and have object level scope and in order to call the non-Static methods from a static block (like from a static main method), an object of the class needs to be created first. Then using object reference, these methods can be invoked."
    },
    {
      "ques": "Can variables be used in Java without initialization?	",
      "ans": "In Java, if a variable is used in a code without prior initialization by a valid value, program doesn’t compile and gives an error as no default value is assigned to variables in Java."
    },
    {
      "ques": "Can a constructor have different name than a Class name in Java?",
      "ans": " Constructor in Java must have same name as the class name and if the name is different, it doesn’t act as a constructor and compiler thinks of it as a normal method."
    },
    {
      "ques": "Can a class in Java be inherited from more than one class?",
      "ans": " In Java, a class can be derived from only one class and not from multiple classes. Multiple inheritances is not supported by Java.."
    },
    {
      "ques": "What will be the output of Round(3.7) and Ceil(3.7)?",
      "ans": "Round(3.7) returns 4 and  Ceil(3.7) returns 4."
    },
    {
      "ques": "Can we use goto in Java to go to a particular line?",
      "ans": "In Java, there is not goto keyword and java doesn’t support this feature of going to a particular labeled line."
    },
    {
      "ques": "Is JDK required on each machine to run a Java program?",
      "ans": "JDK is development Kit of Java and is required for development only and to run a Java program on a machine, JDK isn’t required. Only JRE is required."
    },
    {
      "ques": "What is Set?",
      "ans": "A Set is a Collection that cannot contain duplicate elements."
    },
    {
      "ques": "Is it possible to define a method in Java class but provide it’s implementation in the code of another language like C?",
      "ans": "Yes, we can do this by use of native methods. In case of native method based development, we define public static methods in our Java class without its implementation and then implementation is done in another language like C separately."
    },
    {
      "ques": "How destructors are defined in Java?",
      "ans": " In Java, there are no destructors defined in the class as there is no need to do so. Java has its own garbage collection mechanism which does the job automatically by destroying the objects when no longer referenced."
    },
    {
      "ques": "Can a variable be local and static at the same time?",
      "ans": "No a variable can’t be static as well as local at the same time. Defining a local variable as static gives compilation error."
    },
    {
      "ques": "Can we have static methods in an Interface?",
      "ans": " Static methods can’t be overridden in any class while any methods in an interface are by default abstract and are supposed to be implemented in the classes being implementing the interface. So it makes no sense to have static methods in an interface in Java."
    },
    {
      "ques": "In a class implementing an interface, can we change the value of any variable defined in the interface?",
      "ans": " No, we can’t change the value of any variable of an interface in the implementing class as all variables defined in the interface are by default public, static and Final and final variables are like constants which can’t be changed later."
    },
    {
      "ques": " I want to re-reach and use an object once it has been garbage collected. How it’s possible?",
      "ans": "Once an object has been destroyed by garbage collector, it no longer exists on the heap and it can’t be accessed again. There is no way to reference it again."
    },
    {
      "ques": "In Java thread programming, which method is a must implementation for all threads?",
      "ans": "Run() is a method of Runnable interface that must be implemented by all threads."
    },
    {
      "ques": "I want to control database connections in my program and want that only one thread should be able to make database connection at a time. How can I implement this logic?",
      "ans": "This can be implemented by use of the concept of synchronization. Database related code can be placed in a method which hs synchronized keyword so that only one thread can access it at a time."
    },
    {
      "ques": "I want my class to be developed in such a way that no other class (even derived class) can create its objects. How can I do so?",
      "ans": "If we declare the constructor of a class as private, it will not be accessible by any other class and hence, no other class will be able to instantiate it and formation of its object will be limited to itself only."
    },
    {
      "ques": " How objects are stored in Java?",
      "ans": " In java, each object when created gets a memory space from a heap. When an object is destroyed by a garbage collector, the space allocated to it from the heap is re-allocated to the heap and becomes available for any new objects."
    },
    {
      "ques": " How can we find the actual size of an object on the heap?",
      "ans": " In java, there is no way to find out the exact size of an object on the heap."
    },
    {
      "ques": "What happens if an exception is not handled in a program?",
      "ans": "If an exception is not handled in a program using try catch blocks, program gets aborted and no statement executes after the statement which caused exception throwing."
    },
    {
      "ques": "I have multiple constructors defined in a class. Is it possible to call a constructor from another constructor’s body?",
      "ans": "If a class has multiple constructors, it’s possible to call one constructor from the body of another one using this()."
    },
    {
      "ques": "Is there a way to increase the size of an array after its declaration?",
      "ans": " Arrays are static and once we have specified its size, we can’t change it. If we want to use such collections where we may require a change of size ( no of items), we should prefer vector over array."
    },
    {
      "ques": "If an application has multiple classes in it, is it okay to have a main method in more than one class?",
      "ans": "If there is main method in more than one classes in a java application, it won’t cause any issue as entry point for any application will be a specific class and code will start from the main method of that particular class only."
    },
    {
      "ques": " I want to persist data of objects for later use. What’s the best approach to do so?",
      "ans": "The best way to persist data for future use is to use the concept of serialization."
    },
    {
      "ques": "What is a Local class in Java?",
      "ans": "In Java, if we define a new class inside a particular block, it’s called a local class. Such a class has local scope and isn’t usable outside the block where its defined."
    },
    {
      "ques": " String and StringBuffer both represent String objects. Can we compare String and StringBuffer in Java?",
      "ans": " Although String and StringBuffer both represent String objects, we can’t compare them with each other and if we try to compare them, we get an error."
    },
    {
      "ques": " Which API is provided by Java for operations on set of objects?",
      "ans": "Java provides a Collection API which provides many useful methods which can be applied on a set of objects. Some of the important classes provided by Collection API include ArrayList, HashMap, TreeSet and TreeMap."
    },
    {
      "ques": "Can we cast any other type to Boolean Type with type casting?",
      "ans": "No, we can neither cast any other primitive type to Boolean data type nor can cast Boolean data type to any other primitive data type."
    },
    {
      "ques": "Can we use different return types for methods when overridden?",
      "ans": "The basic requirement of method overriding in Java is that the overridden method should have same name,  and parameters.But a method can be overridden with a different return type as long as the new return type extends the original."
    },
    {
      "ques": " What’s the base class of all exception classes?",
      "ans": "In Java, Java.lang.Throwable is the super class of all exception classes and all exception classes are derived from this base class."
    },
    {
      "ques": "What’s the order of call of constructors in inheritiance?",
      "ans": "In case of inheritance, when a new object of a derived class is created, first the constructor of the super class is invoked and then the constructor of the derived class is invoked."
    }
  ],
  "experienceiqs": [
    {
      "ques": " Can we make array volatile in Java?",
      "ans": "This is one of the tricky Java multi-threading questions you will see in senior Java developer Interview. Yes, you can make an array volatile in Java but only the reference which is pointing to an array, not the whole array. What I mean, if one thread changes the reference variable to points to another array, that will provide a volatile guarantee, but if multiple threads are changing individual array elements they won't be having happens before guarantee provided by the volatile modifier."
    },
    {
      "ques": "Can volatile make a non-atomic operation to atomic?",
      "ans": "This another good question I love to ask on volatile, mostly as a follow-up of the previous question. This question is also not easy to answer because volatile is not about atomicity, but there are cases where you can use a volatile variable to make the operation atomic.One example I have seen is having a long field in your class. If you know that a long field is accessed by more than one thread e.g. a counter, a price field or anything, you better make it volatile. Why? because reading to a long variable is not atomic in Java and done in two steps, If one thread is writing or updating long value, it's possible for another thread to see half value (fist 32-bit). While reading/writing a volatile long or double (64 bit) is atomic."
    },
    {
      "ques": "What are practical uses of volatile modifier?",
      "ans": "One of the practical use of the volatile variable is to make reading double and long atomic. Both double and long are 64-bit wide and they are read in two parts, first 32-bit first time and next 32-bit second time, which is non-atomic but volatile double and long read is atomic in Java. Another use of the volatile variable is to provide a memory barrier, just like it is used in Disrupter framework. Basically, Java Memory model inserts a write barrier after you write to a volatile variable and a read barrier before you read it. Which means, if you write to volatile field then it's guaranteed that any thread accessing that variable will see the value you wrote and anything you did before doing that right into the thread is guaranteed to have happened and any updated data values will also be visible to all threads, because the memory barrier flushed all other writes to the cache."
    },
    {
      "ques": " What guarantee volatile variable provides?",
      "ans": "volatile variables provide the guarantee about ordering and visibility e.g. volatile assignment cannot be re-ordered with other statements but in the absence of any synchronization instruction compiler, JVM or JIT are free to reorder statements for better performance. volatile also provides the happens-before guarantee which ensures changes made in one thread is visible to others. In some cases volatile also provide atomicity e.g. reading 64-bit data types like long and double are not atomic but read of volatile double or long is atomic."
    },
    {
      "ques": " Write wait-notify code for producer-consumer problem? ",
      "ans": "Please see the answer for a code example. Just remember to call wait() and notify() method from synchronized block and test waiting for condition on the loop instead of if block."
    },
    {
      "ques": " Which one would be easy to write? synchronization code for 10 threads or 2 threads?",
      "ans": "In terms of writing code, both will be of same complexity because synchronization code is independent of a number of threads. Choice of synchronization though depends upon a number of threads because the number of thread present more contention, so you go for advanced synchronization technique e.g. lock stripping, which requires more complex code and expertise."
    },
    {
      "ques": " What is busy spin? Why should you use it?",
      "ans": "Busy spin is one of the technique to wait for events without releasing CPU. It's often done to avoid losing data in CPU cached which is lost if the thread is paused and resumed in some other core. So, if you are working on low latency system where your order processing thread currently doesn't have any order, instead of sleeping or calling wait(), you can just loop and then again check the queue for new messages. It's only beneficial if you need to wait for a very small amount of time e.g. in micro seconds or nano seconds. LMAX Disrupter framework, a high-performance inter-thread messaging library has a BusySpinWaitStrategy which is based on this concept and uses a busy spin loop for EventProcessors waiting on the barrier."
    },
    {
      "ques": " How do you take thread dump in Java?",
      "ans": "You can take a thread dump of Java application in Linux by using kill -3 PID, where PID is the process id of Java process. In Windows, you can press Ctrl + Break. This will instruct JVM to print thread dump in standard out or err and it could go to console or log file depending upon your application configuration. If you have used Tomcat then when"
    },
    {
      "ques": " is Swing thread-safe?",
      "ans": "No, Swing is not thread-safe. You cannot update Swing components e.g. JTable, JList or JPanel from any thread, in fact, they must be updated from GUI or AWT thread. That's why swings provide invokeAndWait() and invokeLater() method to request GUI update from any other threads. This methods put update request in AWT threads queue and can wait till update or return immediately for an asynchronous update. You can also check the detailed answer to learn more."
    },
    {
      "ques": "What is a thread local variable in Java? ",
      "ans": "Thread-local variables are variables confined to a thread, its like thread's own copy which is not shared between multiple threads. Java provides a ThreadLocal class to support thread-local variables. It's one of the many ways to achieve thread-safety. Though be careful while using thread local variable in manged environment e.g. with web servers where worker thread out lives any application variable. Any thread local variable which is not removed once its work is done can potentially cause a memory leak in Java application."
    },
    {
      "ques": " Write code for thread-safe Singleton in Java?  ",
      "ans": "Please see the answer for a code example and step by step guide to creating thread-safe singleton class in Java. When we say thread-safe, which means Singleton should remain singleton even if initialization occurs in the case of multiple threads. Using Java enum as Singleton class is one of the easiest ways to create a thread-safe singleton in Java"
    },
    {
      "ques": " The difference between sleep and wait in Java?",
      "ans": "Though both are used to pause currently running thread, sleep() is actually meant for short pause because it doesn't release lock, while wait() is meant for conditional wait and that's why it release lock which can then be acquired by another thread to change the condition on which it is waiting."
    },
    {
      "ques": " Write wait-notify code for producer-consumer problem? ",
      "ans": "Please see the answer for a code example. Just remember to call wait() and notify() method from synchronized block and test waiting for condition on the loop instead of if block."
    },
    {
      "ques": "What is an immutable object? How do you create an Immutable object in Java?",
      "ans": "Immutable objects are those whose state cannot be changed once created. Any modification will result in a new object e.g. String, Integer, and other wrapper class. Please see the answer for step by step guide to creating Immutable class in Java."
    },
    {
      "ques": " Can we create an Immutable object, which contains a mutable object?",
      "ans": "Yes, its possible to create an Immutable object which may contain a mutable object, you just need to be a little bit careful not to share the reference of the mutable component, instead, you should return a copy of it if you have to. Most common example is an Object which contain the reference of java.util.Date object."
    },
    {
      "ques": " What is the right data type to represent a price in Java?",
      "ans": "BigDecimal if memory is not a concern and Performance is not critical, otherwise double with predefined precision"
    },
    {
      "ques": " How do you convert bytes to String? ",
      "ans": "you can convert bytes to the string using string constructor which accepts byte[], just make sure that right character encoding otherwise platform's default character encoding will be used which may or may not be same."
    },
    {
      "ques": "  Can we cast an int value into byte variable? what will happen if the value of int is larger than byte? ",
      "ans": "Yes, we can cast but int is 32 bit long in java while byte is 8 bit long in java so when you cast an int to byte higher 24 bits are lost and a byte can only hold a value from -128 to 128."
    },
    {
      "ques": "Which class contains clone method? Cloneable or Object?",
      "ans": "java.lang.Cloneable is marker interface and doesn't contain any method clone method is defined in the object class. It is also knowing that clone() is a native method means it's implemented in C or C++ or any other native language."
    },
    {
      "ques": "Is ++ operator is thread-safe in Java?  ",
      "ans": " No it's not a thread safe operator because its involve multiple instructions like reading a value, incriminating it and storing it back into memory which can be overlapped between multiple threads."
    },
    {
      "ques": " Can I store a double value in a long variable without casting? ",
      "ans": "No, you cannot store a double value into a long variable without casting because the range of double is more  that long and you we need to type cast. It's not dificult to answer this question but many develoepr get it wrong due to confusion on which one is bigger between double and long in Java."
    },
    {
      "ques": " What will this return 3*0.1 == 0.3? true or false?",
      "ans": "This is one of the really tricky questions. Out of 100, only 5 developers answered this question and only of them have explained the concept correctly. The short answer is false because some floating point numbers can not be represented exactly."
    },
    {
      "ques": " Which one will take more memory, an int or Integer? ",
      "ans": "One of my favorite Java interview question. The String is Immutable in java because java designer thought that string will be heavily used and making it immutable allow some optimization easy sharing same String object between multiple clients. See the link for the more detailed answer. This is a great question for Java programmers with less experience as it gives them food for thought, to think about how things works in Java, what Jave designers might have thought when they created String class etc."
    },
    {
      "ques": " Why is String Immutable in Java?  ",
      "ans": "One of my favorite Java interview question. The String is Immutable in java because java designer thought that string will be heavily used and making it immutable allow some optimization easy sharing same String object between multiple clients. See the link for the more detailed answer. This is a great question for Java programmers with less experience as it gives them food for thought, to think about how things works in Java, what Jave designers might have thought when they created String class etc."
    },
    {
      "ques": " Can we use String in the switch case?",
      "ans": "Yes from Java 7 onward we can use String in switch case but it is just syntactic sugar. Internally string hash code is used for the switch. See the detaiedl answer for more explanation and discussion."
    },
    {
      "ques": "What is constructor chaining in Java? ",
      "ans": "When you call one constructor from other than it's known as constructor chaining in Java. This happens when you have multiple, overloaded constructor in the class."
    },
    {
      "ques": " What is the size of int in 64-bit JVM?",
      "ans": "The size of an int variable is constant in Java, it's always 32-bit irrespective of platform. Which means the size of primitive int is same in both 32-bit and 64-bit Java virtual machine."
    },
    {
      "ques": " The difference between Serial and Parallel Garbage Collector? ",
      "ans": "Even though both the serial and parallel collectors cause a stop-the-world pause during Garbage collection. The main difference between them is that a serial collector is a default copying collector which uses only one GC thread for garbage collection while a parallel collector uses multiple GC threads for garbage collection."
    },
    {
      "ques": "  What is the size of an int variable in 32-bit and 64-bit JVM? ",
      "ans": "The size of int is same in both 32-bit and 64-bit JVM, it's always 32 bits or 4 bytes."
    },
    {
      "ques": " A difference between WeakReference and SoftReference in Java?",
      "ans": "Though both WeakReference and SoftReference helps garbage collector and memory efficient, WeakReference becomes eligible for garbage collection as soon as last strong reference is lost but SoftReference even thought it can not prevent GC, it can delay it until JVM absolutely need memory."
    },
    {
      "ques": " How do WeakHashMap works?  ",
      "ans": "WeakHashMap works like a normal HashMap but uses WeakReference for keys, which means if the key object doesn't have any reference then both key/value mapping will become eligible for garbage collection."
    },
    {
      "ques": " What is -XX:+UseCompressedOops JVM option? Why use it? ",
      "ans": "When you go migrate your Java application from 32-bit to 64-bit JVM, the heap requirement suddenly increases, almost double, due to increasing size of ordinary object pointer from 32 bit to 64 bit. This also adversely affect how much data you can keep in CPU cache, which is much smaller than memory. Since main motivation for moving to 64-bit JVM is to specify large heap size, you can save some memory by using compressed OOP. By using -XX:+UseCompressedOops, JVM uses 32-bit OOP instead of 64-bit OOP."
    },
    {
      "ques": " How do you find if JVM is 32-bit or 64-bit from Java Program?",
      "ans": "You can find that by checking some system properties like sun.arch.data.model or os.arch"
    },
    {
      "ques": "  What is the maximum heap size of 32-bit and 64-bit JVM? ",
      "ans": "Theoretically, the maximum heap memory you can assign to a 32-bit JVM is 2^32 which is 4GB but practically the limit is much smaller. It also varies between operating systems e.g. form 1.5GB in Windows to almost 3GB in Solaris. 64-bit JVM allows you to specify larger heap size, theoretically 2^64 which is quite large but practically you can specify heap space up to 100GBs. There are even JVM e.g. Azul where heap space of 1000 gigs is also possible."
    },
    {
      "ques": "What is the difference between JRE, JDK, JVM and JIT?",
      "ans": "JRE stands for Java run-time and it's required to run Java application. JDK stands for Java development kit and provides tools to develop Java program e.g. Java compiler. It also contains JRE. The JVM stands for Java virtual machine and it's the process responsible for running Java application. The JIT stands for Just In Time compilation and helps to boost the performance of Java application by converting Java byte code into native code when the crossed certain threshold i.e. mainly hot code is converted into native code."
    },
    {
      "ques": " Explain Java Heap space and Garbage collection? ",
      "ans": "When a Java process is started using java command, memory is allocated to it. Part of this memory is used to create heap space, which is used to allocate memory to objects whenever they are created in the program. Garbage collection is the process inside JVM which reclaims memory from dead objects for future allocation."
    },
    {
      "ques": "Can you guarantee the garbage collection process?",
      "ans": "No, you cannot guarantee the garbage collection, though you can make a request using System.gc() or Runtime.gc() method."
    },
    {
      "ques": "How do you find memory usage from Java program? How much percent of the heap is used? ",
      "ans": "You can use memory related methods from java.lang.Runtime class to get the free memory, total memory and maximum heap memory in Java.  By using these methods, you can find out how many percents of the heap is used and how much heap space is remaining. Runtime.freeMemory() return amount of free memory in bytes, Runtime.totalMemory() returns total memory in bytes and Runtime.maxMemory() returns maximum memory in bytes."
    },
    {
      "ques": "  What is the difference between stack and heap in Java? ",
      "ans": "Stack and heap are different memory areas in the JVM and they are used for different purposes. The stack is used to hold method frames and local variables while objects are always allocated memory from the heap. The stack is usually much smaller than heap memory and also didn't shared between multiple threads, but heap is shared among all threads in JVM."
    },
    {
      "ques": "What is a.hashCode() used for? How is it related to a.equals(b)? ",
      "ans": "hashCode() method returns an int hash value corresponding to an object. It's used in hash based collection classes e.g Hashtable, HashMap, LinkedHashMap and so on. It's very tightly related to equals() method. According to Java specification, two objects which are equal to each other using equals() method must have same hash code."
    },
    {
      "ques": "Difference between final, finalize and finally?",
      "ans": "The final is a modifier which you can apply to variable, methods and classes. If you make a variable final it means its value cannot be changed once initialized. finalize is a method, which is called just before an object is a garbage collected, giving it last chance to resurrect itself, but the call to finalize is not guaranteed. finally is a keyword which is used in exception handling along with try and catch. the finally block is always executed irrespective of whether an exception is thrown from try block or not."
    },
    {
      "ques": "What is a compile time constant in Java? What is the risk of using it? ",
      "ans": "public static final variables are also known as a compile time constant, the public is optional there. They are replaced with actual values at compile time because compiler know their value up-front and also knows that it cannot be changed during run-time. One of the problem with this is that if you happened to use a public static final variable from some in-house or third party library and their value changed later than your client will still be using old value even after you deploy a new version of JARs. To avoid that, make sure you compile your program when you upgrade dependency JAR files."
    },
    {
      "ques": " The difference between List, Set, Map, and Queue in Java? ",
      "ans": "The list is an ordered collection which allows duplicate. It also has an implementation which provides constant time index based access, but that is not guaranteed by List interface. Set is unordered collection which"
    },
    {
      "ques": " Difference between poll() and remove() method? ",
      "ans": "Both poll() and remove() take out the object from the Queue but if poll() fails then it returns null but if remove fails it throws Exception"
    },
    {
      "ques": " The difference between LinkedHashMap and PriorityQueue in Java?",
      "ans": "PriorityQueue guarantees that lowest or highest priority element always remain at the head of the queue, but LinkedHashMap maintains the order on which elements are inserted. When you iterate over a PriorityQueue, iterator doesn't guarantee any order but iterator of LinkedHashMap does guarantee the order on which elements are inserted."
    },
    {
      "ques": "  Difference between ArrayList and LinkedList in Java? ",
      "ans": "The obvious difference between them is that ArrrayList is backed by array data structure, supprots random access and LinkedList is backed by linked list data structure and doesn't supprot random access. Accessing an element with the index is O(1) in ArrayList but its O(n) in LinkedList. See the answer for more detailed discussion."
    },
    {
      "ques": " What is a couple of ways that you could sort a collection? ",
      "ans": "You can either use the Sorted collection like TreeSet or TreeMap or you can sort using the ordered collection like a list and using Collections.sort() method."
    },
    {
      "ques": " How do you print Array in Java? ",
      "ans": "You can print an array by using the Arrays.toString() and Arrays.deepToString() method. Since array doesn't implement toString() by itself, just passing an array to System.out.println() will not print its contents but Arrays.toString() will print each element."
    },
    {
      "ques": " LinkedList in Java is doubly or singly linked list?",
      "ans": "It's a doubly linked list, you can check the code in JDK. In Eclipse, you can use the shortcut, Ctrl + T to directly open this class in Editor."
    },
    {
      "ques": "  Which kind of tree is used to implement TreeMap in Java? ",
      "ans": "A Red Black tree is used to implement TreeMap in Java."
    },
    {
      "ques": "Is it possible for two unequal objects to have the same hashcode?",
      "ans": "Yes, two unequal objects can have same hashcode that's why collision happen in a hashmap.the equal hashcode contract only says that two equal objects must have the same hashcode it doesn't say anything about the unequal object."
    },
    {
      "ques": " Can two equal object have the different hash code? ",
      "ans": "No, thats not possible according to hash code contract."
    },
    {
      "ques": " Can we use random numbers in the hashcode() method? ",
      "ans": "No, because hashcode of an object should be always same. See the answer to learning more about things to remember while overriding hashCode() method in Java."
    },
    {
      "ques": "  What is the difference between Comparator and Comparable in Java? ",
      "ans": "The Comparable interface is used to define the  natural order of object while Comparator is used to define custom order. Comparable can be always one, but we can have multiple comparators to define customized order for objects."
    },
    {
      "ques": " Why you need to override hashcode, when you override equals in Java?",
      "ans": " Because equals have code contract mandates to override equals and hashcode together .since many container class like HashMap or HashSet depends on hashcode and equals contract."
    },
    {
      "ques": "  Does SimpleDateFormat is safe to use in the multi-threaded program? ",
      "ans": "No, unfortunately, DateFormat and all its implementations including SimpleDateFormat is not thread-safe, hence should not be used in the multi-threaded program until external thread-safety measures are applied e.g. confining SimpleDateFormat object into a ThreadLocal variable. If you don't do that, you will get an incorrect result while parsing or formatting dates in Java. Though, for all practical date time purpose, I highly recommend joda-time library."
    },
    {
      "ques": " How do you format a date in Java? e.g. in the ddMMyyyy format? ",
      "ans": "You can either use SimpleDateFormat class or joda-time library to format date in Java. DateFormat class allows you to format date on many popular formats. Please see the answer for code samples to format date into different formats e.g. dd-MM-yyyy or ddMMyyyy."
    },
    {
      "ques": "  What is the interface? Why you use it if you cannot write anything concrete on it? ",
      "ans": "The interface is used to define API. It tells about the contract your classes will follow. It also supports abstraction because a client can use interface method to leverage multiple implementations e.g. by using List interface you can take advantage of random access of ArrayList as well as flexible insertion and deletion of LinkedList. The interface doesn't allow you to write code to keep things abstract but from Java 8 you can declare static and default methods inside interface which are concrete."
    },
    {
      "ques": " The difference between abstract class and interface in Java?",
      "ans": "There are multiple differences between abstract class and interface in Java, but the most important one is Java's restriction on allowing a class to extend just one class but allows it to implement multiple interfaces. An abstract class is good to define default behavior for a family of class, but the interface is good to define Type which is later used to leverage Polymorphism. Please check the answer for a more thorough discussion of this question."
    },
    {
      "ques": " Which design pattern have you used in your production code? apart from Singleton? ",
      "ans": "This is something you can answer from your experience. You can generally say about dependency injection, factory pattern, decorator pattern or observer pattern, whichever you have used. Though be prepared to answer follow-up question based upon the pattern you choose."
    },
    {
      "ques": " Can you explain Liskov Substitution principle?  ",
      "ans": "This is one of the toughest questions I have asked in Java interviews. Out of 50 candidates, I have almost asked only 5 have managed to answer it. I am not posting an answer to this question as I like you to do some research, practice and spend some time to understand this confusing principle well."
    },
    {
      "ques": " What is Law of Demeter violation? Why it matters?",
      "ans": "Believe it or not, Java is all about application programming and structuring code. If  you have good knowledge of common coding best practices, patterns and what not to do than only you can write quality code.  Law of Demeter suggests you talk to friends and not stranger, hence used to reduce coupling between classes."
    },
    {
      "ques": " What is Adapter pattern? When to use it?",
      "ans": "Another frequently asked Java design pattern questions. It provides interface conversion. If your client is using some interface but you have something else, you can write an Adapter to bridge them together. This is good for Java software engineer having 2 to 3 years experience because the question is neither difficult nor tricky but requires knowledge of OOP design patterns."
    },
    {
      "ques": " WWhat is an abstract class? How is it different from an interface? Why would you use it?",
      "ans": "One more classic question from Programming Job interviews, it is as old as chuck Norris. An abstract class is a class which can have state, code and implementation, but an interface is a contract which is totally abstract. Since I have answered it many times, I am only giving you the gist here but you should read the article linked to answer to learn this useful concept in much more detail."
    },
    {
      "ques": " Which one is better constructor injection or setter dependency injection? ",
      "ans": "Each has their own advantage and disadvantage. Constructor injection guaranteed that class will be initialized with all its dependency, but setter injection provides flexibility to set an optional dependency. Setter injection is also more readable if you are using an XML file to describe dependency. Rule of thumb is to use constructor injection for mandatory dependency and use setter injection for optional dependency."
    },
    {
      "ques": "What is difference between dependency injection and factory design pattern? ",
      "ans": "Though both patterns help to take out object creation part from application logic, use of dependency injection results in cleaner code than factory pattern. By using dependency injection, your classes are nothing but POJO which only knows about dependency but doesn't care how they are acquired. In the case of factory pattern, the class also needs to know about factory to acquire dependency. hence, DI results in more testable classes than factory pattern. Please see the answer for a more detailed discussion on this topic."
    },
    {
      "ques": " Difference between Adapter and Decorator pattern? ",
      "ans": "Though the structure of Adapter and Decorator pattern is similar, the difference comes on the intent of each pattern. The adapter pattern is used to bridge the gap between two interfaces, but Decorator pattern is used to add new functionality into the class without the modifying existing code."
    },
    {
      "ques": "  Difference between Adapter and Proxy Pattern? ",
      "ans": "Similar to the previous question, the difference between Adapter and Proxy patterns is in their intent. Since both Adapter and Proxy pattern encapsulate the class which actually does the job, hence result in the same structure, but Adapter pattern is used for interface conversion while the Proxy pattern is used to add an extra level of indirection to support distribute, controlled or intelligent access."
    },
    {
      "ques": "  What is Template method pattern?",
      "ans": "Template pattern provides an outline of an algorithm and lets you configure or customize its steps. For examples, you can view a sorting algorithm as a template to sort object. It defines steps for sorting but let you configure how to compare them using Comparable or something similar in another language. The method which outlines the algorithms is also known as template method."
    },
    {
      "ques": " When do you use Visitor design pattern? ",
      "ans": "The visitor pattern is a solution of problem where you need to add operation on a class hierarchy but without touching them. This pattern uses double dispatch to add another level of indirection."
    },
    {
      "ques": " When do you use Composite design pattern?",
      "ans": "Composite design pattern arranges objects into tree structures to represent part-whole hierarchies. It allows clients treat individual objects and container of objects uniformly. Use Composite pattern when you want to represent part-whole hierarchies of objects."
    },
    {
      "ques": "  The difference between Inheritance and Composition? ",
      "ans": "Though both allows code reuse, Composition is more flexible than Inheritance because it allows you to switch to another implementation at run-time. Code written using Composition is also easier to test than code involving inheritance hierarchies."
    },
    {
      "ques": "Describe overloading and overriding in Java?",
      "ans": "Both overloading and overriding allow you to write two methods of different functionality but with the same name, but overloading is compile time activity while overriding is run-time activity. Though you can overload a method in the same class, but you can only override a method in child classes. Inheritance is necessary for overriding."
    },
    {
      "ques": " The difference between nested public static class and a top level class in Java? ",
      "ans": "You can have more than one nested public static class inside one class, but you can only have one top-level public class in a Java source file and its name must be same as the name of Java source file."
    },
    {
      "ques": "  Difference between Composition, Aggregation and Association in OOP? ",
      "ans": "If two objects are related to each other, they are said to be associated with each other. Composition and Aggregation are two forms of association in object-oriented programming. The composition is stronger association than Aggregation. In Composition, one object is OWNER of another object while in Aggregation one object is just USER of another object. If an object A is composed of object B then B doesn't exist if A ceased to exists, but if object A is just an aggregation of object B then B can exists even if A ceased to exist."
    },
    {
      "ques": " Give me an example of design pattern which is based upon open closed principle?",
      "ans": "This is one of the practical questions I ask experienced Java programmer. I expect them to know about OOP design principles as well as patterns. Open closed design principle asserts that your code should be open for extension but closed for modification. Which means if you want to add new functionality, you can add it easily using the new code but without touching already tried and tested code.  There are several design patterns which are based upon open closed design principle e.g. Strategy pattern if you need a new strategy, just implement the interface and configure, no need to modify core logic. One working example is Collections.sort() method which is based on Strategy pattern and follows the open-closed principle, you don't modify sort() method to sort a new object, what you do is just implement Comparator in your own way."
    },
    {
      "ques": "  Difference between Abstract factory and Prototype design pattern? ",
      "ans": "This is the practice question for you, If you are feeling bored just reading and itching to write something, why not write the answer to this question. I would love to see an example the, which should answer where you should use the Abstract factory pattern and where is the Prototype pattern is more suitable."
    },
    {
      "ques": "When do you use Flyweight pattern? ",
      "ans": "This is another popular question from the design pattern. Many Java developers with 4 to 6 years of experience know the definition but failed to give any concrete example. Since many of you might not have used this pattern, it's better to look examples from JDK. You are more likely have used them before and they are easy to remember as well. Flyweight pattern allows you to share object to support large numbers without actually creating too many objects. In order to use Flyweight pattern, you need to make your object Immutable so that they can be safely shared. String pool and pool of Integer and Long object in JDK are good examples of Flyweight pattern."
    },
    {
      "ques": " The difference between nested static class and top level class? ",
      "ans": "One of the fundamental questions from Java basics. I ask this question only to junior Java developers of 1 to 2 years of experience as it's too easy for an experience Java programmers. The answer is simple, a public top level class must have the same name as the name of the source file, there is no such requirement for nested static class. A nested class is always inside a top level class and you need to use the name of the top-level class to refer nested static class e.g. HashMap.Entry is a nested static class, where HashMap is a top level class and Entry is nested static class."
    },
    {
      "ques": "Can you write a regular expression to check if String is a number?",
      "ans": "If you are taking Java interviews then you should ask at least one question on the regular expression. This clearly differentiates an average programmer with a good programmer. Since one of the traits of a good developer is to know tools, regex is the best tool for searching something in the log file, preparing reports etc. Anyway, answer to this question is, a numeric String can only contain digits i.e. 0 to 9 and + and - sign that too at start of the String, by using this information you can write following regular expression to check if given String is number or not."
    },
    {
      "ques": "The difference between checked and unchecked Exception in Java? ",
      "ans": "checked exception is checked by the compiler at compile time. It's mandatory for a method to either handle the checked exception or declare them in their throws clause. These are the ones which are a sub class of Exception but doesn't descend from RuntimeException. The unchecked exception is the descendant of RuntimeException and not checked by the compiler at compile time. This question is now becoming less popular and you would only find this with interviews with small companies, both investment banks and startups are moved on from this question."
    },
    {
      "ques": " The difference between throw and throws in Java? ",
      "ans": "The throw is used to actually throw an instance of java.lang.Throwable class, which means you can throw both Error and Exception using throw keyword."
    },
    {
      "ques": " The difference between Serializable and Externalizable in Java? ",
      "ans": "This is one of the frequently asked questions from Java Serialization. The interviewer has been asking this question since the day Serialization was introduced in Java, but yet only a few good candidate can answer this question with some confidence and practical knowledge. Serializable interface is used to make Java classes serializable so that they can be transferred over network or their state can be saved on disk, but it leverages default serialization built-in JVM, which is expensive, fragile and not secure. Externalizable allows you to fully control the Serialization process, specify a custom binary format and add more security measure."
    },
    {
      "ques": "  The difference between DOM and SAX parser in Java? ",
      "ans": "Another common Java question but from XML parsing topic. It's rather simple to answer and that's why many interviewers prefers to ask this question on the telephonic round. DOM parser loads the whole XML into memory to create a tree based DOM model which helps it quickly locate nodes and make a change in the structure of XML while SAX parser is an event based parser and doesn't load the whole XML into memory. Due to this reason DOM is faster than SAX but require more memory and not suitable to parse large XML files."
    },
    {
      "ques": " Tell me 3 features introduced on JDK 1.7? ",
      "ans": "This is one of the good questions I ask to check whether the candidate is aware of recent development in Java technology space or not. Even though JDK 7 was not a big bang release like JDK 5 or JDK 8, it still has a lot of good feature to count on e.g. try-with-resource statements, which free you from closing streams and resources when you are done with that, Java automatically closes that. Fork-Join pool to implement something like the Map-reduce pattern in Java. Allowing String variable and literal into switch statements. Diamond operator for improved type inference, no need to declare generic type on the right-hand side of variable declaration anymore, results in more readable and succinct code. Another worth noting feature introduced was improved exception handling e.g. allowing you to catch multiple exceptions in the same catch block"
    },
    {
      "ques": "What is the difference between Maven and ANT in Java? ",
      "ans": "Another great question to check the all round knowledge of Java developers. It's easy to answer questions from core Java but when you ask about setting things up, building Java artifacts, many Java software engineer struggles. Coming back to the answer of this question, Though both are build tool and used to create Java application build, Maven is much more than that. It provides standard structure for Java project based upon convention over configuration concept and automatically manage dependencies (JAR files on which your application is dependent) for Java application. Please see the answer for more differences between Maven and ANT tool"
    },
    {
      "ques": "Which two method you need to implement for key Object in HashMap? ",
      "ans": "In order to use any object as Key in HashMap, it must implements equals and hashcode method in Java. Read How HashMap works in Java  for detailed explanation on how equals and hashcode method is used to put and get object from HashMap. "
    },
    {
      "ques": " What is the difference between creating String as new() and literal? ",
      "ans": " When we create string with new() Operator, it’s created in heap and not added into string pool while String created using literal are created in String pool itself which exists in PermGen area of heap.String s = new Stringdoes not  put the object in String pool , we need to call String.intern() method which is used to put  them into String pool explicitly. its only when you create String object as String literal e.g. String s = 'Test' Java automatically put that into String pool."
    },
    {
      "ques": " What is immutable object? Can you write immutable object?",
      "ans": "Immutable classes are Java classes whose objects can not be modified once created. Any modification in Immutable object result in new object. For example is String is immutable in Java. Mostly Immutable are also final in Java, in order to prevent sub class from overriding methods in Java which can compromise Immutability. You can achieve same functionality by making member as non final but private and not modifying them except in constructor."
    },
    {
      "ques": "What is difference between StringBuffer and StringBuilder in Java ? ",
      "ans": "Classic Java questions which some people thing tricky and some consider very easy. StringBuilder in Java is introduced in Java 5 and only difference between both of them is that Stringbuffer methods are synchronized while StringBuilder is non synchronized. See StringBuilder vs StringBuffer for more differences."
    },
    {
      "ques": " How do you handle error condition  while writing stored procedure or accessing stored procedure from java?",
      "ans": "his is one of the tough Java interview question and its open for all, my friend didn't know the answer so he didn't mind telling me. my take is that stored procedure should return error code if some operation fails but if stored procedure itself fail than catching SQLException is only choice"
    },
    {
      "ques": " What is difference between Executor.submit() and Executer.execute() method ? ",
      "ans": "There is a difference when looking at exception handling. If your tasks throws an exception and if it was submitted with execute this exception will go to the uncaught exception handler (when you don't have provided one explicitly, the default one will just print the stack trace to System.err). If you submitted the task with submit any thrown exception, checked exception or not, is then part of the task's return status. For a task that was submitted with submit and that terminates with an exception, the Future.get will re-throw this exception, wrapped in an ExecutionException."
    },
    {
      "ques": "  What is the difference between factory and abstract factory pattern? ",
      "ans": "Abstract Factory provides one more level of abstraction. Consider different factories each extended from an Abstract Factory and responsible for creation of different hierarchies of objects based on the type of factory. E.g. AbstractFactory extended by AutomobileFactory, UserFactory, RoleFactory etc. Each individual factory would be responsible for creation of objects in that genre."
    },
    {
      "ques": "  Can you write critical section code for singleton? ",
      "ans": " This core Java question is followup of previous question and expecting candidate to write Java singleton using double checked locking. Remember to use volatile variable to make Singleton thread-safe."
    },
    {
      "ques": " Can you write code for iterating over hashmap in Java 4 and Java 5 ? ",
      "ans": "Tricky one but he managed to write using while and for loop."
    },
    {
      "ques": "  When do you override hashcode and equals() ",
      "ans": "Whenever necessary especially if you want to do equality check or want to use your object as key in HashMap."
    },
    {
      "ques": " What will be the problem if you don't override hashcode() method ? ",
      "ans": "You will not be able to recover your object from hash Map if that is used as key in HashMap."
    },
    {
      "ques": "Is it better to synchronize critical section of getInstance() method or whole getInstance() method ?",
      "ans": "Answer is critical section because if we lock whole method than every time some one call this method will have to wait even though we are not creating any object)"
    },
    {
      "ques": "  What is the difference when String is gets created using literal or new() operator ?",
      "ans": "When we create string with new() its created in heap and not added into string pool while String created using literal are created in String pool itself which exists in Perm area of heap."
    },
    {
      "ques": "  Does not overriding hashcode() method has any performance implication ?",
      "ans": "This is a good question and open to all , as per my knowledge a poor hashcode function will result in frequent collision in HashMap which eventually increase time for adding an object into Hash Map."
    },
    {
      "ques": " What’s wrong using HashMap in multithreaded environment? When get() method go to infinite loop ? ",
      "ans": "His answer was during concurrent access and re-sizing."
    },
    {
      "ques": " What will happen if you call return statement or System.exit on try or catch block ? will finally block execute?",
      "ans": " This is a very popular tricky Java question and its tricky because many programmer think that finally block always executed. This question challenge that concept by putting return statement in try or catch block or calling System.exit from try or catch block. Answer of this tricky question in Java is that finally block will execute even if you put return statement in try block or catch block but finally block won't run if you call System.exit form try or catch."
    },
    {
      "ques": " Can you override private or static method in Java ? ",
      "ans": "Another popular Java tricky question, As I said method overriding is a good topic to ask trick questions in Java.  Anyway, you can not override private or static method in Java, if you create similar method with same return type and same method arguments that's called method hiding. "
    },
    {
      "ques": "  What will happen if we put a key object in a HashMap which is already there ?",
      "ans": "This tricky Java questions is part of How HashMap works in Java, which is also a popular topic to create confusing and tricky question in Java. well if you put the same key again than it will replace the old mapping because HashMap doesn't allow duplicate keys. "
    },
    {
      "ques": " If a method throws NullPointerException in super class, can we override it with a method which throws RuntimeException? ",
      "ans": " One more tricky Java questions from overloading and overriding concept. Answer is you can very well throw super class of RuntimeException in overridden method but you can not do same if its checked Exception"
    },
    {
      "ques": " How do you ensure that N thread can access N resources without deadlock",
      "ans": " If you are not well versed in writing multi-threading code then this is real tricky question for you. This Java question can be tricky even for experienced and senior programmer, who are not really exposed to deadlock and race conditions. Key point here is order, if you acquire resources in a particular order and release resources in reverse order you can prevent deadlock. "
    },
    {
      "ques": "What is difference between CyclicBarrier and CountDownLatch in Java ",
      "ans": "Relatively newer Java tricky question, only been introduced form Java 5. Main difference between both of them is that you can reuse CyclicBarrier even if Barrier is broken but you can not reuse CountDownLatch in Java. See CyclicBarrier vs CountDownLatch in Java for more differences."
    },
    {
      "ques": "Can you access non static variable in static context?",
      "ans": "Another tricky Java question from Java fundamentals. No you can not access static variable in non static context in Java. Read why you can not access non-static variable from static method to learn more about this tricky"
    }
   
  ],
  "fresherresume": [
    {
      "freshresume": "JavaFresherResume1",
      "freshtit": "Entry Level"
    },
    {
      "freshresume": "JavaFresherResume2",
      "freshtit": "Junior Level"
    },
    {
      "freshresume": "JavaFresherResume3",
      "freshtit": "Smart"
    },
    {
      "freshresume": "JavaFresherResume4",
      "freshtit": "Cool"
    },
    {
      "freshresume": "JavaFresherResume5",
      "freshtit": "Profession"
    }

  ],
  "experienceresume": [
    {
      "expresume": "Java1PlusResume",
      "exprestit": "1+ experience"
    },
    {
      "expresume": "Java2PlusResume",
      "exprestit": "2+ experience"
    },
    {
      "expresume": "Java3PlusResume",
      "exprestit": "3+ experience"
    }
  ],
  "definitions": [

	 {
      "ques": "java Technology",
      "ans": "Technology is the practical application of knowledge so that something entirely new can be done, or so that something can be done in a completely new way.   So it is the way of solving problems through the application of knowledge from multiple disciplines.\n1.Java technology is object oriented platform independent multithreaded programming environment.\n2.Object oriented programming environment means that support the following concept.\n\n1. Class\n2. Object\n3.Encapsulation\n4. Inheritance\n5. Polymorphism\n6. Abstraction\n7. Message passing\n8. Dynamic Binding"
    },

	{
      "ques": "Java history",
      "ans": "1.James gosling “ sun Microsystems created java in 1991\n2.But released in 1996\n3.Original name of java is oak. But there was a programming language already with the name oak, so Mr. James Gosling and his team decided to change the programming language name to java."
    },

	{
      "ques": "Java features",
      "ans": "Java is the language that has become most successful and popular because of the following features.\n\n 1.Platform Independent:\nThe java programs compiled on one operating system can be transferred and executed on any Operating System without modifications. This can be achieved through an application called “Java Virtual Machine” or simply JVM.\nOnce we create the java source code, we compile it using Java Compiler. The compiler then creates something called Java Byte code. This byte code can be copied and executed anywhere i.e., even in mobile phones also. Thus, Java is also called “Architecture Neutral” Language.\n2.Object-Oriented:\n Java is the only Language that is a pure object-oriented. That is, every concept of OOP is supported by Java. Also, it is noted that even the main () function should be defined under a class.\n3.Compiled and Interpreted:\nJava is a language which provides both compilation and interpretation of programs. Once java program is created, it is compiled by Java Compiler. This compiled code (Byte code) can be executed by using Java Interpreter.\nMulti-Threaded:\nUsing this feature, Java supports “Multitasking”. Multitasking is the concept of executing multiple jobs simultaneously. Multitasking improves the CPU and Main Memory Utilization.\n5. Dynamic:\nThis is also one of the important features that made Java popular. Assume that in a program, we created 100 functions. In no case, all the functions are executed. But, in languages like C, whether required or not, all the functions are loaded into memory which result in wastage of memory.\nBut, in Java, until you call a function, it is not loaded into memory. The functions are loaded only when they are called (i.e. at run-time).\n6.Simple, small and familiar:\n Java program are easy to build and implement when compared to languages like ‘C’ and ‘C++’ because most of the concepts in these languages which people felt difficult and confusing are eliminated in Java. Also, the concepts in C and C++ which programmers felt comfortable are included in Java.\n Java program are easy to build and implement when compared to languages like ‘C’ and ‘C++’ because most of the concepts in these languages which people felt difficult and confusing are eliminated in Java. Also, the concepts in C and C++ which programmers felt comfortable are included in Java.\n7.Robust and Secure:\nAs a robust Language, Java provides many safeguards to ensure reliable code. It also provides exception handling concept to handle logical errors that makes a system to crash.\nAs a secured Language, Java ensures that programs cannot gain access to memory locations without proper authorization.\n8. Distributed:\nJava is Distributed Language for creating networking applications. It has the ability to share both data and programs.\nJava applications provide mechanisms to open and access objects remotely.\n9.High Performance:\nJava architecture is designed to reduce overheads during run-time. Also, the concept of multithreading in Java increases the execution speed of Java Programs."
    },

	{
      "ques": "Tokens in Java",
      "ans": "A token is the smallest individual element used to create a program statement. Java supports the following types of tokens "
    },


	{
      "ques":"1)Reserved Words:",
      "ans":"They are also called keywords which are having some special purpose and meaning. These words are to be used for that purpose only."
    },


	{
      "ques":"2)Identifiers:",
      "ans":"They are also called 'user-defined words'.These are names for program elements like variables,constants, functions, interfaces, packages, abstract classes, classes and objects.\n\nTo create an identifier, we have to follow the following rules.\n1. First letter should be alphabet.\n2. All alphabets (A-Z, a-z), digits (0-9) are allowed.\n4. Spaces are not allowed.\n5. Reserved words are not allowed."
    },


	{
      "ques":"3)Java Literals:",
      "ans":"Literals are also called constants. A constant is a value that does not change during program execution."
    },


	{
      "ques": "4)Operators:",
      "ans":"An operator is a special symbol used in expressions. Java supports the following set of operators\n\n1.Arithmetic Operators:\nThese operators are used for Arithmetic operations. These operators include:      +,-,*,/,%\n\n2.Relational Operators: \nThey are also called ' Comparison operators' because they are used to compare two values. These include: ==, !=,>,>=,<,<=.\n\n3. Logical Operators:\nThey are also called 'Boolean operators' because they return either 'true' or 'false' values. They include:\nLogical AND (&&) -> this operator returns 'true' if all the conditions are 'true'. Otherwise, it returns 'false'.\nLogical OR (||) -> this operator returns 'true' if at least one condition is 'true'. It returns 'false' if all the conditions are 'false'.\nLogical NOT (!) -> This operator reverses the value of a condition. i.e., it returns 'true' if the condition is ‘false’, and returns 'false', if the condition is 'true'.\n\n4.Unary operators :\nThese operators are used on 'single' operands.:\n1.Unary plus (+)2.Unary minus (-)3.Increment (++) 4.Decrement (--).\n\n5.Assignment operator :\nThis operator is used to store a value into a variable. The syntax of assignment is:variable = value | variable | expression\n\n6. Conditional Operator (?, :):\nThis is also called 'Ternary operator' because this operator is used on 3 operands\n\n7.Bitwise Operators :\nLike C and C++, Java supports a set of Bitwise operators to manipulate bits.\n\n8.Special Operators:\ndot (.) :- This operator is used in accessing class members through reference.\nnew: Dynamic memory allocation.\ninstanceof:= This operator returns ‘true’ if an object is instance of a class. Otherwise, it returns ‘false’. Its syntax is :\nobject  instanceof   class-name."
    },


	{
      "ques":"5)Special Symbols:",
      "ans":"a) Comments:\n Comments in a program can be used for documentation purpose and user understanding. Java supports the following comment symbols.\n C -> /* .... */ -> Block comments\n C++ ->  //.....  -> Line comments\n Java -> /** …. */ ->Block Comments\n\nb) Separators:\nComma -> value-separator, Semi-colon -> End of statement\n\nc) White Space characters:\n-> Blank space, tab space, enter key.\n\nd) Brackets:\n{ } -> represent blocks, used for array initialization\n( ) -> represent functions, conditions\n[ ] -> arrays"
    },


	{
      "ques":"JAVA VARIABLE: ",
      "ans":"Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.\nBased on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables."
    },


	{
      "ques":"A class can contain any of the following variable types.",
      "ans":"Local variables:\nvariables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and the variable will be destroyed when the method has completed.\n\nInstance variables:\nInstance variables are variables within a class but outside any method. These variables are instantiated when the class is loaded. Instance variables can be accessed from inside any method, constructor or blocks of that particular class.\n\nClass variables:\nClass variables are variables declared with in a class, outside any method, with the static keyword."
    },


	{
      "ques":"Source file declaration rules:",
      "ans":"lets us now look into the source file declaration rules. These rules are essential when declaring classes, import statements and package statements in a source file.\n1.There can be only one public class per source file.\n2.A source file can have multiple non public classes.\n3.The public class name should be the name of the source file as well which should be appended by .java at the end. For example : The class name is . public class Employee{} Then the source file should be as Employee.java.\n4.If the class is defined inside a package, then the package statement should be the first statement in the source file.\n5.If import statements are present then they must be written between the package statement and the class declaration. If there are no package statements then the import statement should be the first line in the source file.\n6.Import and package statements will imply to all the classes present in the source file. It is not possible to declare different import and/or package statements to different classes in the source file."
    },


	 {
      "ques":"Java statement",
      "ans":"In java if a fully qualified name, which includes the package and the class name, is given then the compiler can easily locate the source code or classes. Import statement is a way of giving the proper location for the compiler to find that particular class.\nExample:import java.io.*;"
    },

	{
      "ques":"data members:",
      "ans":"1. Static data member:static - stationary, standing, not moving\n\nstatic data member:\n1.Static data member is a data member declared with a static data modifier.\n2.Static data members are created inside class memory (static memory).\n3.Static data members is not created for every object it is created only once in class memory and shared by all objects.\n\ntypes of static members\n1. static variables\n2. static blocks\n3. static methods\n4. main method\n\nexecution order of all static variables\nstatic variable is a class level variable which is declared by using static keyword. All the static variables are executed by jvm in the order they are defined from top to botttom.\n\nNote: All static variables are having individual memory locations.\n\n\n2.non - static data member\n1.Non Static data member is a data member declared without a static data modifier.\nNon Static data members are created inside object memory\nNon static data members are created for every object.\n\ntypes of Non Static members\n1. Non static variables\n2. Non static blocks\n3. Non static methods\n4. constructors"
    },

	{
      "ques":"Methods In Java",
      "ans":"1.In C language a big program can be divided into small modules called as functions.\n2.Where as in java a big program can be divided into small modules called as classes.\n3.In java class contain “data members” and “methods”.\n4.Data members are used to hold the and methods are used to perform operations on the data defined in the class.\n\nmethod:\nMethods - A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.\n\nGeneral Structure of a class:\nclass Bank{\nint accno;\nfloat bal;\nvoid saving(){\n}\nVoid deposit(){\n}\nVoid loan(){\n }\n}"
    },

	{
      "ques":"DATA TYPES",
      "ans":"Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.\nBased on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables."
    },


	{
      "ques":"There are two data types available in Java: ",
      "ans":"1. Primitive Data Types\nThere are eight primitive data types supported by Java. Primitive data types are predefined by the language and named by a key word. Let us now look into detail about the eight primitive data types.\n\nbyte:\n1.Byte data type is a 8-bit signed two.s complement integer.\n2.Minimum value is -128 (-2^7)\n3.Maximum value is 127 (inclusive)(2^7 -1)\n4.Default value is 0\n	Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an int.\nExample : byte a = 100 , byte b = -50.\n\nshort:\n1.Short data type is a 16-bit signed two's complement integer. \n2.Minimum value is -32,768 (-2^15)\n3.Maximum value is 32,767(inclusive) (2^15 -1)\n4.Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an int\n5.Default value is 0.\n6.Example : short s= 10000 , short r = -20000\n\nint:\n1.Int data type is a 32-bit signed two's complement integer.\n2.Minimum value is - 2,147,483,648.(-2^31)\n3.Maximum value is 2,147,483,647(inclusive).(2^31 -1)\n4.Int is generally used as the default data type for integral values unless there is a concern about memory.\n5.The default value is 0.\n6.Example : int a = 100000, int b = -200000\n\nlong:\n1.Long data type is a 64-bit signed two's complement integer.\n2.Minimum value is -9,223,372,036,854,775,808.(-2^63)\n3.Maximum value is 9,223,372,036,854,775,807 (inclusive). (2^63 -1)\n4.This type is used when a wider range than int is needed.\n5.Default value is 0L.\n6.Example : int a = 100000L, int b = -200000L\n\nfloat:\n1.Float data type is a single-precision 32-bit IEEE 754 floating point.\n2.Float is mainly used to save memory in large arrays of floating point numbers.\n3.Default value is 0.0f.\n4.Float data type is never used for precise values such as currency.\nExample : float f1 = 234.5f\n\ndouble:\n1.double data type is a double-precision 64-bit IEEE 754 floating point.	\n2.This data type is generally used as the default data type for decimal values. generally the default choice.\n3.Double data type should never be used for precise values such as currency.\n4.Default value is 0.0d.\n5.Example : double d1 = 123.4\n\nboolean:\n1.boolean data type represents one bit of information.\n2.There are only two possible values : true and false.\n3.This data type is used for simple flags that track true/false conditions.\n4.Default value is false.\n5.Example : boolean one = true.\n\nchar:\n1.char data type is a single 16-bit Unicode character.\n2.Minimum value is '\u0000' (or 0).\n3.Maximum value is '\uffff' (or 65,535 inclusive).\n4.Char data type is used to store any character.\n5.Example . char letterA ='A'"
    },


	{
      "ques":"Reference Data Types",
      "ans":"1.Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy, Ramesh etc.\n2.Class objects, and various type of array variables come under reference data type.\n3.Default value of any reference variable is null.\n4.A reference variable can be used to refer to any object of the declared type or any compatible type.\n5.Example : Animal animal = new Animal('giraffe');"
    },


	{
      "ques":"Arrays in Java",
      "ans": "An array is defined as a collection of values of similar data type. It is a group of contiguous or related data items that share a common name. Java language supports two types of arrays namely: Single-dimensional (1-D) and Multi-dimensional (2-D) arrays."
    },


	{
      "ques":"One-Dimensional arrays:",
      "ans":"1.In these types of arrays, in each location of the array, we can store only one value. The syntax for declaring an array is:\nType array-name [];    (or) type [] array-name;\n2.Once the array is declared, we need to create it in the memory. Java allows us to create arrays using ‘new’ operator as shown below.\n Array-name = new type [size];"
    },


	{
      "ques":"Two-Dimensional arrays (2-D)",
      "ans":"1.The arrays that we discussed above are called one-dimensional arrays because in each location of the array, we can store exactly one value. But, I some cases, under each position of the array, we need to store multiple values.Such arrays are called tow-dimensional or 2-D arrays. That is, every position of the array is again an array.\n2.Tables and matrices are the best examples for 2-D arrays. The syntax for creating a 2-D array is as follows :\ntype array-name[][];\narray-name = new type[row][column];\nFor example, int a[][];\n3.a = new int[5][5]; That is, ‘a’ is a two-dimensional array variable that can store a max. of 5 row values.In each row, we can store a max. of 5 column values.Totally under ‘a’, we can store 5 * 5 = 25 values."
    },


	{
      "ques":"STRINGS",
      "ans":"1.Strings represent a group of characters. In C or C++ strings are character arrays. is null character. It is end of string.\n2.In java strings are not character arrays. Strings are string class object in object. A string is an object of string class. Any string is an object of string class in java."
    },


	{
      "ques":"Types of objects:",
      "ans":"1) Mutable:\nMutable objects are the objects whose contents can be modified.\n\n2) Immutable:\nImmutable objects are those objects whose contents can not be modified."
    },


	{
      "ques":"String methods:",
      "ans":"1) String concat (String str):Concat means method. A method can for form a task .Concatenates the caning string with str.\nNote:+will also do the same\n Concat is a method it joins two strings. When you call concat pass a string object to it.\n\n2) int length ( ):  returns the length of a string.\n\n3) char charAt(int  index):\n\n Returns the character at the specified location (from 0).\n\n4) int compare to (string Str):   Returns a negative value, if the calling Sting comes before str in dictionary order, a +ve value,  if the String comes after str, or 0, if the String are equal.\n\n5) boolean equals(String str):   Returns true if the calling string equals str. Equals is case sensitive method.\n\n6) boolean equalsIgnoreCase(String str):   Sane as above. This is case insensitive method.\n\n7) boolean startsWith(String prefix):   Returns true if the calling string starts with prefix. Prefix means the string starting with beginning.\n\n8) boolean endsWith(String suffix):   Returns true if the invoking string ends with suffix. Suffix means the string ending with beginning.\n\n Note:Above 2 methods use case sensitive comparison.\n\n9) int indexOf(String str):Returns the first occurrence of str in the string.\n\n10) int lastIndexOf(String str):   Returns the last occurrence of str in the string.\nNote:   Both the above methods return –ve value, if str not found in the calling string. Counting starts from 0.\n\n11) String replace(char oldChar,char newChar):   Returns a new string. That is obtained by replacing characters old char in the string with new char.\n\n12) String substring(int beginIndex):   Return a new string consisting of all characters from begin index until the end of the string.\n\n13) String substring(int beginIndex,int endIndex):   Returns  a new string consisting of all characters from begin index until end index(exclusive). Last character is exclusive.\n\n14) String toLowerCase( ):  Converts all characters into lower case.\n\n15) String toUpperCase( ):   Converts all characters into upper case.\n\n16) String trim( ):   Eliminates all leading & trailing spaces. \nTrim means deleting or cutting. Trim method doesn’t remove in the middle spaces. It’s only remove first spaces & last spaces. Last space is removing, it is trail method."
    },

	 {
      "ques":"Constructors in Java:",
      "ans": "1.Constructor is a special method that gets invoked “automatically” at the time of object creation.\n2.Constructor is normally used for initializing objects with default values unless different values are supplied.\n3.Constructor cannot return values.\n4.A class can have more than one constructor as long as they have different signature (i.e., different input arguments syntax).\n5.If you not write any constructor in class, java compiler automatically creates one constructor called default constructor.\n\nApart from the default constructor, we can create our own constructors also. A constructor can be defined with or without parameters but a constructor should not have any return types. Also, a constructor can have any number of parameters."
    },

	{
      "ques":"Rules for Java Constructor:",
      "ans": "1. Constructors can use any access modifier, including private.(A private constructor means only code within the class itself can instantiate an object of that type, so if the private constructor class wants to allow an instance of the class to be used, the class must provide a static method or variable that allows access to an instance created from within the class.)\n2. The constructor name must match the name of the class.\n3. Constructors must not have a return type.\n4. It’s legal (but stupid) to have a method with the same name as the class, but that doesn’t make it a constructor. If you see a return type, it’s a method rather than a constructor. In fact, you could have both a method and a constructor with the same name the name of the class in the same class, and that’s not a problem for Java. Be careful not to mistake a method for a constructor, be sure to look for a return type.\n5. If you don’t type a constructor into your class code, a default constructor will be automatically generated by the compiler.\n6. The default constructor is ALWAYS a no-argument constructor.\n7. Every constructor has, as its first statement, either a call to an overloaded constructor (this()) or a call to the super class constructor (super()), although remember that this call can be inserted by the compiler.\n8. A call to super () can be either a no-arg call or can include arguments passed to the super constructor.\n9. A no-argument constructor is not necessarily the default (i.e., compiler-supplied) constructor, although the default constructor is always a no-argument constructor. The default constructor is the one the compiler provides! While the default constructor is always a no-argument constructor, you’re free to put in your own no argument constructor.\n10. You cannot make a call to an instance method, or access an instance variable, until after the super constructor runs.\n11. Only static variables and methods can be accessed as part of the call to super() or this(). (Example: super (Animal.NAME) is OK, because NAME is declared as a static variable.)\n12. Abstract classes have constructors, and those constructors are always called when a concrete subclass is instantiated.\n13. Interfaces do not have constructors. Interfaces are not part of an object’s inheritance tree.\n14. The only way a constructor can be invoked is from within another constructor."
    },

	{
      "ques":"POLYMORPHISM",
      "ans": "1.t is the concept of defining multiple methods with the same name, but with different functionalities. The methods defined are called ‘Overloaded methods’ and the concept is called ‘method overloading’. Note that, Java language does not support ‘Operator Overloading’.\n2.The difference between the overloaded methods lies in the number or types of parameters that it takes. But, the return types of all overloaded methods must be same.\nThe following program illustrates Polymorphism."
    },

	{
      "ques":"Rules for Function Overloading:",
      "ans":"1.overloading can take place in the same class or in the subclass\n2.overloaded methods MUST have a different argument list\n3.overloaded methods MAY change the return type (in case argument list is different).\n4.overloaded methods MAY change the access modifier\n5.overloaded methods MAY throw new or broader checked excpetions\n6.reference type determines which overloaded method will be used at compile time\n7.constructors MAY be overloaded"
    },


	{
      "ques":"Polymorphism is implemented in Java Language in two ways.",
      "ans":"1.Static Polymorphism:\nHere, if we have multiple functions with same name in a class, we can know which function will gets executed when a function is called. 'Function Overloading' is an example for ‘Static’ or ‘Compile-time’ polymorphism\nBut in some cases until we run the program which method statements are executed is not known. Such type of polymorphism is called ‘Dynamic’ or ‘Run-time’ Polymorphism. Dynamic Polymorphism is implemented through ‘Method Overriding’.\n\nNOTE : println() is an example for overloaded methods which can accept any type of data and prints on the console.\n\n2) Dynamic polymorphism:The polymorphism exhibited at run time is called dynamic polymorphism. In this dynamic polymorphism a method call is linked with method body at the time of running the program by JVM. This is also known as dynamic binding or run time polymorphism."
    },


	{
      "ques":"Inheritance in Java:",
      "ans":"Inheritance can be defined as the process where one object acquires the properties of another. With the use of inheritance the information is made manageable in a hierarchical order.\n\nInheritance is the property that a class gets the properties of another class. The class which gets the properties is called ‘Super class’ or ‘Base class’ and the class which provides the properties is called ‘Sub class’ or ‘Derived Class’. Reusability and Extensibility are the major advantages of Inheritance. \n\nWhen we talk about inheritance the most commonly used keyword would be extends and implements. These words would determine whether one object IS-A type of another. By using these keywords we can make one object acquire the properties of another object."
    },


	{
      "ques":"Types of Inheritance:",
      "ans":"Java Supports 3 types of Inheritance.\n1)Single Inheritance [single base, single derived].\n2)Multi-level Inheritance [A derived class derived by another derived class].\n3)Hierarchical Inheritance [Single base, multiple derived].\n\nNote: Java does not support the concepts of Multiple and Hybrid Inheritance."
    },


	{
      "ques":"sub-class object is created",
      "ans":"While creating the object of sub-class, the JVM checks whether the class is extending any class or it. If extending, it first creates the object of super class and then the sub-class object is created. That means: “Sub-class objects are created only after super class objects area created”.\n\nNOTE: The super-most class of any Java class is the “java.lang.Object” class."
    },


	{
      "ques":"super keyword in Java:",
      "ans":"Java language a keyword called ‘super’ which can be used for 2 purposes.\n\n1) To call the constructor of super class from sub-class constructor.\n2) To call the members of super class from sub-class members.	`"
    },


	{
      "ques":"1) Dynamic polymorphism:",
      "ans": "The polymorphism exhibited at run time is called dynamic polymorphism. In this dynamic polymorphism a method call is linked with method body at the time of running the program by JVM. This is also known as dynamic binding or run time polymorphism."
    },


	{
      "ques":"Method over loading:",
      "ans":"Writing 2 or more methods with the same name, but with a difference in the method signatures is called method over loading.\nIn method over loading JVM understand in the method is called depending upon the difference in the method signature.\n\nThe difference may be due to the following.\n1) There is a difference in the no. of parameters.\nvoid add(int a,int b)\nvoid add(int a,int b,int c)\n2) There is a difference in the data types of parameters.\nvoid add(int a,float b)\nvoid add(double a,double b)\n3) There is a difference in the sequence of parameters.\nvoid swap(int a,char b)\nvoid swap(char a,int b)\n\nAny one of the above differences will make method signature to be different, hence JVM can identifies methods uniquely. "
    },


	{
      "ques":"Rules for overriding the methods:",
      "ans": "1. applies ONLY to inherited methods\n2. is related to polymorphism\n3. object type (NOT reference variable type) determines which overriden method will be used at runtime\n4. overriding method MUST have the same argument list (if not, it might be a case of overloading)\n5. overriding method MUST have the same return type; the exception is covariant return (used as of Java 5) which returns a type that is a subclass of what is returned by the overriden method\n6. overriding method MUST NOT throw new or broader checked exceptions, but MAY throw fewer or narrower checked exceptions or any unchecked exceptions\n7. abstract methods MUST be overridden\n8. final methods CANNOT be overridden\n9. static methods CANNOT be overridden\n10. constructors CANNOT be overridden"
    },

 {
      "ques":"Method overriding: ",
      "ans":"writing 2 or more methods in super & sub classes with same name & same signatures is called method overriding. In method overriding JVM executes a method depending on the data type of the object.\nAchieving method overloading & method overriding using instance methods is an example of dynamic polymorphism.\nAchieving method overloading & method overriding using instance methods is an example of dynamic polymorphism."
    },

	{
      "ques":"2) Static polymorphism: ",
      "ans":" The polymorphism exhibited at compile time is called Static polymorphism. Here the compiler knows which method is called at the compilation. This is also called compile time polymorphism or static binding.\nAchieving method overloading & method overriding using\n1) private 2) static 3) final methods, is an example of Static polymorphism.\n\nNote:   A final method is a method written in a final class. A class is declared as a final is called final class."
    },

	{
      "ques":"generalization & specialization",
      "ans":"A)  Moving back from sub class to super class is called generalization. Casting a sub class type into a super class is called a up casting or widening.\nComing down from super class to sub class is called specialization. Casting a super class type into sub class type is called narrowing or down casting.\nIn widening we can access super class methods. In widening we can access sub class methods. In widening, we can not access sub class methods unless the override super class methods."
    },

	{
      "ques":"widening & narrowing",
      "ans":"A) Widening:   Casting a lower data type into a higher data type is called widening. In widening no digits or precision are lost. Casting a sub class type into a super class is called an up casting or widening. In widening we can access super class methods. In widening we can access sub class methods. In widening us can not access sub class methods unless the override super class methods.\n\n Narrowing: Converting a higher data type into lower type is called narrowing. In narrowing precision or digits are lost. This is called explicit casting. Casting a super class type into sub class type is called narrowing or down casting. Narrowing using super class object can not access either super class methods or sub class methods. Narrowing using sub class object will make the programmer to access are the members of super class as well as sub class."
    },


	{
      "ques":"INTERFACES",
      "ans":"Interfaces are the structures in Java using which “Dynamic Binding” is implemented. An interface is similar to a class except that every method inside a class is provided bodies while no method of an interface must be defined with bodies. That’s why classes are called ‘Fully implemented Structures’ while the interfaces are called ‘Fully unimplemented Structures”.\n\nNote:\n1) 'implements' keyword does not mean 'Inheritance' because 'implements' means providing properties while 'extends' means getting the properties.\n2) For an interface, we can create reference. But, we cannot create object. Because, to create reference, .class file is required, but to create object class is required\n3) To the reference of an interface, we can assign object of a class which is implementing that interface. Through this reference, we can call the methods of the interface only but not of the implementing class. The following program illustrates this concept:"
    },


	{
      "ques":"Abstract Classes in Java:",
      "ans":"1.The third type of structures supported by Java Language is an abstract class which is called a partially-implemented and partially-unimplemented structure.\n2.The main difference between a class and an abstract class is that in a class, all methods will have implementations while in an abstract class, some methods are implemented and some are unimplemented. The unimplemented methods of abstract classes are called 'abstract methods' and must be declared ‘abstract’.\n3.This class is defined with a keyword called 'abstract' and may contain both variables and methods like a class. The unimplemented methods of an abstract class will be provided bodies by a class which extends it.\n\nNote: Like interfaces, we cannot create object of a class directly. The class which extends the abstract class, through its object only we can call abstract class members"
    },


	{
      "ques":"abstract class:",
      "ans":"1) Abstract class can contain static data members and non static data members.\n2) Abstract class can contain static methods and non static methods\n3) Abstract class can contain abstract methods and normal methods\n4) Abstract class can contain constructors\n5) Abstract class constructors are called by sub class constructors.\n6) Abstract class can extend another normal classes or abstract classes\n7) Abstract class can implement other interfaces\n8) An abstract class cannot be declared as final class\n9) An abstract method cannot be declared as final method\n10) An abstract method cannot be declared as private method"
    },


	{
      "ques":"Interface & Abstract Class",
      "ans":"1. Abstract classes may have some executable methods and methods left unimplemented. Interface contains no implementation code.\n2. An abstract class can have nonabstract methods. All methods of an Interface are abstract.\n 3. An abstract class can have instance variables. An Interface cannot.\n4. An abstract class can define constructor. An Interface cannot.\n5. An abstract class can have any visibility: public, private, protected. An Interface visibility must be public (or) none."
    },


	{
      "ques":"Exception Handling:",
      "ans":"Exception Handling is the procedure of making the Exception class object not reaching the JVM. Java language supports a number of classes each to represent a separate logical error. The super most classes of all exceptions is the “Throwable class” to which there are two sub-classes : Exception and Error classes. All the exception classes are the sub-classes of Exception class.\n\nTo handle exceptions, Java defined two keywords: try and catch blocks. The statements that are proven to generate exceptions must be defined in the try block. When an exception is raised, that exception class object must be handled in the corresponding catch block.\n\nNOTE: A single try block may generate multiple exceptions. Hence, to handle each Exception-type, we have to define separate catch blocks. It is important to note that a try block can have multiple catch blocks. But, a catch block must associate only one try block"
    },


	{
      "ques":"“throws” keyword :",
      "ans":"Generally if a function is defined to generate an exception, we have to handle the exception in that function only. Suppose assume that a function does not wants to handle exceptions inside it. Then, they can pass the exception class objects to the functions which call them. This can be done by using a special keyword called “throws”. If a function is defined to throw an exception, then the calling function must handle that exception inside it.\n\nThe following program demonstrates the use of “throws” keyword.\n\n the above program, fun1() is defined to throw ArithmeticException. Hence, main() method is handling it within its try-catch block. If main() method also doesn’t want to handle that exception, we can define “throws” with main(). Then that object is passed to JVM and the program is terminated abnormally."
    },


	{
      "ques":"Checked and Unchecked Exceptions :",
      "ans":"Any Exception class that does not extends java.lang.RunTimeException is referred as “Checked Exceptions”. Checked Exceptions cannot be handled in a program so we have to use “throws” keyword with them.\nAny Exception class that extends java.lang.RunTimeException is referred as “Unchecked Exceptions”. Unchecked Exceptions must be handled in try-catch blocks and must not be defined with “throws” keyword”."
    },


	{
      "ques":"Creating user-defined Exceptions :",
      "ans":"User–defined exceptions are created in the form of classes that extend java.lang.Exception class.The following program demonstrates user-defined exceptions.\n\n/* Consider a Banking System. The customers while maintaining the accounts must open some Minimum Balance(say Rs.500).  In this Example, we create an Exception called InvBalExcepti	on whose object is thrown when a user violates Minimum Balance rule */"
    },

	 {
      "ques":"PACKAGES",
      "ans":"Packages are used in Java in-order to prevent naming conflicts, to control access, to make searching/locating and usage of classes, interfaces, enumerations and annotations easier etc.\n\nA Package can be defined as a grouping of related types providing access protection and name space management. Note that types refer to classes, interfaces, enumerations, and annotation…etc. Enumerations and annotation types are special kinds of classes and interfaces, respectively."
    },

	{
      "ques":"Some of the existing packages in Java are:",
      "ans":"1.java.lang - bundles the fundamental classes\n2.java.io - classes for input , output functions are bundled in this package\nProgrammers can define their own packages to bundle group of classes/interfaces etc. It is a good practice to group related classes implemented by you so that a programmers can easily determine that the classes, interfaces, enumerations, annotations are related.\nSince the package creates a new namespace there won't be any name conflicts with names in other packages. Using packages, it is easier to provide access control and it is also easier to locate the related classes."
    },

	{
      "ques":"Creating a package:",
      "ans":"When creating a package, you should choose a name for the package and put a package statement with that name at the top of every source file that contains the classes, interfaces, enumerations, and annotation types that you want to include in the package.\n\nThe package statement should be the first line in the source file. There can be only one package statement in each source file, and it applies to all types in the file. \n\nIf a package statement is not used then the class, interfaces, enumerations, and annotation types will be put into an unnamed package.\n\nExample: Let us look at an example that creates a package called animals. It is common practice to use lowercased names of packages to avoid any conflicts with the names of classes, interfaces.\n\nNote: If you put multiple types in a single source file, only one can be public, and it must have the same name as the source file. For example, you can define public class Circle in the file Circle.java, define public interface Drag gable in the file Draggable.java, define public enum Day in the file Day.java, and so forth."
    },

	{
      "ques":"Naming Conventions:",
      "ans":"Package names are written in all lowercase to avoid conflict with the names of classes or interfaces.\n\nCompanies use their reversed Internet domain name to begin their package names for example, com.example.asr for a package named asr created by a programmer at example.com.\n\nName collisions that occur within a single company need to be handled by convention within that company, perhaps by including the region or the project name after the company name (for example, com.company.region.package).\n\nPackages in the Java language itself begin with java. or javax.\n\nIn some cases, the internet domain name may not be a valid package name. This can occur if the domain name contains a hyphen or other special character, if the package name begins with a digit or other character that is illegal to use as the beginning of a Java name, or if the package name contains a reserved Java keyword, such as 'int'. In this event, the suggested convention is to add an underscore. For example: "
    },


	{
      "ques":"Multitasking",
      "ans":"Multitasking allow to execute more than one tasks at the same time, a task being a program. In multitasking only one CPU is involved but it can switches from one program to another program so quickly that's why it gives the appearance of executing all of the programs at the same time. Multitasking allow processes (i.e. programs) to run concurrently on the program. For Example running the spreadsheet program and you are working with word processor also. Multitasking is running heavyweight processes by a single OS."
    },


	{
      "ques":"Multithreading:",
      "ans":"Multithreading is a technique that allows a program or a process to execute many tasks concurrently (at the same time and parallel). It allows a process to run its tasks in parallel mode on a single processor system\n\nIn the multithreading concept, several multiple lightweight processes are run in a single process/task or program by a single processor. For Example, when you use a word processor you perform a many different tasks such as printing, spell checking and so on. Multithreaded software treats each process as a separate program.\n\nIn Java, the Java Virtual Machine (JVM) allows an application to have multiple threads of execution running concurrently. It allows a program to be more responsible to the user. When a program contains multiple threads then the CPU can switch between the two threads to execute them at the same time."
    },


	{
      "ques":"Advantages of multithreading over multitasking:  ",
      "ans":"1.Reduces the computation time.\n2.Improves performance of an application.\n3.Threads share the same address space so it saves the memory.\n4.Context switching between threads is usually less expensive than between processes. \n4.Cost of communication between threads is relatively low."
    },


	{
      "ques":"Life Cycle methods of a Thread:",
      "ans":"Once the object of a thread class is created, it will be in the “new born” state. To make a Thread class object to execute, we have to call the start () method which executes the     run () method of that class. Once the thread class starts execution, it will be in “Running or Active” thread.\n\nAn active thread, due to several reasons may be moved into “blocked” or “idle” state. If we want to make a thread for a finite amount of time, we have to call sleep () method. With this method we have to specify the amount of time in milliseconds (1000 milliseconds=1 second). After the time expires, the thread will automatically move to “Running state”\n\nAssume that a thread is utilizing most of the system resources without releasing them. In this stage, we can block the thread for a indefinite amount of time using suspend() method. A suspended thread can then be moved to active state by calling resume() method.\n\nIn some cases, A Thread may need to wait for an event to occur. In such a case, we can keep the thread in waiting state using wait () method. A waiting thread can then be moved into active state using notify () method.\n\nAlong with the above methods, Thread class supports some more methods like join(), yield() etc.\n\nNOTE:1.The wait () and notify () methods of a Thread can only be called by the methods which are defined with the keywords “synchronized”.\n\nLike creation of a single thread, You can also create more than one thread (multithreads) in a program using class Thread or implementing interface Runnable.."
    },


	{
      "ques":"Controlling the execution of Threads:",
      "ans":"Controlling thread execution implies deciding which thread is to be executed when. Generally, if not specified, execution of threads depends on the scheduling of CPU. Also, we can manually specify the sequence of execution of threads.\n\nThread Controlling involves:\n\n1) Controlling sequence of execution of execution of threads.\n\n2) Irrespective of Quantum value, we can execute a set of statements when required i.e., we can control which part of a thread should be executed irrespective of CPU scheduling even when the time slice expires.\n\nIn context of Thread control, we can use the following methods:"
    },


	{
      "ques":"1) Suspending a thread based on Time:",
      "ans":"o suspend the execution of a thread based on time, we can use the static method of Thread class, sleep() which suspends a thread for a specific amount of time.This method can be used as follows:\nThread.sleep(n); where n ->milliseconds\n\nBut, sleep() method is defined to throw checked exception and so should be defined in try-catch block.The following program demonstrates this concept.\n\n2) Suspending a thread until the execution of another thread:For this purpose, we can use a non-static method called join() which makes a thread wait until another thread completes its execution.\n\n3) Suspending the execution of a thread unconditionally:\nTo suspend an executing thread without any condition, we can use a non-static method of Thread class called suspend () and a suspended thread can be restarted using resume() method. \nBut, the above two functions are deprecated because they are proven to create deadlocks.\nFor the same purpose, we can use wait() and notify() methods which does not lead to deadlock. These methods belong to Object class and not thread class. These methods are only used in the methods which are defined as synchronized."
    },


	{
      "ques":"Thread Priorities:",
      "ans":"In Java, thread scheduler can use the thread priorities in the form of integer value to each of its thread to determine the execution schedule of threads. Thread gets the ready-to-run state according to their priorities. The thread scheduler provides the CPU time to thread of highest priority during ready-to-run state."
    },


	{
      "ques":"Thread Scheduler:",
      "ans":"In the implementation of threading scheduler usually applies one of the two following strategies:\n\nPreemptive scheduling: If the new thread has a higher priority, then current running thread leaves the runnable state and higher priority thread enter to the runnablestate.\nTime-Sliced (Round-Robin) Scheduling: A running thread is allowed to be execute for the fixed time, after completion the time, current thread indicates to the another thread to enter it in the runnable state."
    },

	 {
      "ques":"Deadlock:",
      "ans":"A situation where a thread is waiting for an object lock that holds by second thread and this second thread is waiting for an object lock that holds by first thread, this situation is known as Deadlock."
    },

	{
      "ques":"Runnable interface:",
      "ans":"In multithreading, we can create a thread class either by extending java.lang.Thread class or by implementing Runnable interface\n\nThe class to be created as a Thread, if it not extending any class, we have to define the class to extend “java.lang.Thread” class. If that class is already extending some class, then it could not extend java.lang.Thread class because this creates Multiple Inheritance. So, for this class , it should implement Runnable interface."
    },

	{
      "ques":"Inter-Thread Communication",
      "ans":"Java provides a very efficient way through which multiple-threads can communicate with each-other. This way reduces the CPU’s idle time i.e. A process where, a thread is paused running in its critical region and another thread is allowed to enter (or lock) in the same critical section to be executed.  This technique is known as Inter thread communication"
    },

	{
      "ques":"Daemon Threads:",
      "ans":"In Java, any thread can be a Daemon thread. Daemon threads are like a service providers for other threads or objects running in the same process as the daemon thread. Daemon threads are used for background supporting tasks and are only needed while normal threads are executing. If normal threads are not running and remaining threads are daemon threads then the interpreter exits."
    },


	{
      "ques":"Streams in Java",
      "ans":"A stream is a flow of data between two devices. Any data passed between two devices of a computer will be in the form of streams. To represent streams, java language supports a package called “java.io”\n\n1. Any Stream class that ends with the word “Stream” is a Byte-Oriented class and any class that ends either with the words “Reader” or “Writer” is a Character-Oriented class.\n2.The purpose of streams is to transfer data from one place to another. InputStream classes mention the address of the Input device (i.e., source) and OutputStream classes mention the address of the Output device (i.e., destination).\n3.For Example, in the statement, System.out.println(), “out” is the reference of the PrintStream class which contains the address of destination output device i.e., monitor. Using println() method, we can transfer data anywhere, i.e., console devices or files or programs on other systems.\n4.But, we cannot directly create the object of PrintStream class because the constructor of it needs to access arguments of output stream. To receive or send data, we need the address of source or destination. Addresses are represented in the form of objects. In order to represent address of destination, we use output stream class. Using Input stream class, we represent the address of source. "
    },


	{
      "ques":"Reading data from console (or anywhere): ",
      "ans": "hough there are many methods available for inputting data, it is better to use String class objects to read input. For Example, readLine() is a method that reads data from resource whose address is specified. It is a non-static method defined in both Byte and Character-Oriented classes and return-type is String. Using this method, we can read both character and byte oriented data.\n\nNOTE: The constructor of BufferedReader class does not accept object of InputStream class.Instead, it accepts the object of InputStreamReader class. The constructor of the InputStreamReader class is defined to accept the object of InputStream class."
    },


	{
      "ques": " File Handling in Java:",
      "ans": "A file is the name of memory location where we can store data permanently under computer’s hard disk. Java language supports a set of classes in java.io package to create and maintain files.\n\nThe following are some of the classes we can use to create and maintain files :\n1.FileInputStream:\nThis clas represents data as a stream of bytes. The objects of this class can be used to open and access a file in read mode. The object for this class can be created as below :\nFileInputStream fis = new FileInputStream(“file-name”);\n\n2.FileOutputStream:his class represent data as a stream of bytes. The objects of this class can be used to open and access a file in write mode. The object for this class can be created as below :\n FileOutputStream fis = new FileOutputStream(“file-name”,boolean-value);\nHere, if the boolean value is true, the file can be opened in append mode. If it is false,the data is overwritten from the beginning of the file every time when we execute the program.The following program demonstrates the use of this class.\n\n3.FileReader:\nThis class represent data as a stream of characters. The objects of this class can be used to open and access a file in read mode. The object for this class can be created as below :\nFileReader fr = new FileReader(filename);\n\n4.FileWriter:\nThis class represent data as a stream of characters. The objects of this class can be used to open and access a file in write mode. The object for this class can be created as below :\nFileWriter  fw = new FileWriter(filename,boolean-value);\n5.RandomAccessFile:\n Now-a-days, every business data is represented in the form of databases. So, there is no need for creating files using programming languages like C,C++,or Java. But, RandomAccessFile concept can be used when we need to migrate data available in a file which is developed some years back, into a table(or database). \n\n NOTE: The problem of using the above stream classes to create files is that FileOutputStream class stores data as an array of bytes while FileWriter class stores data as an array of characters.\nBut, in most real-time applications files are used to store data as a set of records. That is, assume an Employee data file. This file needs to store emp_id as integer, name as string, basic as float etc., But, the above classes are not used to represent data in the form of their corresponding data types. To overcome this problem, we can use RandomAccessFile which represents data as its equalent Primitive data types."
    },


	{
      "ques":"COLLECTIONS FRAMEWORK",
      "ans":"Java provides the Collections Framework. In the Collection Framework, a collection represents the group of the objects. And a collection framework is the unified architecture that represent and manipulate collections. The collection framework provides a standard common programming interface to many of the most common abstraction without burdening the programmer with many procedures and interfaces. It provides a system for organizing and handling collections. This framework is based \n1.Interfaces that categorize common collection types.\n2.Classes which proves implementations of the Interfaces.\n3.Algorithms which proves data and behaviors need when using collections i.e. search, sort, iterate etc. "
    },


	{
      "ques":"Advantage of the Collections Framework: ",
      "ans":"The collections framework offers developers the following benefits:\n1.It increases the readability of your collections by providing a standard set of interfaces which has to be used by many programmers in different applications.\n2.It makes your code more flexible. You can make the code flexible by using many interfaces and classes of the collection framework.\n3.It offers many specific implementations of the interfaces. It allows you to choose the collection that is most fitting and which offers the highest performance for your purposes. \n\nInterfaces of the collections framework are very easy to use. These interfaces can be transparently substituted to increase the developed application performance.\n\nCollection Iterate Example\nIn this section, you will get the detailed explanation about the hasNext() method of interface Iterator. We are going to use hasNext() method of interface Iterator in Java. The description of the code is given below for the usage of the method."
    },


	{
      "ques":"Description of the code:",
      "ans": "Here, you will get to know about the hasNext() method through the following java program. True is return by this method in case the iteration has more elements. This means that if the iteration has more elements then the hasNext() method will return true rather than throwing an exception. \n\nIn the program code given below, we have taken a string of elements. We have converted this string of elements into a list of array and then we have applied the hasNext() method which returns true because there are more elements in the list. Hence we get the following output."
    },


	{
      "ques":"Java Next()",
      "ans": "In this section, you will get the detailed explanation about the next() method of interface Iterator. We are going to use next() method of interface Iterator in Java. The description of the code is given below for the usage of the method."
    },


	{
      "ques":"Description of the code:",
      "ans": "Here, you will get to know about the next() method through the following java program. This method returns next element in the iteration in case the iteration has more than one element. This means that if the iteration has more than one element then the next() method will return the next element. However, if no more element exist then it throws\n\nNoSuchElementException\nIn the program code given below, we have taken a string of elements. We have converted this string of elements into a list of array and then we have applied the hasNext() method first which will check if there is another element or not and if there exist another element then it will return that (next element) with the help of next() method. Hence we get the following output."
    }, {
      "ques":"Java remove() ",
      "ans": "In this section, you will get the detailed explanation about the remove() method of interface Iterator. We are going to use remove() method of interface Iterator in Java. The description of the code is given below for the usage of the method."
    },

	{
      "ques":"Description of the code:",
      "ans": "Here, you will get to know about the remove() method through the following java program. This method removes the last element returned by the iterator (optional operation) from the collection. As per every call to next, this method can only be called once. However, the iteration will continue other than by calling this method. This method will throw UnsupportedOperationException if the iterator doesn't support the remove operation and will throw IllegalStateException if after the last call to the next method, the remove method has already been called.\n\nIn the program code given below, we have taken a list of array that contains 0- 10 elements. Then with the help of hasNext() method we will get next elements as output. And to remove any element from the loop, we have applied remove() method which will remove that element which gives 0 remainder in this iteration. Hence we get the following output."
    },

	{
      "ques":"Java nextElement()",
      "ans": "In this section, you will get the detailed explanation about the nextElement() method of interface Enumeration. We are going to use nextElement() method of interface Enumeration in Java. The description of the code is given below for the usage of the method."
    },

	{
      "ques":"Description of the code:",
      "ans":"Here, you will get to know about the nextElement() method through the following java program. This method returns next element of the enumeration in case the enumeration has more than one element. This means that if the enumeration has more than one element then the nextElement() method will return the next element. However, if no more element exist then it throws NoSuchElementException.\n\nn the program code given below, we have taken a Vector of string type. Then we have applied the hasMoreElement() method which will check for the next element and if it will find the next element then it will return that with the help of nextElement() method. "
    },


	{
      "ques": "Converting Collection to an Array ",
      "ans": "Here is the illustration for the conversion from the collection to an array. In this section, you will learn how to do this. The given example gives you a brief introduction for convert collection to an array without losing any data or element present in the collection.\nThis program creates a List. List is a type of collection that contains a ordered list of elements. This list (collection) is converted into an array. Length of the created array is defined by the system according to the number of elements in the list. Each and every subscripts hold separate element."
    },


	{
      "ques":"wrapper classes",
      "ans": "Wrapper class:    All wrapper classes are defined in java.long package.\n A wrapper class wraps contains a primitive data type in its object.\n\n 1) Character class: The character class wraps a value of the primitive type ‘char’ an object. An object of type character contains a single field whose type is char.\n2) Byte class:   The byte class wraps a value of primitive type ‘byte’ in an object. An object of type byte contains a single field whose type is byte.\n3) Integer Class:   The integer class wraps a value of the primitive type ‘int’ in a object. An object of type integer contains a single field\n4) Float class:   The float class wraps a value of primitive type ‘float’ in an object. An object of type float contains a single field\n5) double class:   The double class wraps a value of primitive type ‘double’ in an object. An object of type float contains a single field "
    },


    {
      "ques": "About Java",
      "ans": "Java is a high-level programming language originally developed by Sun Microsystems and released in 1995. Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX."
    },
    {
      "ques": "supported platforms by Java Programming Language",
      "ans": "Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX/Linux like HP-Unix, Sun Solaris, Redhat Linux, Ubuntu, CentOS, etc."
    },
    {
      "ques": "features of Java",
      "ans": "Some features include Object Oriented, Platform Independent, Robust, Interpreted, Multi-threaded"
    },
    {
      "ques": "Java Architectural Neutral",
      "ans": "It’s compiler generates an architecture-neutral object file format, which makes the compiled code to be executable on many processors, with the presence of Java runtime system."
    },
    {
      "ques": "Java enabled High Performance",
      "ans": "Java uses Just-In-Time compiler to enable high performance. Just-In-Time compiler is a program that turns Java bytecode, which is a program that contains instructions that must be interpreted into instructions that can be sent directly to the processor."
    },
    {
      "ques": "Java is considered dynamic?",
      "ans": "It is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time."
    },
    {
      "ques": " Java Virtual Machine and how it is considered in context of Java’s platform independent feature",
      "ans": "When Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by virtual Machine (JVM) on whichever platform it is being run."
    },
    {
      "ques": "two Java IDE’s",
      "ans": "Netbeans, Eclipse, etc."
    },
    {
      "ques": "Java keywords(unlike C, C++ keywords)",
      "ans": "Some Java keywords are import, super, finally, etc."
    },
    {
      "ques": " Object",
      "ans": "Object is a runtime entity and it’s state is stored in fields and behavior is shown via methods. Methods operate on an object's internal state and serve as the primary mechanism for object-to-object communication."
    },
    {
      "ques": "class",
      "ans": "A class is a blue print from which individual objects are created. A class can contain fields and methods to describe the behavior of an object."
    },
    {
      "ques": "kind of variables a class",
      "ans": "A class consist of Local variable, instance variables and class variables."
    },
    {
      "ques": "Local Variable",
      "ans": "Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and it will be destroyed when the method has completed."
    },
    {
      "ques": "Instance Variable",
      "ans": "Instance variables are variables within a class but outside any method. These variables are instantiated when the class is loaded."
    },
    {
      "ques": "Class Variable",
      "ans": "These are variables declared with in a class, outside any method, with the static keyword."
    },
    {
      "ques": "Singleton class",
      "ans": "Singleton class control object creation, limiting the number to one but allowing the flexibility to create more objects if the situation changes."
    },
    {
      "ques": "Constructor",
      "ans": " Constructor gets invoked when a new object is created. Every class has a constructor. If we do not explicitly write a constructor for a class the java compiler builds a default constructor for that class."
    },
    {
      "ques": "three steps for creating an Object for a class",
      "ans": "An Object is first declared, then instantiated and then it is initialized."
    },
    {
      "ques": "default value of byte datatype in Java",
      "ans": "Default value of byte datatype is 0."
    },
    {
      "ques": "default value of float and double datatype in Java",
      "ans": "Default value of float and double datatype in different as compared to C/C++. For float its 0.0f and for double it’s 0.0d"
    },
    {
      "ques": "byte datatype",
      "ans": "This data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an int.	"
    },
    {
      "ques": "static variable",
      "ans": "Class variables also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block."
    },
    {
      "ques": "Access Modifier",
      "ans": "Java provides access modifiers to set access levels for classes, variables, methods and constructors. A member has package or default accessibility when no accessibility modifier is specified."
    },
    {
      "ques": "protected access modifier",
      "ans": "Variables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members' class."
    },
    {
      "ques": "synchronized Non Access Modifier",
      "ans": "Java provides these modifiers for providing functionalities other than Access Modifiers, synchronized used to indicate that a method can be accessed by only one thread at a time."
    },
    {
      "ques": " According to Java Operator precedence, which operator is considered to be with highest precedence",
      "ans": "Postfix operators i.e () [] . is at the highest precedence."
    },
    {
      "ques": "Variables used in a switch statement",
      "ans": "Variables used in a switch statement can only be a string, enum, byte, short, int, or char."
    },
    {
      "ques": "parseInt() method can be used",
      "ans": "This method is used to get the primitive data type of a certain String."
    },
    {
      "ques": " String class considered immutable",
      "ans": "The String class is immutable, so that once it is created a String object cannot be changed. Since String is immutable it can safely be shared between many threads ,which is considered very important for multithreaded programming."
    },
    {
      "ques": "StringBuffer called mutable",
      "ans": "The String class is considered as immutable, so that once it is created a String object cannot be changed. If there is a necessity to make alot of modifications to Strings of characters then StringBuffer should be used."
    },
    {
      "ques": "difference between StringBuffer and StringBuilder class",
      "ans": "Use StringBuilder whenever possible because it is faster than StringBuffer. But, if thread safety is necessary then use StringBuffer objects."
    },
    {
      "ques": "package is used for pattern matching with regular expressions",
      "ans": "java.util.regex package is used for this purpose."
    },
    {
      "ques": "java.util.regex consists of classes",
      "ans": "java.util.regex consists of three classes − Pattern class, Matcher class and PatternSyntaxException class.	"
    },
    {
      "ques": "finalize() method",
      "ans": "Professional"
    },
    {
      "ques": "Exception",
      "ans": "An exception is a problem that arises during the execution of a program. Exceptions are caught by handlers positioned along the thread's method invocation stack."
    },
    {
      "ques": "Checked Exceptions",
      "ans": "It is an exception that is typically a user error or a problem that cannot be foreseen by the programmer. For example, if a file is to be opened, but the file cannot be found, an exception occurs. These exceptions cannot simply be ignored at the time of compilation."
    },
    {
      "ques": "Runtime Exceptions",
      "ans": "It is an exception that occurs that probably could have been avoided by the programmer. As opposed to checked exceptions, runtime exceptions are ignored at the time of compliation."
    },
    {
      "ques": "two subclasses under Exception class",
      "ans": "The Exception class has two main subclasses : IOException class and RuntimeException Class."
    },
    {
      "ques": "throws keyword",
      "ans": "If a method does not handle a checked exception, the method must declare it using the throwskeyword. The throws keyword appears at the end of a method's signature."
    },

    {
      "ques": "under Exception Handling",
      "ans": "The finally keyword is used to create a block of code that follows a try block. A finally block of code always executes, whether or not an exception has occurred."
    },
    {
      "ques": "things should be kept in mind while creating your own exceptions in Java",
      "ans": "All exceptions must be a child of Throwable.If you want to write a checked exception that is automatically enforced by the Handle or Declare Rule, you need to extend the Exception class.You want to write a runtime exception, you need to extend the RuntimeException class."
    },
    {
      "ques": "Inheritance",
      "ans": "It is the process where one object acquires the properties of another. With the use of inheritance the information is made manageable in a hierarchical order."
    },
    {
      "ques": "super keyword",
      "ans": "If the method overrides one of its superclass's methods, overridden method can be invoked through the use of the keyword super. It can be also used to refer to a hidden field."
    },
    {
      "ques": "Polymorphism",
      "ans": "Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object."
    },
    {
      "ques": "Abstraction",
      "ans": "It refers to the ability to make a class abstract in OOP. It helps to reduce the complexity and also improves the maintainability of the system.	"
    },
    {
      "ques": "Abstract class",
      "ans": "These classes cannot be instantiated and are either partially implemented or not at all implemented. This class contains one or more abstract methods which are simply method declarations without a body."
    },
    {
      "ques": "Abstract methods",
      "ans": "If you want a class to contain a particular method but you want the actual implementation of that method to be determined by child classes, you can declare the method in the parent class as abstract."
    },

    {
      "ques": "primary benefit of Encapsulation",
      "ans": "The main benefit of encapsulation is the ability to modify our implemented code without breaking the code of others who use our code. With this Encapsulation gives maintainability, flexibility and extensibility to our code."
    },
    {
      "ques": "Interface",
      "ans": "An interface is a collection of abstract methods. A class implements an interface, thereby inheriting the abstract methods of the interface."
    },
    {
      "ques": "features of Interface",
      "ans": " Interface cannot be instantiated.An interface does not contain any constructors. All of the methods in an interface are abstract."
    },
    {
      "ques": "Packages in Java",
      "ans": "A Package can be defined as a grouping of related types(classes, interfaces, enumerations and annotations ) providing access protection and name space management."
    },
    {
      "ques": "Multithreaded program",
      "ans": "A multithreaded program contains two or more parts that can run concurrently. Each part of such a program is called a thread, and each thread defines a separate path of execution."
    },
    {
      "ques": "two ways in which Thread can be created",
      "ans": "Thread can be created by: implementing Runnable interface, extending the Thread class."
    },
    {
      "ques": "an applet",
      "ans": "An applet is a Java program that runs in a Web browser. An applet can be a fully functional Java application because it has the entire Java API at its disposal."
    },
    {
      "ques": " An applet extend class",
      "ans": "An applet extends java.applet.Applet class."
    },
    {
      "ques": "garbage collection in Java",
      "ans": "It uses garbage collection to free the memory. By cleaning those objects that is no longer reference by any of the program."
    },
    {
      "ques": "immutable object",
      "ans": "An immutable object can’t be changed once it is created."
    },
    {
      "ques": "usage of this() with constructors",
      "ans": "It is used with variables or methods and used to call constructer of same class."
    },
    {
      "ques": "Set Interface",
      "ans": "It is a collection of element which cannot contain duplicate elements. The Set interface contains only methods inherited from Collection and adds the restriction that duplicate elements are prohibited."
    },
    {
      "ques": "TreeSet",
      "ans": "It is a Set implemented when we want elements in a sorted order."
    },
    {
      "ques": "Comparable Interface",
      "ans": "It is used to sort collections and arrays of objects using the collections.sort() and java.utils. The objects of the class implementing the Comparable interface can be ordered."
    },
    {
      "ques": " Difference between throw and throws",
      "ans": " Throw is used to trigger an exception where as throws is used in declaration of exception.Without throws, Checked exception cannot be handled where as checked exception can be propagated with throws."
    },
    {
      "ques": "JRE i.e. Java Runtime Environment",
      "ans": "Java Runtime Environment is an implementation of the Java Virtual Machine which executes Java programs. It provides the minimum requirements for executing a Java application;"
    },
    {
      "ques": "JAR file",
      "ans": "JAR files is Java Archive fles and it aggregates many files into one. It holds Java classes in a library. JAR files are built on ZIP file format and have .jar file extension."
    },
    {
      "ques": "WAR file",
      "ans": "This is Web Archive File and used to store XML, java classes, and JavaServer pages. which is used to distribute a collection of JavaServer Pages, Java Servlets, Java classes, XML files, static Web pages etc."
    },
    {
      "ques": "JIT compiler",
      "ans": "It improves the runtime performance of computer programs based on bytecode."
    },
    {
      "ques": "difference between object oriented programming language and object based programming language",
      "ans": "Object based programming languages follow all the features of OOPs except Inheritance. JavaScript is an example of object based programming languages."
    },
    {
      "ques": "purpose of default constructor",
      "ans": "The java compiler creates a default constructor only if there is no constructor in the class."
    },
    {
      "ques": " Can a constructor be made final",
      "ans": "No, this is not possible."
    },
    {
      "ques": "static block",
      "ans": "It is used to initialize the static data member, It is excuted before main method at the time of classloading."
    },
    {
      "ques": "composition",
      "ans": "Holding the reference of the other class within some other class is known as composition."
    },
    {
      "ques": "function overloading",
      "ans": "If a class has multiple functions by same name but different parameters, it is known as Method Overloading."
    },
    {
      "ques": "function overriding",
      "ans": "If a subclass provides a specific implementation of a method that is already provided by its parent class, it is known as Method Overriding."
    },
    {
      "ques": " Difference between Overloading and Overriding",
      "ans": "Method overloading increases the readability of the program. Method overriding provides the specific implementation of the method that is already provided by its super class parameter must be different in case of overloading, parameter must be same in case of overriding."
    },
    {
      "ques": "final class",
      "ans": "Final classes are created so the methods implemented by that class cannot be overridden. It can’t be inherited.	"
    },
    {
      "ques": "NullPointerException",
      "ans": "A NullPointerException is thrown when calling the instance method of a null object, accessing or modifying the field of a null object etc."
    },
    {
      "ques": "ways in which a thread can enter the waiting state",
      "ans": "A thread can enter the waiting state by invoking its sleep() method, by blocking on IO, by unsuccessfully attempting to acquire an object's lock, or by invoking an object's wait() method. It can also enter the waiting state by invoking its (deprecated) suspend() method."
    },
    {
      "ques": "multi-threading take place on a computer with a single CPU",
      "ans": "The operating system's task scheduler allocates execution time to multiple tasks. By quickly switching between executing tasks, it creates the impression that tasks execute sequentially."
    },
    {
      "ques": " What invokes a thread's run() method",
      "ans": "After a thread is started, via its start() method of the Thread class, the JVM invokes the thread's run() method when the thread is initially executed."
    },

    {
      "ques": "difference between yielding and sleeping",
      "ans": "When a task invokes its yield() method, it returns to the ready state. When a task invokes its sleep() method, it returns to the waiting state."
    },
    {
      "ques": "Vector class",
      "ans": "The Vector class provides the capability to implement a growable array of objects. Vector proves to be very useful if you don't know the size of the array in advance, or you just need one that can change sizes over the lifetime of a program."
    },
    {
      "ques": " bits are used to represent Unicode, ASCII, UTF-16, and UTF-8 characters",
      "ans": "Unicode requires 16 bits and ASCII require 7 bits. Although the ASCII character set uses only 7 bits, it is usually represented as 8 bits. UTF-8 represents characters using 8, 16, and 18 bit patterns. UTF-16 uses 16-bit and larger bit patterns."
    },
    {
      "ques": "Wrapper classes",
      "ans": "These are classes that allow primitive types to be accessed as objects. Example: Integer, Character, Double, Boolean etc."
    },
    {
      "ques": "difference between a Window and a Frame",
      "ans": "The Frame class extends Window to define a main application window that can have a menu bar."
    },
    {
      "ques": "package has light weight components",
      "ans": "javax.Swing package. All components in Swing, except JApplet, JDialog, JFrame and JWindow are lightweight components."
    },
    {
      "ques": "difference between the paint() and repaint() methods",
      "ans": "The paint() method supports painting via a Graphics object. The repaint() method is used to cause paint() to be invoked by the AWT painting thread."
    },
    {
      "ques": "purpose of File class",
      "ans": "It is used to create objects that provide access to the files and directories of a local file system."
    },
    {
      "ques": "difference between the Reader/Writer class hierarchy and the InputStream/OutputStream class hierarchy",
      "ans": "The Reader/Writer class hierarchy is character-oriented, and the InputStream/OutputStream class hierarchy is byte-oriented."
    },
    {
      "ques": "class should use to obtain design information about an object",
      "ans": "The Class class is used to obtain information about an object's design and java.lang.Class class instance represent classes, interfaces in a running Java application."
    },
    {
      "ques": "difference between static and non-static variables",
      "ans": "A static variable is associated with the class as a whole rather than with specific instances of a class. Non-static variables take on unique values with each object instance."
    },
    {
      "ques": "Serialization and deserialization",
      "ans": "Serialization is the process of writing the state of an object to a byte stream. Deserialization is the process of restoring these objects."
    },
    {
      "ques": "use cases",
      "ans": "It is part of the analysis of a program and describes a situation that a program might encounter and what behavior the program should exhibit in that circumstance."
    },
    {
      "ques": "use of sublass in a Java program",
      "ans": "Sub class inherits all the public and protected methods and the implementation. It also inherits all the default modifier methods and their implementation."
    },
    {
      "ques": "add menushortcut to menu item",
      "ans": "If there is a button instance called b1, you may add menu short cut by calling b1.setMnemonic('F'), so the user may be able to use Alt+F to click the button."
    },
    {
      "ques": "write a Java class that could be used both as an applet as well as an application",
      "ans": "Yes, just add a main() method to the applet."
    },
    {
      "ques": "difference between Swing and AWT components",
      "ans": "AWT components are heavy-weight, whereas Swing components are lightweight. Heavy weight components depend on the local windowing toolkit. For example, java.awt.Button is a heavy weight component, when it is running on the Java platform for Unix platform, it maps to a real Motif button."
    },
    {
      "ques": "difference between constructors and other methods",
      "ans": "Constructors must have the same name as the class and can not return a value. They are only called once while regular methods could be called many times."
    },
    {
      "ques": "limitation of using Inheritance",
      "ans": "Yes, since inheritance inherits everything from the super class and interface, it may make the subclass too clustering and sometimes error-prone when dynamic overriding or dynamic overloading in some situation."
    },
    {
      "ques": "ArrayStoreException thrown",
      "ans": "When copying elements between different arrays, if the source or destination arguments are not arrays or their types are not compatible, an ArrayStoreException will be thrown."
    },
    {
      "ques": "call one constructor from another if a class has multiple constructors",
      "ans": "Yes, use this() syntax."
    },
    {
      "ques": "difference between the methods sleep() and wait()",
      "ans": "The code sleep(2000); puts thread aside for exactly two seconds. The code wait(2000), causes a wait of up to two second. A thread could stop waiting earlier if it receives the notify() or notifyAll() call. The method wait() is defined in the class Object and the method sleep() is defined in the class Thread."
    },
    {
      "ques": "ArithmeticException",
      "ans": "The ArithmeticException is thrown when integer is divided by zero or taking the remainder of a number by zero. It is never thrown in floating-point operations."
    },
    {
      "ques": "transient variable",
      "ans": "A transient variable is a variable that may not be serialized during Serialization and which is initialized by its default value during de-serialization,"
    },
    {
      "ques": "synchronization",
      "ans": "Synchronization is the capability to control the access of multiple threads to shared resources. synchronized keyword in java provides locking which ensures mutual exclusive access of shared resource and prevent data race."
    },
    {
      "ques": "Collections API",
      "ans": "The Collections API is a set of classes and interfaces that support operations on collections of objects"
    },
    {
      "ques": " Does garbage collection guarantee that a program will not run out of memory",
      "ans": "Garbage collection does not guarantee that a program will not run out of memory. It is possible for programs to use up memory resources faster than they are garbage collected. It is also possible for programs to create objects that are not subject to garbage collection."
    },
    {
      "ques": " The immediate superclass of the Applet class",
      "ans": "Panel is the immediate superclass. A panel provides space in which an application can attach any other component, including other panels."
    },
    {
      "ques": " Which Java operator is right associative",
      "ans": "The = operator is right associative."
    },
    {
      "ques": "difference between a break statement and a continue statement",
      "ans": "A break statement results in the termination of the statement to which it applies (switch, for, do, or while). A continue statement is used to end the current loop iteration and return control to the loop statement."
    },
    {
      "ques": " If a variable is declared as private, where may the variable be accessed",
      "ans": "A private variable may only be accessed within the class in which it is declared."
    },
    {
      "ques": "purpose of the System class",
      "ans": "The purpose of the System class is to provide access to system resources."
    },
    {
      "ques": "primitive Java types",
      "ans": "The eight primitive types are byte, char, short, int, long, float, double, and boolean."
    },
    {
      "ques": "relationship between clipping and repainting under AWT",
      "ans": "When a window is repainted by the AWT painting thread, it sets the clipping regions to the area of the window that requires repainting."
    },
    {
      "ques": " Which class is the immediate superclass of the Container class",
      "ans": "Component class is the immediate super class."
    },
    {
      "ques": " What class of exceptions are generated by the Java run-time system",
      "ans": "The Java runtime system generates RuntimeException and Error exceptions."
    },
    {
      "ques": " Under what conditions is an object's finalize() method invoked by the garbage collector",
      "ans": "The garbage collector invokes an object's finalize() method when it detects that the object has become unreachable."
    },
    {
      "ques": "can a dead thread be restarted",
      "ans": "A dead thread cannot be restarted."
    },
    {
      "ques": " Which arithmetic operations can result in the throwing of an ArithmeticException?",
      "ans": "Integer / and % can result in the throwing of an ArithmeticException."
    },
    {
      "ques": " Variable of the boolean type is automatically initialized as",
      "ans": "The default value of the boolean type is false."
    },
    {
      "ques": " Can try statements be nested",
      "ans": "Yes"
    },
    {
      "ques": "ClassLoaders",
      "ans": "A class loader is an object that is responsible for loading classes. The class ClassLoader is an abstract class."
    },
    {
      "ques": "difference between an Interface and an Abstract class",
      "ans": "An abstract class can have instance methods that implement a default behavior. An Interface can only declare constants and instance methods, but cannot implement default behavior and all methods are implicitly abstract. An interface has all public members and no implementation."
    },
    {
      "ques": "if static modifier is removed from the signature of the main method",
      "ans": "Program throws NoSuchMethodError error at runtime."
    },
    {
      "ques": "default value of an object reference declared as an instance variable",
      "ans": "Null, unless it is defined explicitly."
    },
    {
      "ques": " Can a top level class be private or protected",
      "ans": "No, a top level class can not be private or protected. It can have either public or no modifier."
    },
    {
      "ques": "do we need wrapper classes",
      "ans": "We can pass them around as method parameters where a method expects an object. It also provides utility methods."
    },
    {
      "ques": "difference between error and an exception",
      "ans": "An error is an irrecoverable condition occurring at runtime. Such as OutOfMemory error. Exceptions are conditions that occur because of bad input etc. e.g. FileNotFoundException will be thrown if the specified file does not exist."
    },
    {
      "ques": " Is it necessary that each try block must be followed by a catch block",
      "ans": "It is not necessary that each try block must be followed by a catch block. It should be followed by either a catch block or a finally block."
    },
    {
      "ques": " When a thread is created and started, what is its initial state",
      "ans": "A thread is in the ready state as initial state after it has been created and started."
    },
    {
      "ques": "Locale class",
      "ans": "The Locale class is used to tailor program output to the conventions of a particular geographic, political, or cultural region."
    },
    {
      "ques": "synchronized methods and synchronized statements",
      "ans": "Synchronized methods are methods that are used to control access to an object. A synchronized statement can only be executed after a thread has acquired the lock for the object or class referenced in the synchronized statement."
    },
    {
      "ques": "runtime polymorphism or dynamic method dispatch",
      "ans": "Runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved at runtime rather than at compile-time. In this process, an overridden method is called through the reference variable of a superclass."
    },
    {
      "ques": "Dynamic Binding(late binding)",
      "ans": "Binding refers to the linking of a procedure call to the code to be executed in response to the call. Dynamic binding means that the code associated with a given procedure call is not known until the time of the call at run-time."
    },
    {
      "ques": " Can constructor be inherited",
      "ans": "No, constructor cannot be inherited."
    },
    {
      "ques": "advantages of ArrayList over arrays",
      "ans": "ArrayList can grow dynamically and provides more powerful insertion and search mechanisms than arrays."
    },
    {
      "ques": " Why deletion in LinkedList is fast than ArrayList",
      "ans": "Deletion in linked list is fast because it involves only updating the next pointer in the node before the deleted node and updating the previous pointer in the node after the deleted node."
    },
    {
      "ques": "decide when to use ArrayList and LinkedList",
      "ans": "If you need to frequently add and remove elements from the middle of the list and only access the list elements sequentially, then LinkedList should be used. If you need to support random access, without inserting or removing elements from any place other than the end, then ArrayList should be used."
    },
    {
      "ques": "Values Collection View",
      "ans": "It is a collection returned by the values() method of the Map Interface, It contains all the objects present as values in the map."
    },
    {
      "ques": "dot operator",
      "ans": "The dot operator(.) is used to access the instance variables and methods of class objects.It is also used to access classes and sub-packages from a package."
    },
    {
      "ques": "private constructor",
      "ans": "Private constructor is used if you do not want other classes to instantiate the object and to prevent subclassing."
    },
    {
      "ques": "type casting",
      "ans": "Type casting means treating a variable of one type as though it is another type."
    },
    {
      "ques": "difference between the >> and >>> operators",
      "ans": "The >> operator carries the sign bit when shifting right. The >>> zero-fills bits that have been shifted out."
    },
    {
      "ques": " Which method of the Component class is used to set the position and size of a component",
      "ans": "setBounds() method is used for this purpose."
    },
    {
      "ques": "range of the short type",
      "ans": "The range of the short type is -(2^15) to 2^15 - 1."
    },
    {
      "ques": "immediate superclass of Menu",
      "ans": "MenuItem class"
    },
    {
      "ques": " Does Java allow Default Arguments",
      "ans": "No, Java does not allow Default Arguments."
    },
    {
      "ques": " Which number is denoted by leading zero in java",
      "ans": "Octal Numbers are denoted by leading zero in java, example: 06"
    },
    {
      "ques": " Which number is denoted by leading 0x or 0X in java",
      "ans": "Hexadecimal Numbers are denoted by leading 0x or 0X in java, example − 0XF"
    },
    {
      "ques": " Break statement can be used as labels in Java",
      "ans": "Yes, an example can be break one;"
    },
    {
      "ques": " Where import statement is used in a Java program",
      "ans": "Import statement is allowed at the beginning of the program file after package statement."
    },
    {
      "ques": "isAlive() method under Thread class",
      "ans": "It is used to find out whether a thread is still running or not"
    },
    {
      "ques": "currentThread()",
      "ans": "It is a public static method used to obtain a reference to the current thread."
    },
    {
      "ques": " Explain main thread under Thread class execution",
      "ans": "The main thread is created automatically and it begins to execute immediately when a program starts. It ia thread from which all other child threads originate."
    },
    {
      "ques": " Why is the role of init() method under applets",
      "ans": "It initializes the applet and is the first method to be called."
    },
    {
      "ques": " Which method is called by Applet class to load an image",
      "ans": "getImage(URL object, filename) is used for this purpose."
    },
    {
      "ques": " Define code as an attribute of Applet",
      "ans": "It is used to specify the name of the applet class."
    },
    {
      "ques": " Define canvas",
      "ans": "It is a simple drawing surface which are used for painting images or to perform other graphical operations."
    },
    {
      "ques": " Define Network Programming",
      "ans": "It refers to writing programs that execute across multiple devices (computers), in which the devices are all connected to each other using a network."
    },
    {
      "ques": "Socket",
      "ans": "Sockets provide the communication mechanism between two computers using TCP. A client program creates a socket on its end of the communication and attempts to connect that socket to a server."
    },
    {
      "ques": " Advantages of Java Sockets",
      "ans": "Sockets are flexible and sufficient. Efficient socket based programming can be easily implemented for general communications. It cause low network traffic."
    },
    {
      "ques": " Disadvantages of Java Socket",
      "ans": "Socket based communications allows only to send packets of raw data between applications. Both the client-side and server-side have to provide mechanisms to make the data useful in any way."
    },
    {
      "ques": "class is used by server applications to obtain a port and listen for client requests",
      "ans": "java.net.ServerSocket class is used by server applications to obtain a port and listen for client requests"
    },
    {
      "ques": "class represents the socket that both the client and server use to communicate with each other",
      "ans": "java.net.Socket class represents the socket that both the client and server use to communicate with each other."
    },
    {
      "ques": "Generics are used in Java",
      "ans": "Generics provide compile-time type safety that allows programmers to catch invalid types at compile time. Java Generic methods and generic classes enable programmers to specify, with a single method declaration, a set of related methods or, with a single class declaration, a set of related types."
    },
    {
      "ques": "environment variables do I need to set on my machine in order to be able to run Java programs",
      "ans": "CLASSPATH and PATH are the two variables."
    },
    {
      "ques": " Is there any need to import java.lang package",
      "ans": "No, there is no need to import this package. It is by default loaded internally by the JVM."
    },
    {
      "ques": "Nested top-level class",
      "ans": "If a class is declared within a class and specify the static modifier, the compiler treats the class just like any other top-level class. Nested top-level class is an Inner class."
    },
    {
      "ques": "Externalizable interface",
      "ans": "Externalizable is an interface which contains two methods readExternal and writeExternal. These methods give you a control over the serialization mechanism."
    },
    {
      "ques": " If System.exit (0); is written at the end of the try block, will the finally block still execute",
      "ans": "No in this case the finally block will not execute because when you say System.exit (0); the control immediately goes out of the program, and thus finally never executes."
    },
    {
      "ques": "daemon thread",
      "ans": "Daemon thread is a low priority thread, which runs intermittently in the back ground doing the garbage collection operation for the java runtime system."
    },
    {
      "ques": " Which method is used to create the daemon thread",
      "ans": "setDaemon method is used to create a daemon thread."
    },
    {
      "ques": " Which method must be implemented by all threads",
      "ans": "All tasks must implement the run() method"
    },
    {
      "ques": "GregorianCalendar class",
      "ans": "The GregorianCalendar provides support for traditional Western calendars"
    },
    {
      "ques": "SimpleTimeZone class",
      "ans": "The SimpleTimeZone class provides support for a Gregorian calendar ."
    },
    {
      "ques": "difference between the size and capacity of a Vector",
      "ans": "The size is the number of elements actually stored in the vector, while capacity is the maximum number of elements it can store at a given instance of time."
    },
    {
      "ques": " Can a vector contain heterogenous objects",
      "ans": "Yes a Vector can contain heterogenous objects. Because a Vector stores everything in terms of Object."
    },
    {
      "ques": "enumeration",
      "ans": "An enumeration is an interface containing methods for accessing the underlying data structure from which the enumeration is obtained. It allows sequential access to all the elements stored in the collection."
    },
    {
      "ques": "difference between Path and Classpath",
      "ans": "Path and Classpath are operating system level environment variales. Path is defines where the system can find the executables(.exe) files and classpath is used to specify the location of .class files."
    },
    {
      "ques": " Can a class declared as private be accessed outside it's package",
      "ans": "No, it's not possible to accessed outside it's package."
    },
    {
      "ques": "restriction imposed on a static method or a static block of code",
      "ans": "A static method should not refer to instance variables without creating an instance and cannot use 'this' operator to refer the instance."
    },
    {
      "ques": " Can an Interface extend another Interface",
      "ans": "Yes an Interface can inherit another Interface, for that matter an Interface can extend more than one Interface."
    },
    {
      "ques": " Which object oriented Concept is achieved by using overloading and overriding",
      "ans": "Polymorphism"
    },
    {
      "ques": "an object's lock and which object's have locks",
      "ans": "An object's lock is a mechanism that is used by multiple threads to obtain synchronized access to the object. A thread may execute a synchronized method of an object only after it has acquired the object's lock."
    },
    {
      "ques": "Downcasting",
      "ans": "It is the casting from a general to a more specific type, i.e. casting down the hierarchy."
    },
    {
      "ques": "order of precedence and associativity and how are they used",
      "ans": "Order of precedence determines the order in which operators are evaluated in expressions. Associatity determines whether an expression is evaluated left-to-right or right-to-left."
    },
    {
      "ques": " If a method is declared as protected, where may the method be accessed",
      "ans": "A protected method may only be accessed by classes or interfaces of the same package or by subclasses of the class in which it is declared."
    },
    {
      "ques": "difference between inner class and nested class",
      "ans": "When a class is defined within a scope of another class, then it becomes inner class. If the access modifier of the inner class is static, then it becomes nested class."
    },
    {
      "ques": " What restrictions are placed on method overriding",
      "ans": "Overridden methods must have the same name, argument list, and return type. The overriding method may not limit the access of the method it overrides."
    },
    {
      "ques": "constructor chaining and how is it achieved in Java	",
      "ans": "A child object constructor always first needs to construct its parent. In Java it is done via an implicit call to the no-args constructor as the first statement."
    },
    {
      "ques": " Can a double value be cast to a byte",
      "ans": "Yes, a double value can be cast to a byte."
    },
    {
      "ques": " How does a try statement determine which catch clause should be used to handle an exception",
      "ans": "When an exception is thrown within the body of a try statement, the catch clauses of the try statement are examined in the order in which they appear. The first catch clause that is capable of handling the exception is executed. The remaining catch clauses are ignored."
    },
    {
      "ques": "default values of all the elements of an array defined as an instance variable",
      "ans": "If the array is an array of primitive types, then all the elements of the array will be initialized to the default value corresponding to that primitive type."
    }
  ],
  "programs": [
    {
      "quesno": "itentrylevel",
      "ques": "Smart and Balanced",
      "ans": "Smart and Balanced"
    },
    {
      "quesno": "itentrylevel",
      "ques": "Smart and Balanced",
      "ans": "Smart and Balanced"
    },
    {
      "quesno": "itentrylevel",
      "ques": "Smart and Balanced",
      "ans": "Smart and Balanced"
    }
  ],
  "videos": [
    {
      "id": "w0SDwUU7wpo",
      "title": "Smart and Balanced",
      "time": "5:00 pm",
      "name": "Sateesh Patnana"
    },
    {
      "id": "wC1EV9iwlUg",
      "title": "Smart and Balanced",
      "time": "5:00 pm",
      "name": "Sateesh Patnana"
    },
    {
      "id": "75v3d2SZKjQ",
      "title": "Smart and Balanced",
      "time": "5:00 pm",
      "name": "Sateesh Patnana"
    }
  ]
}

