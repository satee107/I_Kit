{
  "fresheriqs": [
    {
      "ques": "What is the difference between #include <file> and #include file ?",
      "ans": "We use # include to include a file. The difference between two ways of file inclusion lies in the order in which preprocessor searches for the file specified. When the preprocessor encounters #include<file> statement, it looks for the file specified in the angled brackets in the default location (Path defined in INCLUDE environment variable of the system)."
    },
    {
      "ques": "Can #include handle other file formats than .h?",
      "ans": "Yes. Irrespective of the file type, Preprocessor will do its job and will include any file like test.z."
    },
    {
      "ques": "What is the value of NULL?",
      "ans": "The value of NULL is 0 or (void*)0. Whenever NULL has to be compared with some variable or assigned to a variable, depending upon the type of that variable, the value of NULL will be decided."
    },
    {
      "ques": "Can the size of an array be declared at runtime?",
      "ans": "No. The size of an array must be stated at the time of compilation. Alternate way is to use dynamic allocation by calloc or malloc."
    },
    {
      "ques": "What is the heap in memory?",
      "ans": "The heap is where malloc(), calloc(), and realloc() get memory. The allocation of memory from the heap is much slower than the stack. But, the heap is much more flexible about memory allocation than the stack. Memory can be allocated and deallocated in any time and order. This heap memory isn't deallocated by itself, method free() has to be called in order to do so."
    },
    {
      "ques": "What happens if you free a pointer twice?",
      "ans": "It is really dangerous to free the same memory twice. If the memory has not been reallocated in between, it will generate a double free error, since the memory location has already been freed."
    },
    {
      "ques": "How does free() method know about how much memory to release?",
      "ans": "There's no concrete way. Most systems,keeps a track of each memory block as linked lists. When memory is allocated, all the blocks that are given to that particular call are put into a linked list and the size, block number and serial number are written in the head node. There is no assurance, though. But in some way or other,the system keeps track of each block to know the size of each allocated portion of the heap."
    },
    {
      "ques": "How to print an address?",
      "ans": "The best way is to use %p in printf() or fprintf. The %p will tell compiler to use the best type to use, while printing the address according to the environment, since the size of a pointer changes from system to system."
    },
    {
      "ques": "What is an lvalue?",
      "ans": "An lvalue is an expression to which a value can be assigned. The lvalue expression is the one which is located on the left side a statement, whereas an rvalue is located on the right side of a statement.Each assignment must have a valid lvalue and rvalue.The lvalue expression must refer to a storage where something can be stored. It can't be a constant."
    },
    {
      "ques": "How to assign one array to another?",
      "ans": "You can't assign an array to other.Arrays are not lvalue, because they don't refer to one variable, ather a set of variables.So they can't be placed on the left hand side of an assignment statement.For example the following statement will generate compilation error."
    },
    {
      "ques": "what is the order of operator precedence, left to right or right to left ?",
      "ans": "None of them is standard.C does not always start evaluating left to right or right to left. Normally, function calls are done first,followed by complex expressions and then simple expressions.That is why it is best to use parenthesis in all expressions,without depending on precedence."
    },
    {
      "ques": "Can the sizeof operator be used to tell the size of an array passed to a function?",
      "ans": "No. The sizeof() operator can't tell the size of an array, because it is actually a pointer to the data type of the array."
    },
    {
      "ques": "Can you change the value of an array tag?",
      "ans": "No. An array tag can't be used as a storage,because it is not an Lvalue.It can be thought as a pointer to the datatype of the array which is constant and which can't be changed or assigned dynamically."
    },
    {
      "ques": "What are text and binary modes?",
      "ans": "Streams can be classified into two types: text streams and binary streams. The text streams are interpreted as per the ASCII values starting from 0 to 255. Binary streams are raw bytes which C can't interpret, but application has to interpret it itself. Text modes are used to handle, generally text file where as binary modes can be used for all files. But they won't give you the content of a file, rather they will give you the file properties and content in raw binary format."
    },
    {
      "ques": "What does const keyword do?",
      "ans": "The access modifier keyword const tells compiler that the value of this variable is not going to be changed after it is initialized.The compiler will enforce it throughout the lifetime of the variable."
    },
    {
      "ques": "char *p=SAMPLETEXT,*q =SAMPLETEXT  Are these two pointers equal ? If yes , then explain ?",
      "ans": "In C, strings(not array of characters) are immutable. This means that a string once created cannot be modified. Only flushing the buffer can remove it. Next point is, when a string is created it is stored in buffer. Next time, when a new string is created, it will check whether that string is present in buffer or not. If present, that address is assigned. Otherwise, new address stores the new string and this new address is assigned."
    },
    {
      "ques": " Can static variables be declared in a header file?",
      "ans": "You can't declare a static variable without definition this is because they are mutually exclusive storage classes. A static variable can be defined in a header file, but then every source file with in that scope will have their own copy of this variable,which is intended."
    },
    {
      "ques": "What is the benefit of using const for declaring constants over #define?",
      "ans": "The basic difference between them is that, a const variable is a real variable which has a datatype and it exists at run time,and it can't be altered. But a macro is not a real variable,but it carries a constant value which replaces all the occurrences of that macro at the time of pre-processing."
    },
    {
      "ques": "What is a static function?",
      "ans": "Static function is a special type of function whose scope is limited to the source file where the function is defined and can not be used other than that file. This feature helps you to hide some functions and to provide some standard interface or wrapper over that local function."
    },
    {
      "ques": "Should a function contain a return statement if it does not return a value?",
      "ans": "In C, void functions does not return anything. So it is useless to put a return statement at the end of the function, where the control will any way return to the caller function. But, if you want to omit some portion of the function depending upon the scenario, then this return statement is perfect to avoid further execution of that void function."
    },
    {
      "ques": "Why does PASCAL matter? Is there any benefit to using PASCAL functions?",
      "ans": "The main reason behind using PASCAL is that, in the left-to-right parsing the efficiency of switching increases in C."
    },
    {
      "ques": "Is using exit() the same as using return?",
      "ans": "No. They are not the same. Return statement returns control to the caller function,that is, it exits from the lowest level of the call stack. Where as, exit statement make the program returns to the system from where the application was started. So,exit always exits from the highest level of call stack. Eventually, if there is only one level of function call then they both do the same."
    },
    {
      "ques": "What is size of void pointer?",
      "ans": "Size of all pointers are same in C,regardless of their type because pointers variable holds a memory location. And for a given system, this size is constant. The type of pointer is used to know the size of the data that the pointer is pointer is pointing to."
    },
    {
      "ques": "When would you use a pointer to a function?",
      "ans": "Pointers to functions are interesting,when you pass them to other functions. A function that takes function pointers says, in effect,Part of what I do can be customized. Give me a pointer to a function,and I'll call it when that part of the job needs to be done. That function can do its part for me. This is known as a callback. It's used a lot in graphical user interface libraries, in which the style of a display is built into the library but the contents of the display are part of the application."
    },
    {
      "ques": "How can you determine the size of an allocated portion of memory?",
      "ans": "You can't. free() can, but there's no way for a program to know the use of method free()"
    },
    {
      "ques": "Can math operations be performed on a void pointer?",
      "ans": "No. Pointer addition and subtraction are based on advancing the pointer by a number of elements. By definition, if you have a void pointer, you don't know what it's pointing to, so you don't know the size of what it's pointing to. If you want pointer arithmetic to work on raw addresses, use character pointers."
    },
    {
      "ques": "How many parameters should a function have?",
      "ans": "There is no fixed guideline or limit to the number of parameters your functions can have. However,it is considered bad programming style for your functions to contain an abnormally high eight or more number of parameters.The number of parameters a function has also directly affects the speed at which it is called the more parameters, the slower the function call."
    },
    {
      "ques": "Is using exit() the same as using return?",
      "ans": "No. The exit() function is used to exit your program and return control to the operating system. The return statement is used to return from a function and return control to the calling function. If you issue a return from the main() function, you are essentially returning control to the calling function, which is the operating system. In this case, the return statement and exit() function are similar."
    },
    {
      "ques": "How do you construct an increment statement or decrement statement in C?",
      "ans": "There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement x++ means to increment the value of x by 1.Likewise,the statement x – means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of x++, another way to write it is x = x +1."
    },
    {
      "ques": "What is the difference between Call by Value and Call by Reference?",
      "ans": "When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."
    },
    {
      "ques": "Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?",
      "ans": "Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."
    },
    {
      "ques": "What is a stack?",
      "ans": "A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."
    },
    {
      "ques": "What is a sequential access file?",
      "ans": "When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."
    },
    {
      "ques": "What is variable initialization and why is it important?",
      "ans": "This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."
    },
    {
      "ques": "In C programming, how do you insert quote characters (and) into the output screen?",
      "ans": "This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers (for single quote), and (for double quote)"
    },
    {
      "ques": "What is the use of a ‘0’ character?",
      "ans": "It is referred to as a terminating null character, and is used primarily to show the end of a string value."
    },
    {
      "ques": "What is the difference between the = symbol and == symbol?",
      "ans": "The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."
    },
    {
      "ques": "What is the modulus operator?",
      "ans": "The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1."
    },
    {
      "ques": " What is a nested loop?",
      "ans": "A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed."
    },
    {
      "ques": "Which of the following operators is incorrect and why? ( >=, <=, <>, ==)",
      "ans": "<> is incorrect. While this operator is correctly interpreted as not  equal to in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."
    },
    {
      "ques": "Compare and contrast compilers from interpreters.",
      "ans": "Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."
    },
    {
      "ques": " How do you declare a variable that will hold string values?",
      "ans": "The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example:char MyName[50];declares a string variable named MyName that can hold a maximum of 50 characters."
    },
    {
      "ques": "Can the curly brackets be used to enclose a single line of code?",
      "ans": "While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "
    },
    {
      "ques": "What are header files and what are its uses in C programming?",
      "ans": "Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "
    },
    {
      "ques": "What is syntax error?",
      "ans": "Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."
    },
    {
      "ques": " What are variables and it what way is it different from constants?",
      "ans": "Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value. Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "
    },
    {
      "ques": "How do you access the values within an array?",
      "ans": "Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says intscores[5], then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."
    },
    {
      "ques": "Can I use  int data type to store the value 32768? Why?",
      "ans": "No. int data type is capable of storing values from -32768 to 32767. To store 32768, you can use long int instead. You can also use unsigned int, assuming you don’t intend to store negative values."
    },
    {
      "ques": "Can two or more operators such as n and t be combined in a single line of program code?",
      "ans": "Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (Hello\n\n World) to output the text Hello on the first line and World enclosed in single quotes to appear on the next two lines. "
    },
    {
      "ques": "Why is it that not all header files are declared in every C program?",
      "ans": "The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."
    },
    {
      "ques": "When is the “void” keyword used in a function?",
      "ans": "When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then  void is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of void."
    },
    {
      "ques": "What are compound statements?",
      "ans": "Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."
    },
    {
      "ques": "What is the significance of an algorithm to C programming?",
      "ans": "Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."
    },
    {
      "ques": "What is the advantage of an array over individual variables?",
      "ans": "When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."
    },
    {
      "ques": "What is wrong in this statement?  scanf(%d,whatnumber);",
      "ans": "An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the address of the variable name. This is a common mistake for programmers, often leading to logical errors."
    },
    {
      "ques": "How do you generate random numbers in C?",
      "ans": "Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."
    },
    {
      "ques": "What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?",
      "ans": "The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of tolower(), the code #include <ctype.h> must be present at the beginning of the program."
    },
    {
      "ques": "What are comments and how do you insert it in a C program?",
      "ans": "Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."
    },
    {
      "ques": "What is debugging?",
      "ans": "Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."
    },
    {
      "ques": "What does the && operator do in a program code?",
      "ans": "The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE."
    },
    {
      "ques": "What does the format %10.2 mean when included in a printf statement?",
      "ans": "This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "
    },
    {
      "ques": "What are logical errors and how does it differ from syntax errors?",
      "ans": "Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."
    },
    {
      "ques": "What are the different types of control structures in programming?",
      "ans": "There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."
    },
    {
      "ques": "What is || operator and how does it function in a program?",
      "ans": "The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."
    },
    {
      "ques": "Can the 'if'function be used in comparing strings?",
      "ans": "No. 'if' command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."
    },
    {
      "ques": "What are preprocessor directives?",
      "ans": "Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."
    },
    {
      "ques": "Describe the order of precedence with regards to operators in C.",
      "ans": "Order of precedence determines which operation must first take place in an operation statement or conditional statement. On the top most level of precedence are the unary operators !, +, – and &. It is followed by the regular mathematical operators (*, / and modulus % first, followed by + and -). Next in line are the relational operators <, <=, >= and >. This is then followed by the two equality operators == and !=. The logical operators && and || are next evaluated. On the last level is the assignment operator =."
    },
    {
      "ques": "What is wrong with this statement? myName = 'Robin';",
      "ans": "You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, 'Robin');"
    },
    {
      "ques": "How do you determine the length of a string value that was stored in a variable?",
      "ans": "To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."
    },
    {
      "ques": "Is it possible to initialize a variable at the time it was declared?",
      "ans": "Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.For example: char planet[15] = 'Earth'; does two things: it declares a string variable named planet, then initializes it with the value 'Earth'."
    },
    {
      "ques": "Why is C language being considered a middle level language?",
      "ans": "This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "
    },
    {
      "ques": " What are the different file extensions involved when programming in C?",
      "ans": "Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file."
    },
    {
      "ques": "What are reserved words?",
      "ans": "Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."
    },
    {
      "ques": "What are linked list?",
      "ans": "A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."
    },
    {
      "ques": "What is FIFO?",
      "ans": "In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."
    },
    {
      "ques": "What are binary trees?",
      "ans": "Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."
    },
    {
      "ques": "Not all reserved words are written in lowercase. TRUE or FALSE?",
      "ans": "FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."
    },
    {
      "ques": "What is an endless loop?",
      "ans": "An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops."
    },
    {
      "ques": "What is a program flowchart and how does it help in writing a program?",
      "ans": "A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."
    },
    {
      "ques": "What is wrong with this program statement? void = 10;",
      "ans": "The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."
    },
    {
      "ques": "Is this program statement valid? INT = 10.50;",
      "ans": "Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."
    },
    {
      "ques": "What are actual arguments?",
      "ans": "When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments. "
    },
    {
      "ques": "What is a newline escape sequence?",
      "ans": "A newline escape sequence is represented by the \n character. This is used to insert a new line when displaying data in the output screen. More spaces can be added by inserting more \n characters. For example, \n\n would insert two spaces. A newline escape sequence can be placed before the actual output expression or after. "
    },
    {
      "ques": "What is output redirection?",
      "ans": "It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."
    },
    {
      "ques": "What are run-time errors?",
      "ans": "These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "
    },
    {
      "ques": "What are formal parameters?",
      "ans": "In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."
    },
    {
      "ques": "What are control structures?",
      "ans": "Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements"
    },
    {
      "ques": "When is a 'switch' statement preferable over an 'if' statement?",
      "ans": "The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."
    },
    {
      "ques": " What are global variables and how do you declare them?",
      "ans": "Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."
    },
    {
      "ques": "What are enumerated types?",
      "ans": "Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday. "
    },
    {
      "ques": "What does the function toupper() do?",
      "ans": "It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."
    },
    {
      "ques": " Is it possible to have a function as a parameter in another function?",
      "ans": "Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."
    },
    {
      "ques": "What are multidimensional arrays?",
      "ans": "Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example, you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."
    },
    {
      "ques": "Which function in C can be used to append a string to another string?",
      "ans": "The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."
    },
    {
      "ques": "What is the difference between functions getch() and getche()?",
      "ans": "Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "
    },
    {
      "ques": "Dothese two program statements perform the same output? 1) scanf(%c, &letter);  2) letter=getchar()",
      "ans": "Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."
    },
    {
      "ques": "What are structure types in C?",
      "ans": "Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."
    },
    {
      "ques": "What does the characters r and w mean when writing programs that will make use of files?",
      "ans": "r means 'read' and will open a file as input wherein data is to be retrieved. 'w' means 'write', and will open a file for output. Previous data that was stored on that file will be erased."
    },
    {
      "ques": "What is the difference between text files and binary files?",
      "ans": "Text files contain data that can easily be understood by humans.It includesletters,numbers and other characters.On the other hand, binary files contain 1s and 0s that only computers can interpret. "
    },
    {
      "ques": "is it possible to create your own header files?",
      "ans": "Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."
    },
    {
      "ques": "What is dynamic data structure?",
      "ans": "Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."
    },
    {
      "ques": "What are the different data types in C?",
      "ans": "The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."
    },
    {
      "ques": " What is the general form of a C program?",
      "ans": "A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."
    },
    {
      "ques": "What is the advantage of a random access file?",
      "ans": "If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "
    },
    {
      "ques": "In a switch statement, what will happen if a break statement is omitted?",
      "ans": "If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."
    },
    {
      "ques": "Describe how arrays can be passed to a user defined function",
      "ans": "One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."
    },
    {
      "ques": "What are pointers?",
      "ans": "Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."
    },
    {
      "ques": "Can you pass an entire structure to functions?",
      "ans": "Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."
    },
    {
      "ques": "What is gets() function?",
      "ans": "The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator  is placed after the last character."
    },
    {
      "ques": "The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen?",
      "ans": "You can do this by using %% in the printf statement. For example, you can write printf(10%%) to have the output appear as 10% on the screen. "
    },
    {
      "ques": "How do you search data in a data file using random access method?",
      "ans": "Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."
    },
    {
      "ques": "Are comments included during the compilation stage and placed in the EXE file as well?",
      "ans": "No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality."
    },
    {
      "ques": "Is there a built-in function in C that can be used for sorting data?",
      "ans": "Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm. "
    },
    {
      "ques": "What are the advantages and disadvantages of a heap?",
      "ans": "Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "
    },
    {
      "ques": "How do you convert strings to numbers in C?",
      "ans": "You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."
    },
    {
      "ques": "What is the use of a semicolon (;) at the end of every program statement?",
      "ans": "It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking"
    },
    {
      "ques": "C LANGUAGE HAS BEEN DEVELOPED IN WHICH LANGUAGE?",
      "ans": "C language has been developed using assembly level language."
    },
    {
      "ques": "WHICH YEAR C LANGUAGE IS DEVELOPED?",
      "ans": "C programming language was developed at Bell Laboratories in 1972 by Dennis Ritchie."
    },
    {
      "ques": "WHAT IS MEANT BY PROGRAMMING LANGUAGE AND GIVE SOME EXAMPLES?",
      "ans": "Programming language is nothing but a language designed to communicate to machines through instructions and commands.Normally machines are computers. Programs are written using some programming languages to control the behaviour of machines/computers and to make them to perform required tasks.Programming language example: Assembly language, C language, C++ language, Java, C#, .NET, Python etc"
    },
    {
      "ques": "WHAT ARE THE KEY FEATURES OR CHARACTERISTICS OF C LANGUAGE?",
      "ans": "Reliability,Portability,Flexibility,Interactivity,Modularity. Efficiency and Effectiveness"
    },
    {
      "ques": "WHAT IS EMBEDDED C?",
      "ans": "Embedded C is the extension of C programming language.Embedded C is used to develop micro controller based applications.Embedded C includes features not available in normal C like fixed-point arithmetic, named address spaces, and basic I/O hardware addressing.Cell phones, MP3 players are some example for embedded systems in which embedded C is used to program and control these devices."
    },
    {
      "ques": "WHICH LEVEL IS C LANGUAGE BELONGING TO?",
      "ans": "C language is belonging to middle level language. C language behaves as a bridge between machine level (low level) languages and high level languages.C language is more user friendly than machine level languages. And, C language does not support all the concepts that high level languages offer. So, C programming language is called as middle level language."
    },
    {
      "ques": "WHAT DO YOU MEAN BY HIGH LEVEL, MIDDLE LEVEL AND LOW LEVEL LANGUAGES AND GIVE AN EXAMPLE FOR EACH?",
      "ans": "High level languages –These level languages provide almost everything that the programmer might need to do as already build into the language.Example:Java, Python Middle level languagesThese languages don’t provide all the built-in functions found in high level languages, but provide all building blocks that we need to produce the result we want.Example: C, C++Low level languagesThese languages provide nothing other than access to the machine’s basic instruction set.Example:Assemblylanguage"
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN STRUCTURED ORIENTED, OBJECT ORIENTED AND NON-STRUCTURE ORIENTED PROGRAMMING LANGUAGE?",
      "ans": "Structured oriented programming language – In this type of language, large programs are divided into small programs called functions.Prime focus is on functions and procedures that operate on data Data moves freely around the systems from one function to another Program structure follows “Top Down Approach”Example: C, Pascal, ALGOL and Modula-2 Object oriented programming language – In this type of language, programs are divided into objects Prime focus is on the data that is being operated and not on the functions or procedures Data is hidden and cannot be accessed by external functionsProgram structure follows Bottom UP Approach Example: C++, JAVA and C# (C sharp)Non-structure oriented programming language –There is no specific structure for programming this language.Example:  BASIC, COBOL, FORTRAN"
    },
    {
      "ques": "WHAT IS COMPILER?",
      "ans": "Compiler is a program that converts human readable code into machine readable code. This process is called compilation."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN ASSEMBLER, COMPILER AND INTERPRETER?",
      "ans": "Assembler is a program that converts assembly level language (low level language) into machine level language.Compiler compiles entire C source code into machine code. Whereas, interpreters converts source code into intermediate code and then this intermediate code is executed line by line."
    },
    {
      "ques": "WHAT IS PRINTF()?",
      "ans": "printf() is an inbuilt library function in C which is available in C library by default. This function is declared and related macros are defined in “stdio.h” header file. printf() function is used to print the “character, string, float, integer, octal and hexadecimal values” onto the output screen."
    },
    {
      "ques": "WHAT IS SCANF()?",
      "ans": "scanf() function is an inbuilt library function in C which is available in C library by default. This function is declared and related macros are defined in  stdio.h” header file.scanf() function is used to read character, string, numeric data from keyboard."
    },
    {
      "ques": "WHAT IS MEANT BY PROTOCOL?",
      "ans": "Protocol is nothing but a set of rules to be followed by a programmer."
    },
    {
      "ques": "EXECUTION OF A C PROGRAM STARTS FROM WHICH FUNCTION?",
      "ans": "Always, execution of a C program starts from main() function"
    },
    {
      "ques": "WHAT ARE ALL THE SECTIONS THAT A C PROGRAM MAY/MUST HAVE?",
      "ans": "There are many sections in a C program structure. They are,Documentation sectionLink Section Definition SectionGlobal declaration sectionFunction prototype declaration sectionMain function User defined function section main() function section is the important section in a C program as program execution starts from main() function only in C language. A C program may not have all other sections except main() function."
    },
    {
      "ques": "WHAT IS IDE?",
      "ans": "IDE is nothing but Integrated Development Environment. IDE is a tool that provides user interface with compilers to create, compile and execute C programs.Example: Turbo C++, Borland C++ and DevC++. These provide Integrated Development Environment with compiler for both C and C++ programming language."
    },
    {
      "ques": "LIST OUT SOME OF C COMPILERS.",
      "ans": "There are so many compilers available in market for Windows operating system and UNIX. We are listing some of them here for your reference. AMPC CCS C Compiler ch clang Cygwin Digital mars GCC compiler MikroC Compiler Portable C Compiler, Power C, QuickC, Ritchie C Compiler, Small-C"
    },
    {
      "ques": "WHAT IS HEADER FILE IN C LANGUAGE?",
      "ans": "Header file is a file that contains function declaration and macro definition for C in-built library functions.All C standard library functions are declared in many header files which are saved as file_name.h. We are including these header files in our C program using “#include <file_name.h>” command to make use of the functions those are declared in the header files. When we include header files in our C program using “#include <filename.h>” command, all C code of the header files are included in C program. Then, this C program is compiled by compiler and executed."
    },
    {
      "ques": "IS C LANGUAGE CASE SENSITIVE?",
      "ans": "Yes. C language instructions/commands/functions and everything used in C program are case sensitive."
    },
    {
      "ques": "WHAT IS DATA TYPE IN C?",
      "ans": "Data types in C language are defined as the data storage format that a variable can store a data to perform a specific operation.Data types are used to define a variable before to use in a program. Size of variable, constant and array are determined by data types."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN INT, CHAR, FLOAT & DOUBLE DATA TYPES?",
      "ans": "Integer data type allows a variable to store numeric values. The storage size of int data type is 2 or 4 or 8 byte. It varies depend upon the processor in the CPU. Character data type allows a variable to store only one character. Storage size of character data type is 1. Float data type allows a variable to store decimal values. Storage size of float data type is 4. This also varies depend upon the processor in the CP.Double data type is also same as float data type which allows up-to 10 digits after decimal."
    },
    {
      "ques": "WHAT IS THE USE OF SIZEOF() FUNCTION IN C?",
      "ans": "sizeof() function is used to find the memory space allocated for each data type in C."
    },
    {
      "ques": "WHAT IS MODIFIER IN C?",
      "ans": "The amount of memory space to be allocated for a variable is derived by modifiers.Modifiers are prefixed with basic data types to modify (either increase or decrease) the amount of storage space allocated to a variable. For example, storage space for int data type is 4 byte for 32 bit processor. We can increase the range by using long int which is 8 byte. We can decrease the range by using short int which is 2 byte."
    },
    {
      "ques": "WHAT ARE DIFFERENT TYPES OF MODIFIERS IN C?",
      "ans": "There are 5 modifiers available in C language. They are,shortlongsignedunsignedlong long"
    },
    {
      "ques": "WHAT IS ENUM IN C?",
      "ans": "Enumeration is a data type that consists of named integer constants as a list.It start with 0 (zero) by default and value is incremented by 1 for the sequential identifiers in the list."
    },
    {
      "ques": "WHAT IS VOID IN C?",
      "ans": "Void is an empty data type that has no value.We use void data type in functions when we don’t want to return any value to the calling function. Example: void sum (int a, int b); – This function won’t return any value to the calling function.int sum (int a, int b); – This function will return value to the calling function.We use void data type in pointer like “void *p”. It means, pointer “p” is neither pointing to int data type nor char data type. It acts as generic pointer. We are using void pointer when we are not sure on the data type that this pointer will point to. We can use void pointer to refer either integer data or char data.But, this void pointer should not be dereferenced without explicit type casting.We use void in functions as “int function_name (void)”. Here void means, this function does not pass any argument."
    },
    {
      "ques": "WHAT IS TOKEN IN C?",
      "ans": "C tokens are the basic buildings blocks in C language which are constructed together to write a C program.Each and every smallest individual unit in a C program are known as C tokens."
    },
    {
      "ques": "WHAT IS IDENTIFIER IN C?",
      "ans": "Each program elements in a C program are given a name called identifiers.Names given to identify Variables, functions and arrays are examples for identifiers.Example: x is a name given to integer variable in above program"
    },
    {
      "ques": "WHAT IS KEYWORD IN C?",
      "ans": "Keywords are pre-defined words in a C compiler. Each keyword is meant to perform a specific function in a C program.Since keywords are referred names for compiler, they can’t be used as variable name."
    },
    {
      "ques": "LIST OUT SOME KEYWORDS AVAILABLE IN C LANGUAGE.",
      "ans": "Below are some of keywords that C language offers.auto, double, int, struct, break, else, long, switch, case, enum, register, typedef, char, extern, return, union, const, float, short, unsigned, continue, for, signed, void, default, goto, sizeof, volatile, do, , if, static, while"
    },
    {
      "ques": "WHAT IS CONSTANT IN C?",
      "ans": "Constants refer to fixed values. They are also called as literals.C Constants are also like normal variables. But, only difference is, constant values can’t be modified by the program once they are defined. Constants may be belonging to any of the data type."
    },
    {
      "ques": "WHAT ARE THE TYPES OF CONSTANTS IN C?",
      "ans": "Integer constants.Real or Floating point constants.Octal & Hexadecimal constants .Character constants.String constantsBackslash character constants"
    },
    {
      "ques": "WHAT IS VARIABLE IN C?",
      "ans": "C variable is a named location in a memory where a program can manipulate the data. This location is used to hold the value of the variable. The value of the C variable may get change in the program.C variable might be belonging to any of the data type like int, float, char etc"
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN CONSTANT AND VARIABLE IN C?",
      "ans": "Constant values can’t be modified by the program once it is declared. But, variable values can be modified by the program."
    },
    {
      "ques": "CAN VARIABLE NAME START WITH NUMBERS?",
      "ans": "No. Variable names can’t start with numbers as per the variable naming rule"
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN VARIABLE DECLARATION AND VARIABLE DEFINITION IN C?",
      "ans": "Variable declaration tells the compiler about data type and size of the variable. Whereas, variable definition allocates memory to the variable Variable can be declared many times in a program. But, definition can happen only one time for a variable in a program. Variable declaration is for assignment of properties and identification to a variable. Whereas, variable definition is for assignments of storage space to a variable"
    },
    {
      "ques": "WHAT ARE THE DIFFERENT TYPES OF VARIABLE IN C?",
      "ans": "Local variabl.Global variable. Environment variable"
    },
    {
      "ques": "WHAT IS LOCAL VARIABLE IN C?",
      "ans": "The variables which are having scope/life only within the function are called local variables.These variables are declared within the function and can’t be accessed outside the function."
    },
    {
      "ques": "WHAT IS GLOBAL VARIABLE IN C?",
      "ans": "The variables which are having scope/life throughout the program are called global variables. Global variable is defined outside the main function. So, this variable is visible to main function and all other sub functions."
    },
    {
      "ques": "WHAT IS ENVIRONMENT VARIABLE IN C?",
      "ans": "Environment variable is a variable that will be available for all C applications and C programs.Once environment variables are exported, we can access them from anywhere in a C program without declaring and initializing in an application or C program."
    },
    {
      "ques": "WHAT IS OPERATOR IN C?",
      "ans": "The symbols which are used to perform logical and mathematical operations in a C program are called C operators.These C operators join individual constants and variables to form expressions. Operators, functions, constants and variables are combined together to form expressions."
    },
    {
      "ques": "WHAT ARE THE DIFFERENT TYPES OF OPERATORS IN C?",
      "ans": "C language offers many types of operators. They are, Arithmetic operators,Assignment operators,Relational operators,Logical operators,Bit wise operators,Conditional operators (ternary operators),Increment/decrement operators,Special operators"
    },
    {
      "ques": "WHAT IS THE SYNTAX FOR TERNARY OPERATOR IN C?",
      "ans": "Ternary operator is same as if else control statement in C. Syntax:(Condition? true_value: false_value);Example:(A > 100?  0:  1);"
    },
    {
      "ques": "WHAT IS ARITHMETIC OPERATOR IN C?",
      "ans": "C Arithmetic operators are used to perform mathematical calculations like addition, subtraction, multiplication, division and modulus in C programs.Arithmetic operators are +, -, *, /, %"
    },
    {
      "ques": "WHAT IS ASSIGNMENT OPERATOR IN C?",
      "ans": "Assignment operators are used to assign the values to the variables.Assignment operators are =, +=, -=, /+, %= etc."
    },
    {
      "ques": "WHAT IS THE RELATIONAL OPERATOR IN C?",
      "ans": "Relational operators are used to find the relation between two variables. i.e. to compare the values of two variables in a C program.Relational operators are >, <, >=, <=, ==, !="
    },
    {
      "ques": "WHAT IS THE LOGICAL OPERATOR IN C?",
      "ans": "Logical operators are used to perform logical operations on the given expressions.There are 3 logical operators in C language. They are logical AND (&&),logical OR (||)logical NOT (!)"
    },
    {
      "ques": "WHAT IS BITWISE OPERATOR IN C?",
      "ans": "Bitwise operators are used to perform bit operations. Decimal values are converted into binary values which are the sequence of bits and bit wise operators work on these bits.Bit wise operators in C language are & (bitwise AND), | (bitwise OR), ~ (bitwise OR), ^ (XOR), << (left shift) and >> (right shift)."
    },
    {
      "ques": "WHAT ARE ALL DECISION CONTROL STATEMENTS IN C?",
      "ans": "There are 3 types of decision making control statements in C language. They are, if statementsif else statementsnested if statements"
    },
    {
      "ques": "WHAT ARE ALL LOOP CONTROL STATEMENTS IN C?",
      "ans": "Loop control statements in C are used to perform looping operations until the given condition is true. Control comes out of the loop statements once condition becomes false.There are 3 types of loop control statements in C language. They are, forwhile do-while"
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN WHILE AND DO-WHILE LOOPS IN C?",
      "ans": "While loop is executed only when given condition is true.Whereas, do-while loop is executed for first time irrespective of the condition. After executing while loop for first time, then condition is checked."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN SINGLE EQUAL = AND DOUBLE EQUAL ==  OPERATORS IN C?",
      "ans": "Single equal is an assignment operator used to assign the values to the variables. But, double equal is relational operator used to compare two variable values whether they are equal are not."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN PRE INCREMENT OPERATOR AND POST INCREMENT OPERATOR IN C?",
      "ans": "Pre increment operator is used to increment variable value by 1 before assigning the value to the variable.Post increment operator is used to increment variable value by 1 after assigning the value to the variable."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN PRE DECREMENT OPERATOR AND POST DECREMENT OPERATOR?",
      "ans": "Pre decrement operator is used to decrement variable value by 1 before assigning the value to the variable. Post decrement operator is used to decrement variable value by 1 after assigning the value to the variable."
    },
    {
      "ques": "WHAT IS & AND * OPERATORS IN C?",
      "ans": " * Operator is used as pointer to a variable. Example: * a where * is pointer to the variable a. & operator is used to get the address of the variable. Example: &a will give address of a."
    },
    {
      "ques": "WHAT WILL HAPPEN IF BREAK STATEMENT IS NOT USED IN SWITCH CASE IN C?",
      "ans": "Switch case statements are used to execute only specific case statements based on the switch expression.If we do not use break statement at the end of each case, program will execute all consecutive case statements until it finds next break statement or till the end of switch case block."
    },
    {
      "ques": "WHY IS DEFAULT STATEMENT USED IN SWITCH CASE IN C?",
      "ans": "Switch case statements are used to execute only specific case statements based on the switch expression. If switch expression does not match with any case, default statements are executed by the program."
    },
    {
      "ques": "WHERE SHOULD TYPE CAST FUNCTION NOT BE USED IN C?",
      "ans": "Type cast function should not be used in const and volatile declaration. Because, constant value can’t be modified by the program once they are defined. And, volatile variable values might keep on changing without any explicit assignment by the program as operating system will be modifying these values."
    },
    {
      "ques": "HOW MANY ARGUMENTS CAN BE PASSED TO A FUNCTION IN C?",
      "ans": "Any number of arguments can be passed to a function. There is no limit on this. Function arguments are stored in stack memory rather than heap memory. Stack memory allocation is depending on the operating system. So, any number of arguments can be passed to a function as much as stack has enough memory. Program may crash when stack overflows."
    },
    {
      "ques": "WHAT IS STATIC FUNCTION IN C?",
      "ans": "All functions are global by default in a C program/file. But, static keyword makes a function as a local function which can be accessed only by the program/file where it is declared and defined. Other programs/files can’t access these static functions."
    },
    {
      "ques": "WHAT IS EXIT() FUNCTION IN C?",
      "ans": "exit() function terminates the program/process normally and returns the status code to the parent program/process.Syntax: void exit(int status)"
    },
    {
      "ques": "WHAT IS THE USE OF “#DEFINE” IN C?",
      "ans": "#define is a pre-processor directive which is used to define constant value. This constant can be any of the basic data types."
    },
    {
      "ques": "HOW WILL YOU OVERRIDE AN EXISTING MACRO IN C?",
      "ans": "To override an existing macro, we need to undefine existing macro using “#undef”. Then, we need to define same macro again with new value."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN MEMCPY() & STRCPY() FUNCTIONS IN C?",
      "ans": "memcpy() function is used to copy a specified number of bytes from one memory to another. Whereas, strcpy() function is used to copy the contents of one string into another string.memcpy() function acts on memory rather than value. Whereas, strcpy() function acts on value rather than memory."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN MEMCPY() & MEMMOVE() FUNCTIONS IN C?",
      "ans": "memcpy()  function is is used to copy a specified number of bytes from one memory to another.memmove() function is used to copy a specified number of bytes from one memory to another or to overlap on same memory.Difference between memmove() and memcpy() is, overlap can happen on memmove(). Whereas, memory overlap won’t happen in memcpy() and it should be done in non-destructive way."
    },
    {
      "ques": "IS THERE ANY INBUILT LIBRARY FUNCTION IN C TO REMOVE LEADING AND TRAILING SPACES FROM A STRING? HOW WILL YOU REMOVE THEM IN C?",
      "ans": "There is no inbuilt function to remove leading and trailing spaces from a string in C. We need to write our own function to remove them. We need to check first non-space character in given string. Then, we can copy that string from where non space character is found. Then, we can check whether any spaces are available in copied string from the end of the string. If space is found, we can copy ‘0’ in that space until any character is found. Because, ‘0’indicates the end of the string. Now, we have removed leading and trailing spaces in a given string."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN STRCPY() & STRNCPY() FUNCTIONS IN C?",
      "ans": "strcpy( ) function copies whole content of one string into another string. Whereas, strncpy( ) function copies portion of contents of one string into another string. If destination string length is less than source string, entire/specified source string value won’t be copied into destination string in both cases."
    },
    {
      "ques": "CAN ARRAY SUBSCRIPTS HAVE NEGATIVE VALUE IN C?",
      "ans": "No. Array subscripts should not have negative value. Always, it should be positive."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN ARRAY AND STRING IN C?",
      "ans": "Array can hold any of the data types. But, string can hold only char data type.Array size must be a constant value. So, array size can’t be changed once declared. But, string size can be modified using char pointer.Array is not ended with null character by default. But, string is ended with null (‘0’) character by default."
    },
    {
      "ques": "WHAT IS POINTER IN C?",
      "ans": "Pointer is a variable that stores/points the address of another variable. Normal variable stores the value of the variable whereas pointer variable stores the address of the variable.Syntax: data_type *var_name; Where, * is used to denote that “p” is pointer variable and not a normal variable."
    },
    {
      "ques": "WHAT IS NULL POINTER IN C?",
      "ans": "Null pointer is a pointer which is pointing to nothing. Null pointer points to empty location in memory. Value of null pointer is 0. We can make a pointer to point to null as below. int *p =  NULL; char *p = NULL;"
    },
    {
      "ques": "WHAT IS NULL IN C?",
      "ans": "NULL is a macro which is defined in C header files. The value of NULL macro is 0. It is defined in C header files as below. #define NULL (void *) 0; NULL is used for pointers only as it is defined as (void *) 0. It should not be used other than pointers. If NULL is assigned to a pointer, then pointer is pointing to nothing."
    },
    {
      "ques": "WHAT IS VOID POINTER IN C?",
      "ans": "Void pointer is a generic pointer that can be used to point anothe variable of any data type.Void pointer can store the address of variable belonging to any of the data type. So, void pointer is also called as general purpose pointer. Note:int pointer can be used to point a variable of int data type and char pointer can be used to point a variable of char data type."
    },
    {
      "ques": "WHAT IS DANGLING POINTER IN C?",
      "ans": "When a pointer is pointing to non-existing memory location is called dangling pointer."
    },
    {
      "ques": "WHAT IS WILD POINTER IN C?",
      "ans": "Uninitialized pointers are called as wild pointers in C which points to arbitrary (random) memory location. This wild pointer may lead a program to behave wrongly or to crash."
    },
    {
      "ques": "WHAT IS FILE POINTER IN C?",
      "ans": "File pointer is a pointer which is used to handle and keep track on the files being accessed. A new data type called “FILE” is used to declare file pointer. This data type is defined in stdio.h file. File pointer is declared as FILE *fp. Where, ‘fp’ is a file pointer. fopen() function is used to open a file that returns a FILE pointer. Once file is opened, file pointer can be used to perform I/O operations on the file. fclose() function is used to close the file."
    },
    {
      "ques": "WHEN CAN VOID POINTER AND NULL POINTER BE USED IN C?",
      "ans": "Void pointer is a generic pointer that can be used to point another variable of any data type. Null pointer is a pointer which is pointing to nothing."
    },
    {
      "ques": "WHAT IS CONST POINTER IN C?",
      "ans": "Const pointer is a pointer that can’t change the address of the variable that is pointing to.Once const pointer is made to point one variable, we can’t change this pointer to point to any other variable. This pointer is called const pointer."
    },
    {
      "ques": "IS POINTER ARITHMETIC A VALID ONE? WHICH ARITHMETIC OPERATION IS NOT VALID IN POINTER? WHY?",
      "ans": "Pointer arithmetic is not valid one. Pointer addition, multiplication and division are not allowed as these are not making any sense in pointer arithmetic. But, two pointers can be subtracted to know how many elements are available between these two pointers."
    },
    {
      "ques": "IS VOID POINTER ARITHMETIC A VALID ONE? WHY?",
      "ans": "Arithmetic operation on void pointer is not valid one. Void pointer is a generic pointer. It is not referring int, char or any other data type specifically. So, we need to cast void pointer to specific type before applying arithmetic operations. Note: Pointer arithmetic itself is not valid one. Pointer addition, multiplication and division are not allowed as these are not making any sense in pointer arithmetic. But, two pointers can be subtracted to know how many elements are available between these two pointers."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN NULL AND ZERO?",
      "ans": "NULL is a macro which is defined in C header files. The value of NULL macro is 0. sIt is defined in C header files as below. #define NULL (void *) 0;NULL is used for pointers only as it is defined as (void *) 0. It should not be used other than pointers. If NULL is assigned to a pointer, then pointer is pointing to nothing. 0 (zero) is a value."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN NULL POINTER AND UNINITIALIZED POINTER IN C?",
      "ans": "Null pointer is a pointer which is pointing to nothing. Null pointer points to empty location in memory. Value of null pointer is 0. We can make a pointer to point to null as below. int *p =  NULL char *p = NULL;Uninitialized pointers are called as wild pointers in C which points to arbitrary (random) memory location. This wild pointer may lead a program to behave wrongly or to crash."
    },
    {
      "ques": "CAN ARRAY SIZE BE DECLARED AT RUN TIME?",
      "ans": "Array size can’t be declared at run time. Size of array must be known during compilation time. So, array size should be declared before compilation.Correct example: char array [10]; Wrong example: char array[i]; Always, Array subscript should be positive and it should not be either negative or any variable name. If we really don’t know the size of an array, we can use dynamic memory allocation concepts in C which uses malloc(), calloc() functions to allocate memory during execution time."
    },
    {
      "ques": "WHAT IS MEMORY LEAK IN C?",
      "ans": "Memory leak occurs when memory is allocated but not released back to the operating system. Memory leakage increases unwanted memory usage. So, it reduces performance of the computer by reducing available memory.In modern operating systems, memory is released back to the operating system when application terminates."
    },
    {
      "ques": "WHAT HAPPENS WHEN WE TRY TO ACCESS NULL POINTER IN C?",
      "ans": "NULL pointer is pointer that is pointing to nothing (No memory location). Accessing null pointer in C may lead a program to crash. So, Null pointer should not be accessed in a program."
    },
    {
      "ques": "WHAT IS MEANT BY SEGMENTATION FAULT OR MEMORY FAULT IN C?",
      "ans": "Segmentation fault is a fault that occurs because of illegal/invalid memory access. Illegal memory access means, When a program tries to access a memory location that is not allowed or when a program tries to access a memory location in a way that is not allowed."
    },
    {
      "ques": "WHAT IS MEANT BY CORE DUMP IN C?",
      "ans": "Core dump or core is a file, generated when a program is crashed or terminated abnormally because of segmentation fault or some other reason. Information of the memory used by a process is dumped in a file called core. This file is used for debugging purpose. Core dump has file name like core.<process_id> Core dump file is created in current working directory when a process terminates abnormally. Core dump is a typical error occurs because of illegal memory access. Core dump is also called as memory dump, storage dump or dump."
    },
    {
      "ques": "WHAT IS THE SIZE OF INT POINTER AND CHAR POINTER IN C?",
      "ans": "Pointer variable size is not depending on data type as pointer always stores the address of other variable which is always integer data type.So, any pointer (int, char, double, etc) size will be 2 for 16 bit processor, 4 for 32 bit processor and 8 for 64 bit processor. sizeof() operator can be used to evaluate size of a variable/pointer in C."
    },
    {
      "ques": "HOW WILL YOU PRINT THE VALUE AND ADDRESS OF A POINTER VARIABLE (EXAMPLE INT *P) IN C?",
      "ans": "We can use printf (%x, p); statement to print the address that pointer “p” stores. We can use printf (%d, *p); statement to print the value of the pointer variable"
    },
    {
      "ques": "HOW WILL YOU PRINT THE VALUE AND ADDRESS OF A NORMAL VARIABLE (EXAMPLE INT P) IN C?",
      "ans": "We can use printf (%x, &p); statement to print the address that pointer “p” stores. We can use printf (%d, p); statement to print the value of the normal variable."
    },
    {
      "ques": "WHAT ARE LIBRARY FUNCTIONS AND THEIR USE IN C LANGUAGE? CAN WE WRITE OUR OWN FUNCTIONS AND INCLUDE THEM IN C LIBRARY?",
      "ans": "Library functions in C language are inbuilt functions which are grouped together and placed in a common place called library. The use of library function is to get the pre-defined output instead of writing our own code to get those outputs. Yes. We can write our own functions and include them in C library."
    },
    {
      "ques": "CAN VARIABLE NAME BE START WITH UNDERSCORE IN C?",
      "ans": "Yes. A variable name can start with underscore in C programming language."
    },
    {
      "ques": "CAN VARIABLE NAME HAVE SPECIAL SYMBOLS IN C?",
      "ans": "No. Except underscore (_), other special symbols are not allowed to use for naming the variables in C."
    },
    {
      "ques": "WHAT IS INLINE FUNCTION IN C?",
      "ans": "A normal function becomes inline function when function prototype of the function is prepended with keyword inline. The property of inline function is, compiler inserts the entire body of the function in the place where inline function name is used in the program. Advantage of inline function is, it does not require function call and does not return anything from the function. Disadvantage of inline function is, it increases file size as same function code is copied again and again in the program wherever it is called."
    },
    {
      "ques": " WHY ARE WE USING POINTERS IN C?",
      "ans": "C Pointer is a variable that stores/points the address of another variable. C Pointer is used to allocate memory dynamically (i.e. at run time)"
    },
    {
      "ques": "WHAT IS EXTERN AND STATIC FUNCTION IN C?",
      "ans": "By default, any function that is defined in a C file is extern. These functions can be used in any other source file of the same project which has many other files.When we declare/define a function as static, these functions can’t be used in other files of the same project.Also, if we want to use the same function name in different files of the same project, we can use static function which won’t through any compilation error for duplicate function name."
    },
    {
      "ques": "WHAT IS THE DIFFERENCE BETWEEN POINTER AND ARRAY IN C?",
      "ans": "Array is a collection of variables belongings to the same data type. We can store group of data of same data type in an array.Pointer is a single variable that stores the address of other object/variable."
    },
    {
      "ques": "CAN A VARIABLE BE BOTH VOLATILE AND CONSTANT IN C?",
      "ans": "Yes. A variable can be declared as both volatile and constant in C.Const modifier does not allow changing the value of the variable by internal program. But, it does not mean that value of const variable should not be changed by external code. So, a variable can be both volatile and constant in C."
    },
    {
      "ques": "WHAT IS THE USE OF MAIN() FUNCTION IN C?",
      "ans": "main() function is the function from where execution of any C program begins. So, main() function is mandatory for any C program.Please refer 200 more C interview questions in our C interview home page. You can refer our C programming tutorial also if you need and dig into the C programming to get more knowledge."
    },
    {
      "ques": "What is the description for syntax errors?",
      "ans": "The mistakes when creating a program called syntax errors. Misspelled commands or incorrect case commands, an incorrect number of parameters when called a method /function, data type mismatches can identify as common examples for syntax errors"
    },
    {
      "ques": "What are reserved words with a programming language?",
      "ans": "The words that are part of the slandered C language library are called reserved words. Those reserved words have special meaning and it is not possible to use them for any activity other than its intended functionality."
    },
    {
      "ques": "What is the explanation for the dangling pointer in C?",
      "ans": "When there is a pointer with pointing to a memory address of any variable, but after some time the variable was deleted from the memory location while keeping the pointer pointing to that location."
    },
    {
      "ques": "Describe static function with its usage?",
      "ans": "A function, which has a function definition prefixed with a static keyword is defined as a static function. The static function should call within the same source code."
    },
    {
      "ques": "What is the difference between abs() and fabs() functions?",
      "ans": "Both functions are to retrieve absolute value. abs() is for integer values and fabs() is for floating type numbers. Prototype for abs() is under the library file < stdlib.h > and fabs() is under < math.h >."
    },
    {
      "ques": "Describe Wild Pointers in C?",
      "ans": "Uninitialized pointers in the C code are known as Wild Pointers. These are a point to some arbitrary memory location and can cause bad program behavior or program crash."
    },
    {
      "ques": "What is the difference between ++a and a++?",
      "ans": "‘++a”  is called prefixed increment and the increment will happen first on a variable. ‘a++’ is called postfix increment and the increment happens after the value of a variable used for the operations"
    },
    {
      "ques": "What is the explanation for prototype function in C?",
      "ans": "Prototype function is a declaration of a function with the following information to the compiler. Name of the function. The return type of the function Parameters list of the function"
    },
    {
      "ques": "What is the explanation for cyclic nature of data types in C?",
      "ans": "Some of the data types in C have special characteristic nature when a developer assign value beyond the range of the data type. There will be no any compiler error and the value change according to a cyclic order. This is called as cyclic nature and Char, int, long int data types have this property. Further float, double and long double data types do not have this property. This is called as cyclic nature and Char, int, long int data types have this property. Further float, double and long double data types do not have this property."
    },
    {
      "ques": " There is a practice in coding to keep some code blocks in comment symbols than delete it when debugging. How this affect when debugging?",
      "ans": " This concept called as commenting out and is the way to isolate some part of the code which scans possible reason for the error. Also, this concept helps to save time because if the code is not the reason for the issue it can simply uncomment."
    },
    {
      "ques": " What is a nested loop?",
      "ans": "A loop running within another loop is referred as a nested loop. The first loop is called Outer loop and inside the loop is called Inner loop. Inner loop executes the number of times define an outer loop."
    },
    {
      "ques": "What are the valid places to have keyword “Break”?",
      "ans": "The purpose of the Break keyword is to bring the control out of the code block which is executing. It can appear only in Looping or switch statements."
    },
    {
      "ques": "What is the behavioral difference when include header file in double quotes (“”) and angular braces (<>)?",
      "ans": "When Header file include within double quotes (“”), compiler search first in the working directory for the particular header file. If not found then in the built in the include path. But when Header file include within angular braces (<>), the compiler only search in the working directory for the particular header file."
    },
    {
      "ques": "What is a sequential access file?",
      "ans": " In general programs store data into files and retrieve existing data from files. With the sequential access file such data saved in a sequential pattern. When retrieving data from such files each data need to read one by one until required information find."
    },
    {
      "ques": "What is the method to save data in stack data structure type?",
      "ans": "Data is stored in Stack data structure type using First in Last out (FILO) mechanism. Only top of the stack is accessible at a given instance. Storing mechanism is referred as a PUSH and retrieve is referred as a POP."
    },
    {
      "ques": "What is the significance of C program algorithms?",
      "ans": "The algorithm needs to create first and it contains step by step guidelines on how the solution should create. Also, it contains the steps to consider and the required calculations/operations within the program."
    },
    {
      "ques": "Is it possible to use curly brackets ({}) to enclose single line code in C program?",
      "ans": "Yes, it is working without any error. Some programmers like to use this to organize the code. But the main purpose of curly brackets is to group several lines of codes."
    },
    {
      "ques": "Describe dynamic data structure in C programming language?",
      "ans": "Dynamic data structure is more efficient to the memory. The memory access occurs as needed by the program"
    },
    {
      "ques": "Is that possible to add pointers to each other?",
      "ans": "There is no possibility to add pointers together. Since pointer contains address details there is no way to retrieve the value from this operation."
    },
    {
      "ques": "What is indirection?",
      "ans": "If you have defined a pointer to a variable or any memory object, there is no direct reference to the value of the variable. This is called indirect reference. But when we declare a variable it has a direct reference to the value."
    }
  ],
  "experienceiqs": [
    {
      "ques": "What is the return values of printf and scanf?",
      "ans": "The printf function upon successful return, returns the number of characters printed in output device. So, printf(“A”) will return 1. The scanf function returns the number of input items successfully matched and assigned, which can be fewer than the format specifiers provided. It can also return zero in case of early matching failure."
    },
    {
      "ques": "How to free a block of memory previously allocated without using free?",
      "ans": "If the pointer holding that memory address is passed to realloc with size argument as zero (like realloc(ptr, 0)) the the memory will be released."
    },
    {
      "ques": "How can you print a string containing '%' in printf?",
      "ans": "There are no escape sequence provided for '%' in C. To print '%' one should use '%%', like - printf(“He got 90%% marks in math”);"
    },
    {
      "ques": "What is rvalue and lvalue?",
      "ans": "You can think lvalue as a left side operant in an assignment and rvalue is the right. Also, you can remember lavlue as location. So, the lvalue means a location where you can store any value. Say, for statement i = 20, the value 20 is to be stored in the location or address of the variable i. 20 here is rvalue. Then the 20 = I, statement is not valid. It will result in compilation error “lvalue required” as 20 does not represent any location."
    },
    {
      "ques": " How to convert a string to integer value?",
      "ans": "We can convert a string to integer in two ways. Method 1: int i = atoi(str); Method 2: sscanf(str, %d, &i);"
    },
    {
      "ques": "Which is better #define or enum? ",
      "ans": "Enum values can be automatically generated by compiler if we let it. But all the define values are to be mentioned specifically. Macro is preprocessor, so unlike enum which is a compile time entity, source code has no idea about these macros. So, the enum is better if we use a debugger to debug the code. If we use enum values in a switch and the default case is missing, some compiler will give a warning. Enum always makes identifiers of type int. But the macro let us choose between different integral types. Macro does not specifically maintain scope restriction unlike enum"
    },
    {
      "ques": "What is the difference between const char* p and char const* p?",
      "ans": "In const char* p, the character pointed by pointer variable p is constant. This value can not be changed but we can initialize p with other memory location. It means the character pointed by p is constant but not p. In char const* p, the pointer p is constant not the character referenced by it. So we can't assign p with other location but we can change the value of the character pointed by p."
    },
    {
      "ques": "What is the point of using malloc(0)?",
      "ans": "According to C standard, “ If the size of the space requested is zero, the behavior is implementation defined: either a null pointer is returned, or the behavior is as if the size were some nonzero value, except that the returned pointer shall not be used to access an object”. But there is a benefit of this. The pointer return after malloc(0) will be valid pointer and can be deallocated using free() and it will not crash the program."
    },
    {
      "ques": "What is indirection?",
      "ans": "In C when we use variable name to access the value it is direct access. If we use pointer to get the variable value, it is indirection."
    },
    {
      "ques": "Can math operations be performed on a void pointer?",
      "ans": "No. Pointer addition and subtraction means advancing the pointer by a number of elements. But in case of a void pointer, we don't know fpr sure what it's pointing to, so we don't know the size of what it's pointing to. That is why pointer arithmetic can not be used on void pointers."
    },
    {
      "ques": "How to use scanf to get a complete line(i.e upto '\n') from input?",
      "ans": "Use scanf(%[^\n], str). [^\n] is a regular expression that means until '\n' is encountered."
    },
    {
      "ques": "What is the difference between void foo(void) and void foo()?",
      "ans": "In C, void foo() means a function foo taking an unspecified number of arguments of unspecified type and void foo(void) means a function foo taking no arguments. So, in case of void foo(), if we call this function like foo(1,2,3), the compiler will not raise any error. But the compiler will raise an error in case of void foo(void).When a function is called in C, the caller pushes all of the arguments, in reverse order, into the stack before calling the callee. Using foo() means that the compiler won't care to check the arguments passed to foo. In case of foo(void), before calling the function compiler will specifically check the number of arguments and will raise an error saying the mismatch between number of arguments."
    },
    {
      "ques": "What are the issues that hamper the efficiency in sorting a file?",
      "ans": "The issues are: Length of time required by the programmer in coding a particular sorting program. Amount of machine time necessary for running the particular program.The amount of space necessary for the particular program."
    },
    {
      "ques": "What is the use of volatile keyword? ",
      "ans": "The modifier ‘volatile’ tells the compiler that a variable’s value may be changed in ways not explicitly specified by the program. For example, a global variable’s address may be passed to the operating system’s clock routine and used to hold the system time. In this situation, the contents of the variable are altered without any explicit assignment statements in the program.This is important because most C compilers automatically optimize certain expressions by assuming that a variable’s content is unchanging if it does not occur on the left side of an assignment statement. Thus, it may not be reexamined each time it is referenced. Also, some compilers change the order of evaluation of an expression during the compilation process. The volatile modifier prevents these changes."
    },
    {
      "ques": "What is the difference between",
      "ans": "sprintf(…) writes data to the character array. The C library function sprintf () is used to store formatted data as a string. You can also say the sprintf () function is used to create strings as output using formatted data. The syntax of the sprintf () function is as follows: int sprintf (char *string, const char *form, … ); Here, the *string will stand for the name of the array that will store the output obtained by working on the formatted data. The *form parameter will show the format of the output. printf(…) writes data to the standard output device. The printf function is just a useful function from the standard library of functions that are accessible by C programs. The behavior of printf is defined in the ANSI standard. If the compiler that you’re using conforms to this standard then all the features and properties should be available to you."
    },
    {
      "ques": "When does the compiler not implicitly generate the address of the first element of an array?",
      "ans": "The compiler does not implicitly generate the address of the first element of an array whenever an array name appears: as an operand of the sizeof operato as an operand of & operato as a string literal initialize for a character array.Get a clear understanding of C Array in this engrossing C tutorial."
    },
    {
      "ques": "Is using exit() the same as using return?",
      "ans": "No, the exit() function is used to exit your program and return() controls the operating system.The return statement is used to return from a function and return control to the calling function. If you make a return from the main() function, you are essentially returning control(operating system) to the calling function. In this case, the return statement and exit() function are similar."
    },
    {
      "ques": "What is an lvalue?",
      "ans": "An lvalue is an expression to which a value can be assigned. The lvalue expression is located on the left side of an assignment statement whereas an rvalue is located on the right side of an assignment statement.Each assignment statement must have an lvalue and an rvalue. The lvalue expression must refer a storable variable in memory. It cannot be a constant."
    },
    {
      "ques": "What is the difference between goto, longjmp() and setjmp()?",
      "ans": "A goto statement implements a local jump of program execution whereas the longjmp() and setjmp() functions implement a nonlocal or far jump of the program execution.Generally, a jump in any execution should be avoided because it is not considered good programming practice to use such statements as goto and longjmp in your program.A goto statement simply bypasses code in your program and jumps to a predefined position. To use the goto statement, you give it a labeled position to jump to. This predefined position must be within the same function. You cannot implement goto between functions.However, when your program calls setjmp(), the current state of your program is saved in a structure of type jmp_buf. Later, your program can call the longjmp() function to restore the program’s state as it was when you called setjmp().Unlike the goto statement, the longjmp() and setjmp() functions do not need to be implemented in the same function.There is a major drawback of using these functions: your program, when restored to its previously saved state, it will lose its references to any dynamically allocated memory between the longjmp() and the setjmp(). This means you will waste memory for every malloc() or calloc() you have implemented between your longjmp() and setjmp(), and your program will be inefficient.It is highly recommended that you avoid using functions such as longjmp() and setjmp() because they, like the goto statement, are quite often anindication of poor programming practice.Know more about C Functions in this riveting tutorial."
    },
    {
      "ques": "What do you understand by splay tree?",
      "ans": "Splay tree is a self-balancing Binary Search Tree (BST). The main idea of splay tree is to bring the recently accessed item to root of the tree. This makes the recently searched item to be accessible in O (1) time if accessed again. The idea is to use locality of reference (In a typical application: 80% of the access are to 20% of the items).Imagine a situation, where we have millions or billions of keys and only few of them are accessed frequently, which is very likely in many practical applications.All splay tree operations run in O(log n) time on average, where n is the number of entries in the tree. Any single operation can take Theta(n) time in the worst case.Go through this C Video to get clear understanding of C Programming."
    },
    {
      "ques": "What is Treap?",
      "ans": "Treap is a Balanced Binary Search Tree, but not guaranteed to have height as O(Log n). The idea is to use Randomization and Binary Heap property to maintain balance with high probability. The expected time complexity of search, insert and delete is O(Log n).–>Each node of Treap maintains two values.Key follows standard BST ordering (left is smaller and right is greater)Priority Randomly assigned value that follows Max-Heap property."
    },
    {
      "ques": "How to implement LRU caching scheme? What data structures should be used?",
      "ans": "We are given total possible page numbers that can be referred. We are also given cache (or memory) size (Number of page frames that cache can hold at a time). The LRU caching scheme is to remove the least recently used frame when the cache is full and a new page is referenced which is not there in cache.–>We use two data structures to implement an LRU Cache.A Queue: which is implemented using a doubly linked list. The maximum size of the queue will be equal to the total number of frames available (cache size).The most recently used pages will be near front end and least recently pages will be near rear end.A Hash: with page number as key and address of the corresponding queue node as value. When a page is referenced, the required page may be in the memory. If it is in the memory, we need to detach the node of the list and bring it to the front of the queue.If the required page is not in the memory, we bring that in memory. In simple words, we add a new node to the front of the queue and update the corresponding node address in the hash. If the queue is full, i.e. all the frames are full, we remove a node from the rear of queue, and add the new node to the front of queue."
    },
    {
      "ques": "Suppose, there are two linked lists: L1 and L2 (of same lengths) that intersect at a particular node N1, which is a common endpoint to all other nodes. What are the possibilities to find N1?",
      "ans": "Linear solution is possible. Have two pointers say P1 pointing to the first node of L1 and P2 to that of L2. Traverse through both the lists. If P1 reaches L1’s last node, point it to the first node of L2 and continue traversing.Do the same thing for P2 when it reaches L2’s last node. (By doing this, we are balancing the difference in the length between the linked lists. The shorter one will get over soon and by redirecting to longer list’s head, it will traverse the extra nodes also). Finally, they will meet at the Intersection node."
    },
    {
      "ques": "Given two keys K1 & K2, write an algorithm to print all the elements between them with K1<=K2 in a BST.",
      "ans": "Linear solution is possible without using any extra space.Perform an inorder traversal.Once you find K1, print it and continue traversal now.Print all other traversed elements until you reach K2."
    },
    {
      "ques": "How many stacks are required to implement a Queue.",
      "ans": "Two stacks are required to implement a Queue.For Enqueue: Take two stacks S1 and S2 and perform push on S1.For Dequeue: If S2 is empty, pop all the elements from S1 and push it to S2. The last element you popped from S1 is an element to be dequeued. If S2 is not empty, then pop the top element in it."
    },
    {
      "ques": " What is C language?",
      "ans": "The C programming language is a standardized programming language developed in the early 1970s by Ken Thompson and Dennis Ritchie for use on the UNIX operating system. It has since spread to many other operating systems, and is one of the most widely used programming languages. C is prized for its efficiency, and is the most popular programming language for writing system software, though it is also used for writing applications."
    },
    {
      "ques": "How to reduce a final size of executable?",
      "ans": "Size of the final executable can be reduced using dynamic linking for libraries."
    },
    {
      "ques": "What is the difference between const char* p and char const* p?",
      "ans": "In const char* p, the character pointed by ‘p’ is constant, so u cant change the value of character pointed by p but u can make ‘p’ refer to some other location.In char const* p, the ptr ‘p’ is constant not the character referenced by it, so u cant make ‘p’ to reference to any other location but u can change the value of the char pointed by ‘p’."
    },
    {
      "ques": "What is hashing?",
      "ans": "To hash means to grind up, and that’s essentially what hashing is all about. The heart of a hashing algorithm is a hash function that takes your nice, neat data and grinds it into some random-looking integer.The idea behind hashing is that some data either has no inherent ordering (such as images) or is expensive to compare (such as images). If the data has no inherent ordering, you can’t perform comparison searches."
    },
    {
      "ques": "How can you determine the size of an allocated portion of memory?",
      "ans": "You can’t, really. free() can , but there’s no way for your program to know the trick free() uses. Even if you disassemble the library and discover the trick, there’s no guarantee the trick won’t change with the next release of the compiler."
    },
    {
      "ques": "Can static variables be declared in a header file?",
      "ans": "You can’t declare a static variable without defining it as well (this is because the storage class modifiers static and extern are mutually exclusive). A static variable can be defined in a header file, but this would cause each source file that included the header file to have its own private copy of the variable, which is probably not what was intended."
    },
    {
      "ques": "Can a variable be both const and volatile? ",
      "ans": "Yes. The const modifier means that this code cannot change the value of the variable, but that does not mean that the value cannot be changed by means outside this code."
    },
    {
      "ques": "Can include files be nested?",
      "ans": "Yes. Include files can be nested any number of times. As long as you use precautionary measures , you can avoid including the same file twice. In the past, nesting header files was seen as bad programming practice, because it complicates the dependency tracking function of the MAKE program and thus slows down compilation. Many of today’s popular compilers make up for this difficulty by implementing a concept called precompiled headers, in which all headers and associated dependencies are stored in a precompiled state. Many programmers like to create a custom header file that has #include statements for every header needed for each module. This is perfectly acceptable and can help avoid potential problems relating to #include files, such as accidentally omitting an #include file in a module."
    },
    {
      "ques": "When does the compiler not implicitly generate the address of the first element of an array",
      "ans": "Whenever an array name appears in an expression such as array as an operand of the sizeof operator array as an operand of & operatorarray as a string literal initializer for a character array Then the compiler does not implicitly generate the address of the address of the first element of an array."
    },
    {
      "ques": "What is a null pointer?",
      "ans": "There are times when it’s necessary to have a pointer that doesn’t point to anything. The macro NULL, defined in , has a value that’s guaranteed to be different from any valid pointer. NULL is a literal zero, possibly cast to void* or char*. Some people, notably C++ programmers, prefer to use 0 rather than NULL.The null pointer is used in three ways:1) To stop indirection in a recursive data structure2) As an error value3) As a sentinel value"
    },
    {
      "ques": " What is the difference between text and binary modes?",
      "ans": "Streams can be classified into two types: text streams and binary streams. Text streams are interpreted, with a maximum length of 255 characters. With text streams, carriage return/line feed combinations are translated to the newline n character and vice versa. Binary streams are uninterrupted and are treated one byte at a time with no translation of characters. Typically, a text stream would be used for reading and writing standard text files, printing output to the screen or printer, or receiving input from the keyboard.A binary text stream would typically be used for reading and writing binary files such as graphics or word processing documents, reading mouse input, or reading and writing to the modem."
    },
    {
      "ques": "What is static memory allocation and dynamic memory allocation?",
      "ans": "Static memory allocation: The compiler allocates the required memory space for a declared variable.By using the address of operator,the reserved address is obtained and this address may be assigned to a pointer variable.Since most of the declared variable have static memory,this way of assigning pointer value to a pointer variable is known as static memory allocation. memory is assigned during compilation time.Dynamic memory allocation: It uses functions such as malloc( ) or calloc( ) to get memory dynamically.If these functions are used to get memory dynamically and the values returned by these functions are assingned to pointer variables, such assignments are known as dynamic memory allocation.memory is assined during run time."
    },
    {
      "ques": "When should a far pointer be used?",
      "ans": "Sometimes you can get away with using a small memory model in most of a given program. There might be just a few things that don’t fit in your small data and code segments. When that happens, you can use explicit far pointers and function declarations to get at the rest of memory. A far function can be outside the 64KB segment most functions are shoehorned into for a small-code model. (Often, libraries are declared explicitly far, so they’ll work no matter what code model the program uses.) A far pointer can refer to information outside the 64KB data segment. Typically, such pointers are used with farmalloc() and such, to manage a heap separate from where all the rest of the data lives. If you use a small-data, large-code model, you should explicitly make your function pointers far."
    },
    {
      "ques": "How are pointer variables initialized?",
      "ans": "Pointer variable are initialized by one of the following two waysStatic memory allocation Dynamic memory allocation"
    },
    {
      "ques": "What is the difference between arrays and pointers?",
      "ans": "Pointers are used to manipulate data using the address. Pointers use * operator to access the data pointed to by them.Arrays use subscripted variables to access and manipulate data. Array variables can be equivalently written using pointer expression."
    },
    {
      "ques": "Is using exit() the same as using return?",
      "ans": "No. The exit() function is used to exit your program and return control to the operating system. The return statement is used to return from a function and return control to the calling function. If you issue a return from the main() function, you are essentially returning control to the calling function, which is the operating system. In this case, the return statement and exit() function are similar."
    },
    {
      "ques": "What is a method?",
      "ans": "Method is a way of doing something, especially a systematic way; implies an orderly logical arrangement (usually in steps). "
    },
    {
      "ques": "What is indirection?",
      "ans": "If you declare a variable, its name is a direct reference to its value. If you have a pointer to a variable, or any other object in memory, you have an indirect reference to its value."
    },
    {
      "ques": "What is modular programming?",
      "ans": "If a program is large, it is subdivided into a number of smaller programs that are called modules or subprograms. If a complex problem is solved using more modules, this approach is known as modular programming."
    },
    {
      "ques": "How many levels deep can include files be nested?",
      "ans": "Even though there is no limit to the number of levels of nested include files you can have, your compiler might run out of stack space while trying to include an inordinately high number of files. This number varies according to your hardware configuration and possibly your compiler."
    },
    {
      "ques": "What is the difference between declaring a variable and defining a variable?",
      "ans": "Declaring a variable means describing its type to the compiler but not allocating any space for it. Defining a variable means declaring it and also allocating space to hold the variable. You can also initialize a variable at the time it is defined."
    },
    {
      "ques": "What is an lvalue?",
      "ans": "An lvalue is an expression to which a value can be assigned. The lvalue expression is located on the left side of an assignment statement, whereas an rvalue is located on the right side of an assignment statement. Each assignment statement must have an lvalue and an rvalue. The lvalue expression must reference a storable variable in memory. It cannot be a constant."
    },
    {
      "ques": "Differentiate between an internal static and external static variable?",
      "ans": "An internal static variable is declared inside a block with static storage class whereas an external static variable is declared outside all the blocks in a file.An internal static variable has persistent storage, block scope and no linkage.An external static variable has permanent storage,file scope and internal linkage."
    },
    {
      "ques": "What is the difference between a string and an array?",
      "ans": "An array is an array of anything. A string is a specific kind of an array with a well-known convention to determine its length. There are two kinds of programming languages: those in which a string is just an array of characters, and those in which it’s a special type. In C, a string is just an array of characters (type char), with one wrinkle: a C string always ends with a NUL character.The “value” of an array is the same as the address of (or a pointer to) the first element; so, frequently, a C string and a pointer to char are used to mean the same thing.An array can be any length. If it’s passed to a function, there’s no way the function can tell how long the array is supposed to be, unless some convention is used. The convention for strings is NULL termination; the last character is an ASCII NULL (‘') character."
    },
    {
      "ques": "What is an argument? Differentiate between formal arguments and actual arguments?",
      "ans": "An argument is an entity used to pass the data from calling function to the called function. Formal arguments are the arguments available in the function definition. They are preceded by their own data types. Actual arguments are available in the function call."
    },
    {
      "ques": "When should a type cast not be used?",
      "ans": "A type cast should not be used to override a const or volatile declaration. Overriding these type modifiers can cause the program to fail to run correctly. A type cast should not be used to turn a pointer to one type of structure or data type into another. In the rare events in which this action is beneficial, using a union to hold the values makes the programmer’s intentions clearer."
    },
    {
      "ques": "When is a switch statement better than multiple if statements?",
      "ans": "A switch statement is generally best to use when you have more than two conditional expressions based on a single variable of numeric type."
    },
    {
      "ques": "What is a static function?",
      "ans": "A static function is a function whose scope is limited to the current source file. Scope refers to the visibility of a function or variable. If the function or variable is visible outside of the current source file, it is said to have global, or external, scope. If the function or variable is not visible outside of the current source file, it is said to have local, or static, scope."
    },
    {
      "ques": "What is a pointer variable?",
      "ans": "A pointer variable is a variable that may contain the address of another variable or any valid address in the memory."
    },
    {
      "ques": "What is a pointer value and address?",
      "ans": "A pointer value is a data object that refers to a memory location. Each memory location is numbered in the memory. The number attached to a memory location is called the address of the location."
    },
    {
      "ques": "What is a modulus operator? What are the restrictions of a modulus operator?",
      "ans": "A Modulus operator gives the remainder value. The result of x%y is obtained by (x-(x/y)*y). This operator is applied only to integral operands and cannot be applied to float or double."
    },
    {
      "ques": "Differentiate between a linker and linkage?",
      "ans": "A linker converts an object code into an executable code by linking together the necessary build in functions. The form and place of declaration where the variable is declared in a program determine the linkage of variable."
    },
    {
      "ques": "What is a function and built-in function?",
      "ans": "A large program is subdivided into a number of smaller programs or subprograms. Each subprogram specifies one or more actions to be performed for a large program. such subprograms are functions. The function supports only static and extern storage classes. By default, function assumes extern storage class. functions have global scope. Only register or auto storage class is allowed in the function parameters. Built-in functions that predefined and supplied along with the compiler are known as built-in functions. They are also known as library functions."
    },
    {
      "ques": "Why should I prototype a function?",
      "ans": "A function prototype tells the compiler what kind of arguments a function is looking to receive and what kind of return value a function is going to give back. This approach helps the compiler ensure that calls to a function are made correctly and that no erroneous type conversions are taking place."
    },
    {
      "ques": "What is Polymorphism?",
      "ans": "Polymorphism' is an object oriented term. Polymorphism may be defined as the ability of related objects to respond to the same message with different, but appropriate actions. In other words, polymorphism means taking more than one form. Polymorphism leads to two important aspects in Object Oriented terminology - Function Overloading and Function Overriding. Overloading is the practice of supplying more than one definition for a given function name in the same scope. The compiler is left to pick the appropriate version of the function or operator based on the arguments with which it is called."
    },
    {
      "ques": "What is Operator overloading?",
      "ans": "When an operator is overloaded, it takes on an additional meaning relative to a certain class. But it can still retain all of its old meanings. Examples:1) The operators >> and << may be used for I/O operations because in the header, they are overloaded.2) In a stack class it is possible to overload the + operator so that it appends the contents of one stack to the contents of another. But the + operator still retains its original meaning relative to other types of data."
    },
    {
      "ques": " What is a stack?",
      "ans": "A stack is one form of a data structure. Data is stored in stacks using the FILO (First In Last Out) approach. At any particular instance, only the top of the stack is accessible, which means that in order to retrieve data that is stored inside the stack, those on the upper part should be extracted first. Storing data in a stack is also referred to as a PUSH, while data retrieval is referred to as a POP."
    },
    {
      "ques": "What is a sequential access file?",
      "ans": "When writing programs that will store and retrieve data in a file, it is possible to designate that file into different forms. A sequential access file is such that data are saved in sequential order: one data is placed into the file after another. To access a particular data within the sequential access file, data has to be read one data at a time, until the right one is reached."
    },
    {
      "ques": "What is variable initialization and why is it important?",
      "ans": "This refers to the process wherein a variable is assigned an initial value before it is used in the program. Without initialization, a variable would have an unknown value, which can lead to unpredictable outputs when used in computations or other operations."
    },
    {
      "ques": "How do you construct an increment statement or decrement statement in C?",
      "ans": "There are actually two ways you can do this. One is to use the increment operator ++ and decrement operator –. For example, the statement x++ means to increment the value of x by 1. Likewise, the statement x –means to decrement the value of x by 1. Another way of writing increment statements is to use the conventional + plus sign or – minus sign. In the case of x++, another way to write it is x = x +1"
    },
    {
      "ques": "What is the difference between Call by Value and Call by Reference?",
      "ans": "When using Call by Value, you are sending the value of a variable as parameter to a function, whereas Call by Reference sends the address of the variable. Also, under Call by Value, the value in the parameter is not affected by whatever operation that takes place, while in the case of Call by Reference, values can be affected by the process within the function."
    },
    {
      "ques": "Some coders debug their programs by placing comment symbols on some codes instead of deleting it. How does this aid in debugging?",
      "ans": "Placing comment symbols /* */ around a code, also referred to as “commenting out”, is a way of isolating some codes that you think maybe causing errors in the program, without deleting the code. The idea is that if the code is in fact correct, you simply remove the comment symbols and continue on. It also saves you time and effort on having to retype the codes if you have deleted it in the first place."
    },
    {
      "ques": " Differentiate Source Codes from Object Codes",
      "ans": "Source codes are codes that were written by the programmer. It is made up of the commands and other English-like keywords that are supposed to instruct the computer what to do. However, computers would not be able to understand source codes. Therefore, source codes are compiled using a compiler. The resulting outputs are object codes, which are in a format that can be understood by the computer processor. In C programming, source codes are saved with the file extension .C, while object codes are saved with the file extension .OBJ"
    },
    {
      "ques": " In C programming, how do you insert quote characters (‘ and “) into the output screen?",
      "ans": "This is a common problem for beginners because quotes are normally part of a printf statement. To insert the quote character as part of the output, use the format specifiers (for single quote), and  (for double quote)."
    },
    {
      "ques": "What is the use of a ‘0’ character?",
      "ans": "It is referred to as a terminating null character, and is used primarily to show the end of a string value."
    },
    {
      "ques": " What is the difference between the = symbol and == symbol?",
      "ans": "The = symbol is often used in mathematical operations. It is used to assign a value to a given variable. On the other hand, the == symbol, also known as “equal to” or “equivalent to”, is a relational operator that is used to compare two values."
    },
    {
      "ques": " What is the modulus operator?",
      "ans": "The modulus operator outputs the remainder of a division. It makes use of the percentage (%) symbol. For example: 10 % 3 = 1, meaning when you divide 10 by 3, the remainder is 1"
    },
    {
      "ques": "What is a nested loop?",
      "ans": "A nested loop is a loop that runs within another loop. Put it in another sense, you have an inner loop that is inside an outer loop. In this scenario, the inner loop is performed a number of times as specified by the outer loop. For each turn on the outer loop, the inner loop is first performed"
    },
    {
      "ques": " Which of the following operators is incorrect and why? ( >=, <=, <>, ==)",
      "ans": "<> is incorrect. While this operator is correctly interpreted as “not  equal to” in writing conditional statements, it is not the proper operator to be used in C programming. Instead, the operator  !=  must be used to indicate “not equal to” condition."
    },
    {
      "ques": "Compare and contrast compilers from interpreters.",
      "ans": "Compilers and interpreters often deal with how program codes are executed. Interpreters execute program codes one line at a time, while compilers take the program as a whole and convert it into object code, before executing it. The key difference here is that in the case of interpreters, a program may encounter syntax errors in the middle of execution, and will stop from there. On the other hand, compilers check the syntax of the entire program and will only proceed to execution when no syntax errors are found."
    },
    {
      "ques": "How do you declare a variable that will hold string values?",
      "ans": "The char keyword can only hold 1 character value at a time. By creating an array of characters, you can store string values in it. Example: “char MyName[50]; ” declares a string variable named MyName that can hold a maximum of 50 characters"
    },
    {
      "ques": "Can the curly brackets { } be used to enclose a single line of code?",
      "ans": "While curly brackets are mainly used to group several lines of codes, it will still work without error if you used it for a single line. Some programmers prefer this method as a way of organizing codes to make it look clearer, especially in conditional statements. "
    },
    {
      "ques": "What are header files and what are its uses in C programming?",
      "ans": "Header files are also known as library files. They contain two essential things: the definitions and prototypes of functions being used in a program. Simply put, commands that you use in C programming are actually functions that are defined from within each header files. Each header file contains a set of functions. For example: stdio.h is a header file that contains definition and prototypes of commands like printf and scanf. "
    },
    {
      "ques": "What is syntax error?",
      "ans": "Syntax errors are associated with mistakes in the use of a programming language. It maybe a command that was misspelled or a command that must was entered in lowercase mode but was instead entered with an upper case character. A misplaced symbol, or lack of symbol, somewhere within a line of code can also lead to syntax error."
    },
    {
      "ques": "What are variables and it what way is it different from constants?",
      "ans": "Variables and constants may at first look similar in a sense that both are identifiers made up of one character or more characters (letters, numbers and a few allowable symbols). Both will also hold a particular value.  Values held by a variable can be altered throughout the program, and can be used in most operations and computations. Constants are given values at one time only, placed at the beginning of a program. This value is not altered in the program. For example, you can assigned a constant named PI and give it a value 3.1415  .  You can then use it as PI in the program, instead of having to write 3.1415 each time you need it. "
    },
    {
      "ques": "How do you access the values within an array?",
      "ans": "Arrays contain a number of elements, depending on the size you gave it during variable declaration. Each element is assigned a number from 0 to number of elements-1. To assign or retrieve the value of a particular element, refer to the element number. For example: if you have a declaration that says “intscores[5];”, then you have 5 accessible elements, namely: scores[0], scores[1], scores[2], scores[3] and scores[4]."
    },
    {
      "ques": " Can I use  “int” data type to store the value 32768? Why?",
      "ans": "No. “int” data type is capable of storing values from -32768 to 32767. To store 32768, you can use “long int” instead. You can also use “unsigned int”, assuming you don’t intend to store negative values."
    },
    {
      "ques": "Can two or more operators such as n and t be combined in a single line of program code?",
      "ans": "Yes, it’s perfectly valid to combine operators, especially if the need arises. For example: you can have a code like ” printf (“Hello n n’World'”) ” to output the text “Hello” on the first line and “World” enclosed in single quotes to appear on the next two lines. "
    },
    {
      "ques": "Why is it that not all header files are declared in every C program?",
      "ans": "The choice of declaring a header file at the top of each C program would depend on what commands/functions you will be using in that program. Since each header file contains different function definitions and prototype, you would be using only those header files that would contain the functions you will need. Declaring all header files in every program would only increase the overall file size and load of the program, and is not considered a good programming style."
    },
    {
      "ques": "When is the “void” keyword used in a function?",
      "ans": "When declaring functions, you will decide whether that function would be returning a value or not. If that function will not return a value, such as when the purpose of a function is to display some outputs on the screen, then “void” is to be placed at the leftmost part of the function header. When a return value is expected after the function execution, the data type of the return value is placed instead of “void”."
    },
    {
      "ques": "What are compound statements?",
      "ans": "Compound statements are made up of two or more program statements that are executed together. This usually occurs while handling conditions wherein a series of statements are executed when a TRUE or FALSE is evaluated. Compound statements can also be executed within a loop. Curly brackets { } are placed before and after compound statements."
    },
    {
      "ques": "What is the significance of an algorithm to C programming?",
      "ans": "Before a program can be written, an algorithm has to be created first. An algorithm provides a step by step procedure on how a solution can be derived. It also acts as a blueprint on how a program will start and end, including what process and computations are involved."
    },
    {
      "ques": " What is the advantage of an array over individual variables?",
      "ans": "When storing multiple related data, it is a good idea to use arrays. This is because arrays are named using only 1 word followed by an element number. For example: to store the 10 test results of 1 student, one can use 10 different variable names (grade1, grade2, grade3… grade10). With arrays, only 1 name is used, the rest are accessible through the index name (grade[0], grade[1], grade[2]… grade[9])."
    },
    {
      "ques": "What is wrong in this statement?  scanf(“%d”,whatnumber);",
      "ans": "An ampersand & symbol must be placed before the variable name whatnumber. Placing & means whatever integer value is entered by the user is stored at the “address” of the variable name. This is a common mistake for programmers, often leading to logical errors."
    },
    {
      "ques": "How do you generate random numbers in C?",
      "ans": "Random numbers are generated in C using the rand() command. For example: anyNum = rand() will generate any integer number beginning from 0, assuming that anyNum is a variable of type integer."
    },
    {
      "ques": "What could possibly be the problem if a valid function name such as tolower() is being reported by the C compiler as undefined?",
      "ans": "The most probable reason behind this error is that the header file for that function was not indicated at the top of the program. Header files contain the definition and prototype for functions and commands used in a C program. In the case of “tolower()”, the code “#include <ctype.h>” must be present at the beginning of the program."
    },
    {
      "ques": "What are comments and how do you insert it in a C program?",
      "ans": "Comments are a great way to put some remarks or description in a program. It can serves as a reminder on what the program is all about, or a description on why a certain code or function was placed there in the first place. Comments begin with /* and ended by */ characters. Comments can be a single line, or can even span several lines. It can be placed anywhere in the program."
    },
    {
      "ques": "What is debugging?",
      "ans": "Debugging is the process of identifying errors within a program. During program compilation, errors that are found will stop the program from executing completely. At this state, the programmer would look into the possible portions where the error occurred. Debugging ensures the removal of errors, and plays an important role in ensuring that the expected program output is met."
    },
    {
      "ques": "What does the && operator do in a program code?",
      "ans": "The && is also referred to as AND operator. When using this operator, all conditions specified must be TRUE before the next action can be performed. If you have 10 conditions and all but 1 fails to evaluate as TRUE, the entire condition statement is already evaluated as FALSE"
    },
    {
      "ques": "What does the format %10.2 mean when included in a printf statement?",
      "ans": "This format is used for two things: to set the number of spaces allotted for the output number and to set the number of decimal places. The number before the decimal point is for the allotted space, in this case it would allot 10 spaces for the output number. If the number of space occupied by the output number is less than 10, addition space characters will be inserted before the actual output number. The number after the decimal point sets the number of decimal places, in this case, it’s 2 decimal spaces. "
    },
    {
      "ques": "What are logical errors and how does it differ from syntax errors?",
      "ans": "Program that contains logical errors tend to pass the compilation process, but the resulting output may not be the expected one. This happens when a wrong formula was inserted into the code, or a wrong sequence of commands was performed. Syntax errors, on the other hand, deal with incorrect commands that are misspelled or not recognized by the compiler."
    },
    {
      "ques": "What are the different types of control structures in programming?",
      "ans": "There are 3 main control structures in programming: Sequence, Selection and Repetition. Sequential control follows a top to bottom flow in executing a program, such that step 1 is first perform, followed by step 2, all the way until the last step is performed. Selection deals with conditional statements, which mean codes are executed depending on the evaluation of conditions as being TRUE or FALSE. This also means that not all codes may be executed, and there are alternative flows within. Repetitions are also known as loop structures, and will repeat one or two program statements set by a counter."
    },
    {
      "ques": "What is || operator and how does it function in a program?",
      "ans": "The || is also known as the OR operator in C programming. When using || to evaluate logical conditions, any condition that evaluates to TRUE will render the entire condition statement as TRUE."
    },
    {
      "ques": "Can the “if” function be used in comparing strings?",
      "ans": "No. “if” command can only be used to compare numerical values and single character values. For comparing string values, there is another function called strcmp that deals specifically with strings."
    },
    {
      "ques": "What are preprocessor directives?",
      "ans": "Preprocessor directives are placed at the beginning of every C program. This is where library files are specified, which would depend on what functions are to be used in the program. Another use of preprocessor directives is the declaration of constants.Preprocessor directives begin with the # symbol."
    },
    {
      "ques": "What is wrong with this statement? myName = Robin;",
      "ans": "You cannot use the = sign to assign values to a string variable. Instead, use the strcpy function. The correct statement would be: strcpy(myName, Robin);"
    },
    {
      "ques": "How do you determine the length of a string value that was stored in a variable?",
      "ans": "To get the length of a string value, use the function strlen(). For example, if you have a variable named FullName, you can get the length of the stored string value by using this statement: I = strlen(FullName); the variable I will now have the character length of the string value."
    },
    {
      "ques": "Is it possible to initialize a variable at the time it was declared?",
      "ans": "Yes, you don’t have to write a separate assignment statement after the variable declaration, unless you plan to change it later on.  For example: char planet[15] = “Earth”; does two things: it declares a string variable named planet, then initializes it with the value “Earth”."
    },
    {
      "ques": "Why is C language being considered a middle level language?",
      "ans": "This is because C language is rich in features that make it behave like a high level language while at the same time can interact with hardware using low level methods. The use of a well structured approach to programming, coupled with English-like words used in functions, makes it act as a high level language. On the other hand, C can directly access memory structures similar to assembly language routines. "
    },
    {
      "ques": "What are the different file extensions involved when programming in C?",
      "ans": "Source codes in C are saved with .C file extension. Header files or library files have the .H file extension. Every time a program source code is successfully compiled, it creates an .OBJ object file, and an executable .EXE file. "
    },
    {
      "ques": "What are reserved words?",
      "ans": "Reserved words are words that are part of the standard C language library. This means that reserved words have special meaning and therefore cannot be used for purposes other than what it is originally intended for. Examples of reserved words are int, void, and return."
    },
    {
      "ques": " What are linked list?",
      "ans": "A linked list is composed of nodes that are connected with another. In C programming, linked lists are created using pointers. Using linked lists is one efficient way of utilizing memory for storage."
    },
    {
      "ques": "What is FIFO?",
      "ans": "In C programming, there is a data structure known as queue. In this structure, data is stored and accessed using FIFO format, or First-In-First-Out. A queue represents a line wherein the first data that was stored will be the first one that is accessible as well."
    },
    {
      "ques": "What are binary trees?",
      "ans": "Binary trees are actually an extension of the concept of linked lists. A binary tree has two pointers, a left one and a right one. Each side can further branch to form additional nodes, which each node having two pointers as well."
    },
    {
      "ques": "Not all reserved words are written in lowercase. TRUE or FALSE?",
      "ans": "FALSE. All reserved words must be written in lowercase; otherwise the C compiler would interpret this as unidentified and invalid."
    },
    {
      "ques": "What is the difference between the expression ++a and a++?",
      "ans": "In the first expression, the increment would happen first on variable a, and the resulting value will be the one to be used. This is also known as a prefix increment. In the second expression, the current value of variable a would the one to be used in an operation, before the value of a itself is incremented. This is also known as postfix increment."
    },
    {
      "ques": "What would happen to X in this expression: X += 15;  (assuming the value of X is 5)",
      "ans": "X +=15 is a short method of writing X = X + 15, so if the initial value of X is 5, then 5 + 15 = 20."
    },
    {
      "ques": " In C language, the variables NAME, name, and Name are all the same. TRUE or FALSE?",
      "ans": "FALSE. C language is a case sensitive language. Therefore, NAME, name and Name are three uniquely different variables."
    },
    {
      "ques": "What is an endless loop?",
      "ans": "An endless loop can mean two things. One is that it was designed to loop continuously until the condition within the loop is met, after which a break function would cause the program to step out of the loop. Another idea of an endless loop is when an incorrect loop condition was written, causing the loop to run erroneously forever. Endless loops are oftentimes referred to as infinite loops"
    },
    {
      "ques": "What is a program flowchart and how does it help in writing a program?",
      "ans": "A flowchart provides a visual representation of the step by step procedure towards solving a given problem. Flowcharts are made of symbols, with each symbol in the form of different shapes. Each shape may represent a particular entity within the entire program structure, such as a process, a condition, or even an input/output phase."
    },
    {
      "ques": "What is wrong with this program statement? void = 10;",
      "ans": "The word void is a reserved word in C language. You cannot use reserved words as a user-defined variable."
    },
    {
      "ques": "Is this program statement valid? INT = 10.50;",
      "ans": "Assuming that INT is a variable of type float, this statement is valid. One may think that INT is a reserved word and must not be used for other purposes. However, recall that reserved words are express in lowercase, so the C compiler will not interpret this as a reserved word."
    },
    {
      "ques": "What are actual arguments?",
      "ans": "When you create and use functions that need to perform an action on some given values, you need to pass these given values to that function. The values that are being passed into the called function are referred to as actual arguments."
    },
    {
      "ques": "What is output redirection?",
      "ans": "It is the process of transferring data to an alternative output source other than the display screen. Output redirection allows a program to have its output saved to a file. For example, if you have a program named COMPUTE, typing this on the command line as COMPUTE >DATA can accept input from the user, perform certain computations, then have the output redirected to a file named DATA, instead of showing it on the screen."
    },
    {
      "ques": "What are run-time errors?",
      "ans": "These are errors that occur while the program is being executed. One common instance wherein run-time errors can happen is when you are trying to divide a number by zero. When run-time errors occur, program execution will pause, showing which program line caused the error. "
    },
    {
      "ques": "What is the difference between functions abs() and fabs()?",
      "ans": "These 2 functions basically perform the same action, which is to get the absolute value of the given value. Abs() is used for integer values, while fabs() is used for floating type numbers. Also, the prototype for abs() is under <stdlib.h>, while fabs() is under <math.h>."
    },
    {
      "ques": "What are formal parameters?",
      "ans": "In using functions in a C program, formal parameters contain the values that were passed by the calling function. The values are substituted in these formal parameters and used in whatever operations as indicated within the main body of the called function."
    },
    {
      "ques": "What are control structures?",
      "ans": "Control structures take charge at which instructions are to be performed in a program. This means that program flow may not necessarily move from one statement to the next one, but rather some alternative portions may need to be pass into or bypassed from, depending on the outcome of the conditional statements. "
    },
    {
      "ques": "When is a “switch” statement preferable over an “if” statement?",
      "ans": "The switch statement is best used when dealing with selections based on a single variable or expression. However, switch statements can only evaluate integer and character data types."
    },
    {
      "ques": " What are global variables and how do you declare them?",
      "ans": "Global variables are variables that can be accessed and manipulated anywhere in the program. To make a variable global, place the variable declaration on the upper portion of the program, just after the preprocessor directives section."
    },
    {
      "ques": "What are enumerated types?",
      "ans": "Enumerated types allow the programmer to use more meaningful words as values to a variable. Each item in the enumerated type variable is actually associated with a numeric code. For example, one can create an enumerated type variable named DAYS whose values are Monday, Tuesday… Sunday."
    },
    {
      "ques": "What does the function toupper() do?",
      "ans": "It is used to convert any letter to its upper case mode. Toupper() function prototype is declared in <ctype.h>. Note that this function will only convert a single character, and not an entire string."
    },
    {
      "ques": " Is it possible to have a function as a parameter in another function?",
      "ans": "Yes, that is allowed in C programming. You just need to include the entire function prototype into the parameter field of the other function where it is to be used."
    },
    {
      "ques": "What are multidimensional arrays?",
      "ans": "Multidimensional arrays are capable of storing data in a two or more dimensional structure. For example, you can use a 2 dimensional array to store the current position of pieces in a chess game, or position of players in a tic-tac-toe program."
    },
    {
      "ques": "Which function in C can be used to append a string to another string?",
      "ans": "The strcat function. It takes two parameters, the source string and the string value to be appended to the source string."
    },
    {
      "ques": "What is the difference between functions getch() and getche()?",
      "ans": "Both functions will accept a character input value from the user. When using getch(), the key that was pressed will not appear on the screen, and is automatically captured and assigned to a variable. When using getche(), the key that was pressed by the user will appear on the screen, while at the same time being assigned to a variable. "
    },
    {
      "ques": "Dothese two program statements perform the same output? 1) scanf(%c, &letter);  2) letter=getchar()",
      "ans": "Yes, they both do the exact same thing, which is to accept the next key pressed by the user and assign it to variable named letter."
    },
    {
      "ques": "What are structure types in C?",
      "ans": "Structure types are primarily used to store records. A record is made up of related fields. This makes it easier to organize a group of related data."
    },
    {
      "ques": "What does the characters r and w mean when writing programs that will make use of files?",
      "ans": "r means read and will open a file as input wherein data is to be retrieved. w means write, and will open a file for output. Previous data that was stored on that file will be erased."
    },
    {
      "ques": "What is the difference between text files and binary files?",
      "ans": "Text files contain data that can easily be understood by humans. It includes letters, numbers and other characters. On the other hand, binary files contain 1s and 0s that only computers can interpret. "
    },
    {
      "ques": "is it possible to create your own header files?",
      "ans": "Yes, it is possible to create a customized header file. Just include in it the function prototypes that you want to use in your program, and use the #include directive followed by the name of your header file."
    },
    {
      "ques": " What is dynamic data structure?",
      "ans": "Dynamic data structure provides a means for storing data more efficiently into memory. Using dynamic memory allocation, your program will access memory spaces as needed. This is in contrast to static data structure, wherein the programmer has to indicate a fix number of memory space to be used in the program."
    },
    {
      "ques": "What are the different data types in C?",
      "ans": "The basic data types are int, char, and float. Int is used to declare variables that will be storing integer values. Float is used to store real numbers. Char can store individual character values."
    },
    {
      "ques": "What is the general form of a C program?",
      "ans": "A C program begins with the preprocessor directives, in which the programmer would specify which header file and what constants (if any) to be used. This is followed by the main function heading. Within the main function lies the variable declaration and program statement."
    },
    {
      "ques": "What is the advantage of a random access file?",
      "ans": "If the amount of data stored in a file is fairly large, the use of random access will allow you to search through it quicker. If it had been a sequential access file, you would have to go through one record at a time until you reach the target data. A random access file lets you jump directly to the target address where data is located. "
    },
    {
      "ques": "In a switch statement, what will happen if a break statement is omitted?",
      "ans": "If a break statement was not placed at the end of a particular case portion? It will move on to the next case portion, possibly causing incorrect output."
    },
    {
      "ques": "Describe how arrays can be passed to a user defined function",
      "ans": "One thing to note is that you cannot pass the entire array to a function. Instead, you pass to it a pointer that will point to the array first element in memory. To do this, you indicate the name of the array without the brackets."
    },
    {
      "ques": "What are pointers?",
      "ans": "Pointers point to specific areas in the memory. Pointers contain the address of a variable, which in turn may contain a value or even an address to another memory."
    },
    {
      "ques": "Can you pass an entire structure to functions?",
      "ans": "Yes, it is possible to pass an entire structure to a function in a call by method style. However, some programmers prefer declaring the structure globally, then pass a variable of that structure type to a function. This method helps maintain consistency and uniformity in terms of argument type."
    },
    {
      "ques": "What is gets() function?",
      "ans": "The gets() function allows a full line data entry from the user. When the user presses the enter key to end the input, the entire line of characters is stored to a string variable. Note that the enter key is not included in the variable, but instead a null terminator 0 is placed after the last character"
    },
    {
      "ques": "The % symbol has a special use in a printf statement. How would you place this character as part of the output on the screen? ",
      "ans": "You can do this by using %% in the printf statement. For example, you can write printf(“10%%”) to have the output appear as 10% on the screen. "
    },
    {
      "ques": "How do you search data in a data file using random access method? ",
      "ans": "Use the fseek() function to perform random access input/ouput on a file. After the file was opened by the fopen() function, the fseek would require three parameters to work: a file pointer to the file, the number of bytes to search, and the point of origin in the file."
    },
    {
      "ques": "Are comments included during the compilation stage and placed in the EXE file as well?",
      "ans": "No, comments that were encountered by the compiler are disregarded. Comments are mostly for the guidance of the programmer only and do not have any other significant use in the program functionality"
    },
    {
      "ques": " Is there a built-in function in C that can be used for sorting data? ",
      "ans": "Yes, use the qsort() function. It is also possible to create user defined functions for sorting, such as those based on the balloon sort and bubble sort algorithm."
    },
    {
      "ques": "What are the advantages and disadvantages of a heap?",
      "ans": "Storing data on the heap is slower than it would take when using the stack. However, the main advantage of using the heap is its flexibility. That’s because memory in this structure can be allocated and remove in any particular order. Slowness in the heap can be compensated if an algorithm was well designed and implemented. "
    },
    {
      "ques": "How do you convert strings to numbers in C? ",
      "ans": "You can write you own functions to do string to number conversions, or instead use C’s built in functions. You can use atof to convert to a floating point value, atoi to convert to an integer value, and atol to convert to a long integer value."
    },
    {
      "ques": "What is the use of a semicolon (;) at the end of every program statement?",
      "ans": "It has to do with the parsing process and compilation of the code. A semicolon acts as a delimiter, so that the compiler knows where each statement ends, and can proceed to divide the statement into smaller elements for syntax checking."
    },
    {
      "ques": "What is a preprocessor?",
      "ans": "Preprocessor is a directive to the compiler to perform certain things before the actual compilation process begins."
    },
    {
      "ques": "What are command line arguments?",
      "ans": "The arguments which we pass to the main() function while executing the program are called as command line arguments. The parameters are always strings held in the second argument (below in args) of the function which is array of character pointers. First argument represents the count of arguments (below in count) and updated automatically by operating system."
    },
    {
      "ques": "What is a NULL statement?",
      "ans": "A null statement is no executable statements such as ; (semicolon)"
    },
    {
      "ques": "What is a static function?",
      "ans": "A function’s definition prefixed with static keyword is called as a static function. You would make a function static if it should be called only within the same source code."
    },
    {
      "ques": "Define an array.",
      "ans": "Array is collection of similar data items under a common name."
    },
    {
      "ques": "What are enumerations?",
      "ans": "Enumerations are list of integer constants with name. Enumerators are defined with the keyword enum."
    },
    {
      "ques": "What is a variable?",
      "ans": "A variable is the name storage."
    }
  ],
  "fresherresume": [
    {
      "freshresume": "",
      "freshtit": "Entry Level"
    },
    {
      "freshresume": "",
      "freshtit": "Junior Level"
    },
    {
      "freshresume": "",
      "freshtit": "Smart"
    }
  ],
  "experienceresume": [
    {
      "expresume": "",
      "exprestit": "Smart"
    },
    {
      "expresume": "",
      "exprestit": "Professional"
    },
    {
      "expresume": "",
      "exprestit": "Entry Level"
    }
  ],
  "definitions": [
    {
      "ques": "Features of C language",
      "ans": "It is a robust language with rich set of built-in functions and operators that can be used to write any complex program.The C compiler combines the capabilities of an assembly language with features of a high-level language.Programs Written in C are efficient and fast. This is due to its variety of data type and powerful operators.It is many time faster than BASIC.C is highly portable this means that programs once written can be run on another machines with little or no modification.Another important feature of C program, is its ability to extend itself.A C program is basically a collection of functions that are supported by C library. We can also create our own function and add it to C library.C language is the most widely used language in operating systems and embedded system development today"
    },
    {
      "ques": "computer and parts of computer",
      "ans": "Computer is a device capable of performing computations and making logical decisions at speed of millions and even billions of times faster than human being can.Or Computer is an electronics device which performs arithmetic and logical operationsA /n computer system made of two major components.  They are:Software,Hardware."
    },
    {
      "ques": "Need of software",
      "ans": "The need of software is to implement any specific task in a computer i.e. if you want to solve your problem through computer, then you have to develop software according to your problem and you have to install that software in your system. Then your system is ready to serve your requirement./n/n Note: Generally softwares are developed by using computer programming languages like C, C++, JAVA, .NET etc."
    },
    {
      "ques": "SOFTWARE and its types",
      "ans": "The software is the collection of programs that allow the hardware to do its job. Computer software is divided into two broad categories./n 1. System Software /n 2. Application software SYSTEM \n\n\n\nSOFTWARE:\n System software consists of programs that manage the hardware resources from computer and perform required information processing tasks.  These programs are divided into 3 classes. \n 1. The operating system, \n 2. System support, \n 3. System development \n\n. APPLICATION SOFTWARE:/n/n Application software is broken into two classes.\n 1. General purpose software,\n 2. Application specific software./n/n General purpose software is purchased from a software developer and can be used for more than one word application processors.  Data base management system etc./n/n Application specific software can be used only for its intended purpose./n/n A general ledger system used by accountant and a material requirement.  Planning system used by a manufacturing organization are the examples of application specific software."
    },
    {
      "ques": "programming language",
      "ans": "A programming language is usually split into the two components of syntax (form) and semantics (meaning).Some languages are defined by a specification document (for example, the C programming language is specified by an ISO Standard).n/n To write a program for a computer we must use a computer language.  A summary of computer languages as shown below Machine language (1940S) /n symbolic language(1950S)/n high level language (1960S)."
    },
    {
      "ques": "MACHINE LEVEL LANGUAGE:",
      "ans": "The only language understood by computer is machine level language. \n Each computer has its own machine language, which is made streams of Os and 1’s because the internal circuits of a computer are made of switches, transistors and other electronic devices that can be in one of two states off and on./n In this the off state is represented by “O” and the on state is represented by 1."
    },
    {
      "ques": "SYMBOLIC LEVEL LANGUAGE",
      "ans": "1)Symbolic language uses symbols or mnemonics to represent the various machine language instructions.  It is developed by admiral grace happen in the early 1950s.\n 2)It is also called as Assembly level language.\n 3)Computer does not understand symbolic language.  So it must be translated to the machine language.\n 4)A special program called as assembler translates symbolic code into machine language."
    },
    {
      "ques": "HIGH LEVEL LANGUAGE",
      "ans": "1)The languages which are developed in general language (English) are called as high level languages.\n 2)High level having greater efficiency.\n 3)These are portable languages.\n 4)FORTAN, COBOL, C, C++, JAVA etc are the examples of high level languages.\n 5)Machine does not understand high level languages directly.  So to convert high level languages into its equivalent machine level languages translators are used.\n 6)The translators are interpreter and compiler."
    },
    {
      "ques": " CREATIES AND RUNNING PROGRAMMS",
      "ans": "It is the job of the programmer to write test the program.  There are four steps in this process.\n 1)Writing and editing the program,\n 2)Competing the program,\n 3)Linking the program with equaled library modules,\n 4)Executing the program."
    },
    {
      "ques": "PROGRAM DEVELOPMENT STEPS",
      "ans": "TO DEVELOP A PROGRAM, A PROGRAMMER MUST COMPLETE THE FOLLOWING STEPS\n\n 1.Understand the problem\n2.Develop a solution using structure charts and either flow charts or Pseudo code.\n3.Write the program.\n4.Test the program."
    },
    {
      "ques": "difference between language and software",
      "ans": "A language is a specification which is used to develop the softwares. Software is a designed thing which is having a specified functionality."
    },
    {
      "ques": "different approaches we have to design the languages",
      "ans": "Basically we have three types approaches to design the languages\n\n 1.Monolithic \nEX: machine level language, Assembly level language\n\n 2. Procedure or structure oriented \n Ex: C language\n\n 3.Object oriented\nEx: java, c++"
    },
    {
      "ques": "source code and Executable code	",
      "ans": "Source code:\n Group of instructions which are present in high level language is known as source code. Generally source code visible in English\n \n Executable code:\n Group of instructions which are present in low level language is known as Executable code. Generally Executable code visible in machine language format"
    },
    {
      "ques": "Characteristics of 'C' Language",
      "ans": "We briefly list some of C's characteristics that define the language and also have lead to its popularity as a programming language.\n\n1. General purpose language\n2. Robust language.\n3. Case sensitive language.\n4.Structure oriented language. (or) POP language (procedure orientated programming).\n5. compiler\n6. Programs written in C are efficient and fast.\n7. Many time faster than BASIC.\n8. Small size\n9. C is platform dependent\n10. Extensive use of function calls.\n11. Low level (Bitwise) programming readily available\n12. Pointer implementation - extensive use of pointers for memory, array, structures and functions.\n\nC has now become a widely used professional language for various reasons.\n1.It has high-level constructs.\n2.It can handle low-level activities.\n3.It produces efficient programs.\n4.It can be compiled on a variety of computers."
    },
    {
      "ques": "APPLICATIONS of “C” LANGUAGE",
      "ans": "C language mainly used for\n\n 1)Language compilers and interpreters\n2)Device drivers\n3)Telecom applications\n 4)Network programming\n 5)Digital Signal processing applications\n6)Database applications\n7)Text editors."
    },
    {
      "ques": "Procedure oriented programming",
      "ans": "1)Prime focus is on functions and procedures that operate on data.\n2)Large programs are divided into smaller units called functions.\n3)Data move freely around the systems from one function to another.\n4)Data and the functions that act up to it are treated as separate entities.\n5)Program design follows 'top down approach'."
    },
    {
      "ques": "current version of C language",
      "ans": "CIX(C99)"
    },
    {
      "ques": "Algorithm and its properties",
      "ans": "Algorithm:\n\n1.The word algorithm is derived from the name of the Persian mathematician Al Khwarizmi.\n2. An algorithm can be defined as a step-by-step procedure for solving a problem.\n\n Properties:\n An algorithm has five important properties\n 1)Finiteness:\nAn algorithm terminates after a finite number of steps\n 2)Definiteness:\nEach step in an algorithm is unambiguous. This means that the action specified by the step cannot be interpreted in multiple ways and can be performed without any confusion.\n3)Input:\nAn algorithm accepts zero or more inputs\n4)Output:\nAn algorithm produces at least one output./n5)Effectiveness:An algorithm consists of basic instructions that are realizable. This means that the instructions can be performed by using the inputs in a finite amount of time."
    },
    {
      "ques": "Types of tokens in c language",
      "ans": "The smallest individual units of a C- program are known as Tokens. Basically c tokens are classified into four types\n\n1. Key word\n Key words are the pre defined words meaning has already been explained to the 'C' Compilers. These key words are also called as 'Reserved words'.There are 32 keywords available in standard C language. Following are the list of keywords in C\nauto  double  if  static\nbreak else int struct\ncase num long switch\nconst float register union\n continue far short voids\ndefault for return unsigned\n do goto signed while2.Identifiers\nIdentifiers are user defined words or names which doesn’t have specific meaning with in language. The meaning of these words understood by programmer/developer.\nIdentifiers are used to identify the data instruction or user defined types.\n Rules for Identifiers:\n\n1. It consists of sequence of letters and digits.\n2. Identifier name always start with alphabet.\n3. The only  special characters allowed is under score (-)\n4. The length of the Identifier is up to 32 characters.\n5. Identifiers should not be a keyword.\n6. No two successive underscores are not allowed\n7. It can be defined in uppercase or lowercase letters.\n8. Identifiers are case sensitive in programming.\n9. Duplicate names are not allowed.\n10. Don’t give any white spaces whenever we are writing identifier names.3. Constants\nA constant is a value which never changes throughout the program. These values are represented in different formats.\nConstants mainly classified in the two types.\n1. Numeric Constants\n2. Alpha - numeric Constants4. Operators"
    },
    {
      "ques": "Preprocessor commands",
      "ans": "The commands which start with a hash (#) symbol are called Preprocessor commands. These commands are used to place library information in our program. Generally in C programs library information placed in the form of header files.\n\nGlobal declarations:To use any variable it must be declared with its data type before the first executable statement. The variables which declared inside a block are available in that block only. Such variables are called as local variable.To use the variable in entire program with same effect it must be declared as global. These global variables are declared outside the functions."
    },
    {
      "ques": "IDE",
      "ans": "Turbo c features as integrated Development environment, or IDE,. It is also referred to as the programmer’s platform.) in IDE you can able to write/save/open your programs or code, compile using short cut keys, and also perform code debugging very easily."
    },
    {
      "ques": "turbo c editor",
      "ans": "It is a compiler of C program and it can be also used as a general editor. To enter into editor first change into the directory this contains the software and enters the command TC at the command prompt."
    },
    {
      "ques": "Common Short cut Keys Description",
      "ans": "F2 press to Save current work\nF3 press to open an existing file\n ALT-F3 press to close current\nALT-F9 press to compile only\nALT-F5 press to view the desired output of the program.\nCTRL-F9 press to compile+run\nALT-X or ALT-F-X press to exit from TC IDE"
    },
    {
      "ques": "clrscr()",
      "ans": "This function is used to clear the screen. This function’s prototype has defined in the header file   conio.h (CONIO ==>  Console Input Output )	"
    },
    {
      "ques": "getch()",
      "ans": "This function is used to accept a single character for the variable while executing the program.  But this function does not display the entered character.  This function’s prototype has defined in the header file CONIO.H"
    },
    {
      "ques": "data type",
      "ans": "Data types reserves space for data.\nA data type defines for which type of data how much memory to be allocated.\n1. Type 2. Size"
    },
    {
      "ques": "Different data types",
      "ans": "There are five data types\n1.Primary data types\n2.Extended data types\n3.Derived data types\n4.User defined data type\n5.Null data types"
    },
    {
      "ques": "Variable:",
      "ans": "1.While solving a problem we need to remember some data values temporarily. Such values are placed in the named locations in the memory. These named locations in the memory are called variables. \n2.A variable is an identifier. It can be consider as a name given to the location in memory where values are stored.\n3.The quantities which can be changed during the execution of program are called Variables.\n4.Variable is a container which contains data or Information.\n5.Before using any variable in a program it must be declared first. "
    },
    {
      "ques": "Types of variables",
      "ans": "Variables are broadly classified into four types. They are\n\n1. Local variables:\nLocal variables means, the variables which are defined inside a function. These variables are work within that function only. The scope of the local variables is inside a function in which variables are defined.\n2. Global variables:\nGlobal variables are nothing but the variables which are defined outside of any function (generally main). The scope of these variables is throughout the program i.e. in all functions we can use these variables.\n3. Block level variables:\nThe variables which are defined inside a block is called as block level variables. The scope of the block level variables is within the block.\n3. Block level variables:\nThe variables which are declared with helf of const keyword, those variables are called as constant variables. Constant variables data we can’t change it at any cost. Constant variable may be local, global and block level.\nBlock variables again classified into 2 types\n1. Conditional block(generally conditional statements)\n2. Iteration block(generally loops)"
    },
    {
      "ques": "Itialize a variable:",
      "ans": "A variable can be initialized in two ways.\nstatic variable initialization: \nDeclaring a variable by assigning constant value is called Static variable initialization.\n\n or The value assigned to variable is known before compiling program is called Static variable initialization.2. Dynamic variable initialization:\nDeclaring a variable by assigning expression or variable is called Dynamic variable initialization.\n "
    },
    {
      "ques": "OPERATORS",
      "ans": "Operator is a special symbol which performs a particular operation.All operators are in C language are pre-defined.\numberIn c programming language total number of operators are 44\nDepending upon the number of operands operators are classified into three types\n 1. Unary operators:  It takes only one argument\n2. Binary operator: it takes two arguments.\n3. Ternary operators:  it takes three arguments."
    },
    {
      "ques": "Modulus operator:",
      "ans": "1.Modulus operator returns remainder value. Output sign depends on numerators value sign only.\n2.When a numerator value is less than of denominator value then it returns numerator value as return value.\n3. Modulus operator required two arguments and both arguments should be an integer type only.\n4.In implementation when we need to find the floating data modulus value then go for fmod(), or fmodl() functions.\n5. Fmod() and fmodl() functions are available in <stdlib.h> which is used to find the modulus of floating data values."
    },
    {
      "ques": "Logical Operators:",
      "ans": "1.Logical expressions combine two (or) more relational expressions. And also used to test more than a one condition one and make decision.\n2.In c all logical operators returns one or zero.\n3.If the expression is true then returns with ’1’ and if the expression is false then returns with zero.\n4.Every non zero is called true when value become zero it is called false."
    },
    {
      "ques": "Relational Operators:",
      "ans": "1.In c all relational  operators returns one or zero\n2.If the expression is true then returns with ’1’ and if the expression is false then returns with zero.\n3.Every non zero is called true when value become zero it is called false."
    },
    {
      "ques": "Assignment Operators:1.",
      "ans": "1.Assignment operator is a binary category operator.\n2.Binary category means it required two operands that is left and right argument.\n3.Among those to arguments any one missing it gives an error. And left side argument must be variable type only."
    },
    {
      "ques": "Increment and Decrement Operators:",
      "ans": "These operators are represent as ‘++’ and ‘- -‘increments opened by 1 and -- decrements operands by 1 they are unary operators.\n1.post-increment: A ++ \n2. Pre – decrements :++a\n3.Post– decrements:A --\n4.Pre - decrement:--A"
    },
    {
      "ques": "Conditional Operators:",
      "ans": "1.Conditional operator are ternary category operators\n2.Ternary category means it required three arguments i.e, left, middle, and right side arguments.\n3.In ternary category operators if the expression is true then returns with middle arguments. If expression is false then returns with right side argument and left side wxpression is treated as condition."
    },
    {
      "ques": "Bitwise Operators: ",
      "ans": "Bitwise operators are similar to that of logical operator’s expert that they work on binary bits. When bitwise operators are used with various they are internally was in the converted to binary numbers and then bitwise operators are applied on individual bits. These operators work with char and int type data. They cannot by used with floating point."
    },
    {
      "ques": "Iterative Statements",
      "ans": "1.Iteration means repeated execution of statements. In most situations, we need to execute a set of statements repeatedly for a given number of times.\n2.Writing the same set of statements repeatedly will have the following drawbacks.\n1) Wastage of time.\n2) Wastage of memory.\n3) Chances of creating errors.\n\n3.To overcome this problem, we go to the concept of loops. Using loops, we will write the statements only once, and execute them as many no. of times as required."
    },
    {
      "ques": " conditional control statement",
      "ans": " The statements which can be executed for specified set of times until the given condition satisfies are known as conditional controlled statements. These statements are supported under C language with following key words such as\n1.  while\n2. do-while\n3.for"
    },
    {
      "ques": "loop",
      "ans": "Loop is a group of instructions compiler executes repeatedly while some condition remains true.\n\n1. Entry control loop:\nIn this control loop compiler will check condition first. If condition is true then compiler move into the body. If condition fail compiler doesn’t execute body atleast once.Entry control loop is also called as Pre-checking control loop.\nEx: while, for\n\n2.Exit control loop:\n1.n this kind of control loop compiler first executes the body then it go for the condition. If condition is true again it goes to the body.\n2.If condition fails it goes out of the body.\n3.So in exit control loop without knowing condition compiler execute body minimum one time.\n3.Exit control loop is also as post control loop."
    },
    {
      "ques": "nested loops",
      "ans": "A loop can be executed with in another loop is called as nested loop. "
    },
    {
      "ques": "break:",
      "ans": "1.break is a keyword by using break we can terminate the loop body or switch body.\n2.Using break is always optional but it should be exist with in the loop body or switch body only.\n3.In implementation where we knows the maximum number of reputations but certain condition is their where we need to terminate loop body then go for break keyword."
    },
    {
      "ques": "continue:",
      "ans": "1.continue is a keyword by using continue we can skip the statements with in the loop body.\n2.Using continue is always optional but it should be exist with in the loop body only.\n3.In implementation where we knows the maximum number of reputations but certain condition is their where we need to skip some statements from loop body then go for continue."
    },
    {
      "ques": "goto:	",
      "ans": "1.goto is keyword by using goto we can pass the control any place in the program with in the local scopr.\n2.goto always refers on identifier called label.\n3.Any valid identifier followed by colon is called label.\n4.goto  statement makes the program in unstructured manner."
    },
    {
      "ques": "CONDITIONAL STATEMENTS:",
      "ans": "Selection statements: These statements are also called ‘Branching Statements or conditional statements’. Because they are used to transfer control from one statement to another\n\n Conditional statements are mainly classified into two types they are \n1. If statements:\n'C'uses the keyword “if” to implement the decision control statement or instructions\n2.if else :\nThe if else statement is an extension of the simple if statement.\n3.If else if:\nIt is also an extension of if else statement to implement multiple conditions.\n\n2.Switch statement:\n1.Switch is keyword, by using switch we can constructs multiple blocks of a selection statements.\n2.Multiple blocks can be constructed with “case” keyword.\n3.It provides an easy way to dispatch execution to different parts of your code based on the value of an expression.  As such it often provides a better alternative than a large series of if-else statements.\n4.The switch statement works like this:  the value of the expression is compared with each of the constant values in the case statement.  If a match is found, the code sequence following that case statement is executed.  If none of the constants matches the value of the expression then the default statement is executed.   \n5.Default is a special kind of case which will be executed automatically when the matching case is not found.\n6.Using default is always optional. It is recommended to use when we are not handling all provisions of switch block. "
    },
    {
      "ques": "gotoxy() :",
      "ans": "This function locates the cursor position to the given place on the screen. This function’s prototype has defined in the header file CONIO.H"
    },
    {
      "ques": "Need of arrays",
      "ans": "A variable having only one memory location so we can store only one value at a time. But my requirement is i want to store multiple data values into one variable at a time (the total data belonging to similar data only). In c language by using arrays we can achieve this requirement (i.e. storing set of data values into single variable). This is the need of arrays."
    },
    {
      "ques": "Array:",
      "ans": "1.An array is a collection of data storage locations, each having the same data type and the same name.\n2.Each storage location in an array is called an array element or array index.\n3.Array is derived data type.\n4.Array is a composite data type."
    },
    {
      "ques": "Array properties",
      "ans": "1. Array index values always start from zero(0).\n2. The variable name of array contains the base address of the memory block.\n3. The array variable is created at the time of compilation.\n4. The size of the array can’t be alerted at runtime.\n5. The address held by the array variable is static.\n6. The array size must be constant."
    },
    {
      "ques": "types of arrays",
      "ans": "1. Single Dimensional arrays:\n1.One dimensional array is a list of values of the same data type. A one dimensional array contains only one subscripts\n2.A subscript is a number inside a bracket that follows an array's name. This number can identify the number of individual elements in the array.\n3.Array elements are stored in sequential memory locations\n\n2. Multi Dimensional arrays:\nA multidimensional array has more than one subscript. I.e. A two-dimensional array has two subscripts; a three-dimensional array has three subscripts, and so on. There is no limit to the number of dimensions C array can have.\n2.A two-dimensional array has a row-and-column structure. "
    },
    {
      "ques": "Multidimensional Arrays",
      "ans": "Multidimensional arrays can also be initialized. The list of initialization values is assigned to array elements in order, with the last array subscript changing first."
    },
    {
      "ques": "STRINGS",
      "ans": "A string is a sequence of characters. The characters include alphabets, digits, specialsymbols."
    },
    {
      "ques": "C- Strings:",
      "ans": "In C Language, strings are sequence of characters enclose in double quotes (“ “). They are also called as character constants.\n In C, a string is also defined as array of characters. Similarly, there is no separate data type available to represent string.  Such arrays of strings are terminated by a Null characters(‘0’), that is slash followed by zero."
    },
    {
      "ques": "String Input/Output Functions",
      "ans": "The scanf(), gets() are predefined functions for reading strings or array of characters thru standard input called keyboard, the printf(),puts() predefined functions are used to for printing strings or array of characters on standard output called monitor. \n1.There is a difference between scanf and gets while reading string. The scanf considers space and newline in input as end of string, where as gets considers newline input as end of string. 2.The printf() and scanf() for input/output and, the gets() and puts() for string input/output are defined in header file stdio.h, so, include it to program which uses these functions."
    },
    {
      "ques": " Arrays of Strings:",
      "ans": "In C, the array of string is defined as two-dimensional array of characters. This is defined as follows,char names[4][20];\nthis a array, for storing 4 names, each name can has at most 20 characters, but last character reserved for null characters().char  *names[4];this is array of 4 names, each name can has at most specified number of characters, "
    },
    {
      "ques": "String Manipulation Functions",
      "ans": "The string manipulation functions are predefined functions, they are used to perform operations on strings. They are defined in header file called “string.h”. Therefore, the program using such functions should include this header file(#include<string.h>). "
    },
    {
      "ques": "Most frequently used string functions from “string.h” are",
      "ans": "1. strcat\n2. strlen\n3. strncpy\n4. stricmp\n5. strcmpi\n6. strupr\n7. strlwr\n8. strstr\n9. tolower\n10. toupper"
    },
    {
      "ques": "Functions:",
      "ans": "A function is a named, independent section of C code that performs a specific task and optionally returns a value to the calling program. Now let's look at the parts \n\n1.A function is named: Each function has a unique name. By using that name in another part of the program, you can execute the statements contained in the function. This is known as calling the function. A function can be called from within another function.\n2.A function is independent: A function can perform its task without interference from or interfering with other parts of the program.\n3.A function performs a specific task: This is the easy part of the definition. A task is a discrete job that your program must perform as part of its overall operation, such as sending a line of text to a printer, sorting an array into numerical order, or calculating a cube root.\n4.A function can return a value to the calling program. When your program calls a function, the statements it contains are executed. If you want them to, these statements can pass information back to the calling program."
    },
    {
      "ques": "modular programming",
      "ans": "If a program is large, it is subdivided into a number of smaller programs that are called modules or subprograms. If a complex problem is solved using more modules, this approach are known as modular programming"
    },
    {
      "ques": "Function Body:",
      "ans": "The function body is enclosed in braces, and it immediately follows the function header. It's here that the real work is done. When a function is called, execution begins at the start of the function body and terminates (returns to the callingprogram) when a return statement is encountered or when execution reaches the closing brace."
    },
    {
      "ques": "Function Statements:",
      "ans": "There is essentially no limitation on the statements that can be included within a function. The only thing you can't do inside a function is define another function. You can, however, use all other C statements, including loops, if statements, and assignment statements. You can call library functions and other user-defined functions."
    },
    {
      "ques": "Returning a Value:",
      "ans": "To return a value from a function, you use the return keyword, followed by a C expression. When execution reaches a return statement, the expression is evaluated, and execution passes the value back to the calling program."
    },
    {
      "ques": "advantages of functions",
      "ans": "1.Reusability: write the code once and use many times which decreases the size of the program.\n2.Modularity: dividing problem into small parts (modules) in which each and every module having separate operation. Due to this we can easily develop the programs and we can easily debug the program.\n3.Efficiency:  Avoid redundant instructions which decreases size of the program and increases efficiency."
    },
    {
      "ques": "types of functions",
      "ans": "1.PREDEFINED:\nA function which has own definition and comes along with the software is called as predefined functions. Or library functions are called as predefined. \nEx: printf, scanf, get char() , put char() etc.\n1.We can’t change the predefine function operation\n2.We can’t modify predefined function.\n\n2.USER DEFINED:\nA function which is defined by user for a particular purpose is called as user defined functions.\n1.User defined functions follow the c language functions pre- defined rules.\n2.Pre defined rules user can’t change.\n3.In user defined functions user can implement their own operation. \n4.User defined functions names and the operations can change when user want. \n\nExample:void main(),int abc(int a, int b);float addition(float a, float b); "
    },
    {
      "ques": " function and built-in function",
      "ans": "A large program is subdivided into a number of smaller programs or subprograms. Each subprogram specifies one or more actions to be performed for large program. Such subprograms are functions. The function supports only static and extern storage classes. By default, function assumes extern storage class. Functions have global scope. Only register or auto storage class is allowed in the function parameters. Built-in functions that predefined and supplied along with the compiler are known as built-in functions. They are also known as library functions."
    },
    {
      "ques": " Parameters and Parameters types",
      "ans": " In c language parameters are classified into two types \n1.Actual parameter:\nThe values which are send/pass from calling function to called function are called actual parameters are actual arguments.\n2.Formal parameter:\nFunction parameters are called formal parameters. These are local variable which receive values from calling function."
    },
    {
      "ques": "Local Variables",
      "ans": "You can declare variables within the body of a function. Variables declared in a function are called local variables.\n2.The term local means that the variables are private to that particular function and are distinct from other variables of the same name declared elsewhere in the program. "
    },
    {
      "ques": "Global Variables",
      "ans": "1.You can declare variables outside of the body of a function(main). Variables declared outside of the function are called as global variables. \n2.The term global means that the variables are public. "
    },
    {
      "ques": "CATEGORY OF FUNCTIONS:",
      "ans": " Functions are categories depending on whether arguments are present or not and whether a value is returned or not. In C language\n\nfunctions May belong to one of the following categories\n1. Functions with no arguments and no return values.\n2. Functions with arguments and no return values.\n3. Functions with arguments and returns values."
    },
    {
      "ques": "NO ARGUMENTS AND NO RETURN VALUES",
      "ans": "When a function has no arguments it does not receive, any data from the calling function.  Similarly, when it does not return a value the calling function does not receive any data from the called function.  It shows in the figure. The dotted lines indicate that there is only a transfer of control but not data."
    },
    {
      "ques": "ARGUMENTS BUT NO RETURN VALUES",
      "ans": "When a function has arguments it receive data from the calling function.  Similarly when it does not return a value the calling function does not receive any data from the called function."
    },
    {
      "ques": "ARGUMENTS WITH RETURN VALUES:",
      "ans": "When a function have arguments it receive data from the calling function similarly when function having return a value the calling function receive data from the called function.  In effect the data transfer between the calling function and called function happened."
    },
    {
      "ques": "Parameter passing techniques",
      "ans": "In c language two types of techniques are available for passing parameters to the functions. \n1. Call by value:\n1.n this technique the values of actual arguments in the calling function are copied into the formal arguments in the called function.\n2.Here the data transfer done in only one direction i.e. from calling function to called function, so any changes happen in  formal arguments does not effect on the actual arguments.\n3.But if any changes will happen in the actual arguments, formal arguments automatically effected.\n2. Call by reference.\n1.In this technique the addresses of actual arguments in the calling function are copied into the formal arguments in the called function.\n2.Any changes happen in formal arguments does effect on the actual arguments.\n3.But if any changes will happen in the actual arguments, formal arguments automatically effected."
    },
    {
      "ques": "Recursion:",
      "ans": "The term recursion refers to a situation in which a function calls itself either directly or indirectly. Indirect recursion occurs when one function calls another function that then calls the first function.\n allows recursive functions, and they can be useful in some situations.\nFor example, recursion can be used to calculate the factorial of a number. The factorial of a number x is written x! and is calculated as follows:x! = x * (x-1) * (x-2) * (x-3) * ... * (2) * 1\nHowever, you can also calculate x! like this:x! = x * (x-1)!\nGoing one step further, you can calculate (x-1)! using the same procedure:(x-1)! = (x-1) * (x-2)!"
    },
    {
      "ques": "Passing array as arguments to functions:",
      "ans": "1.An array can be passed to a function as on argument in a manner similar to that used to passing variables.\n2.To pass an array to a called function, it is sufficient to list the names of the array, without any subscripts and the size of the array as argument.\n3.The called function with array as parameters contains minimum two parameters, the array and the size of the array.\nSyntax:<function-name> (<array-name>[array-size])\n1.When we pass an array as an argument to a function we need not specify the array size in the arguments declaration part of the function.\n2.The array-name is followed by empty square brackets is an array"
    },
    {
      "ques": "POINTERS:",
      "ans": "1..A pointer is a variable that stores the memory address of other variables. Then, pointer variable will start referring the variable whose address is stored in it.  \n2.The pointer is a variable, so it is declared just like any other variable. The only difference is that pointer variables must have the dereferencing operator, *, before its name. \n3.The pointer variable of one data type will only hold the address of variable of same data type.\nGenerally, the pointer variable are declared as, datatype  *ptr_varname;\nwhere “ptr_varname” name of pointer variable of type 'datatype'.\nExample,int *x;  /* read as, x is a pointer to int */ \nExample, declaring pointer and storing address,int x, *ptr;\nptr = &x;  /*read as, address is assigned to ptr.*/"
    },
    {
      "ques": "Accessing values of variables by using pointers:",
      "ans": "The value from memory location of variable is accessed by using its pointer variable.\nThis is explained by following statements,int  a, *ptr, b;  /* The ptr is a pointer, a, b are variables */.\na = 50;     /* a is assigned with value 50 */	ptr = &a;  /* the pointer ptr  points the memory location of a */.\n/*The *ptr  retrieves value from memory location whose address is stored in it*/b = *ptr;   /* b is stored with *ptr value, which is value of a  */./* value of a is modified, now it would be 105.*/*ptr = *ptr + 55;"
    },
    {
      "ques": "Pointers used for",
      "ans": "Pointers are used in situations when passing actual values is difficult or not desired. Some of the situations where pointers can be used are \n1. To return more than one value from a function.\n2. To pass arrays and strings more conveniently from one function to another\n3. To manipulate arrays easily by moving pointers to them instead of moving the arrays itself\n4. To allocate memory and access it (Direct Memory Allocation).\n5. To create complex data structures, such as linked lists"
    },
    {
      "ques": "pointer",
      "ans": "1.Pointer is a derived data type.\n2.A variable of type pointer is called pointer variable.\n3.A pointer variable holds an address of memory location."
    },
    {
      "ques": "address",
      "ans": "1.The address is integer value given to each location or byte within memory.\n2.These addresses are generated by operating system.\n3.Addressing method is depends on compiler , if compiler is 16 bit , it uses 16 bit addressing method and if compiler is 32 bit it uses 32 bit addressing methods."
    },
    {
      "ques": "advantages of pointer",
      "ans": "1. Dynamic memory allocation\n2. Avoid wastage of memory\n3. Pointers increases efficiency of program\n4. Complex data types\n5. Dynamic data structures"
    },
    {
      "ques": "disadvantages of pointer",
      "ans": "1. Pointers are not secured.\n2. Memory leak."
    },
    {
      "ques": " Reference operator (&)",
      "ans": "The address that locates a variable within memory is what we call a reference to that variable. This reference to a variable can be obtained by preceding the identifier of a variable with an ampersand sign (&), known as reference operator, and which can be literally translated as 'address of'."
    },
    {
      "ques": "Dereference operator (*)",
      "ans": "Using a pointer we can directly access the value stored in the variable which it points to. To do this, we simply have to precede the pointer's identifier with an asterisk (*), which acts as dereference operator and that can be literally translated to 'value pointed by' "
    },
    {
      "ques": "pointer value and address",
      "ans": "A pointer value is a data object that refers to a memory location. Each memory locaion is numbered in the memory. The number attached to a memory location is called the address of the location."
    },
    {
      "ques": "Pointers for Inter Function Communication:",
      "ans": "The pointer are used for inter function communication, which means, communication between called and caller function is can established. Base on the this, \nwe call function with,\ni) call by value :\nFunctions with Call-by-Value: \nThe function with call by value is named, by looking the way the arguments are passed. In this, the values of actual parameters are copied into formal parameters. The changes in values of these parameters will not reflect into actual parameters.\nii) call by reference or address:\nFunctions with Call-by-Reference or Address:\nThe function with call by reference or address is named, by looking the way the arguments are passed.  In this, the addresses of actual parameters are copied into formal parameters. So, the formal parameters have to be pointers to data type of actual parameters. Then changes in values of formal parameters will reflect into actual parameters."
    },
    {
      "ques": "Pointers to Pointers:",
      "ans": "A pointer variable can also be pointed by another pointer variable. This, means, a pointer variable stores address of another pointer variable."
    },
    {
      "ques": "levels of pointers",
      "ans": "The answer depends on what you mean by “levels of pointers.” If you mean “How many levels of indirection can you have in a single declaration?” the answer is “At least 12.”\n\nint i = 0;\nint *ip01 = & i;\nint **ip02 = & ip01;\nint ***ip03 = & ip02;\nint ****ip04 = & ip03;\nint *****ip05 = & ip04;\nint ******ip06 = & ip05;\nint *******ip07 = & ip06;\nint ********ip08 = & ip07;\nint *********ip09 = & ip08;\nint **********ip10 = & ip09;\nint ***********ip11 = & ip10;\nint ************ip12 = & ip11;\n************ip12 = 1; /* i = 1 */\n\nThe ANSI C standard says all compilers must handle at least 12 levels. Your compiler might support more."
    },
    {
      "ques": "Pointer to void:",
      "ans": "1.In C, the void is a keyword. This is used to create variables of functions of type void. We might have observed that, void main(), void swap() etc \n2.The void main() means, the function main is defined to returns no data or nothing.\n3.We can also declare pointer to void. Then, such pointer is generally called as generic pointer, which means, we can convert or type cast into other data types."
    },
    {
      "ques": "dangling pointer",
      "ans": "A dangling pointer arises when you use the address of an object after its lifetime is over. This may occur in situations like returning addresses of the automatic variables from a function or using the address of the memory block after it is freed.\n2.We can also define like as it is a pointer variable which holds an address of unreserved memory location is called dangling pointer.\n3.To avoid dangling pointer it has to be initiated with null.\n4.This pointer variable leads to logical error."
    },
    {
      "ques": "null pointer",
      "ans": "A pointer variable which holds null address is called null pointer. This pointer variable cannot point to any memory location."
    },
    {
      "ques": "Pointer Arithmetic:",
      "ans": "As pointers are variables, there should be operators those can be used with pointers.\nIf a pointer variable is made to point a certain variable then, we can either reassign it another variable's address, or performing arithmetic operations to point other memory location. The operator permitted to use with pointers."
    },
    {
      "ques": "Pointers to Arrays",
      "ans": "The pointer variables are also used to point arrays. If a pointer is made to point an array of some data type then, such pointer can be used to access cells of that array and values stored in those cells."
    },
    {
      "ques": "Arrays of Pointers:",
      "ans": "ointer is a variable that stores the memory address of another variable. So it's possible to have an array of pointers. In other words, an array of memory addresses: \nThese pointers may pointing individual variables or arrays of some data type.\nIn general it is declared as,\ndatatype  *array_ptrs[n];\nIn the above declaration, the array_ptrs[] is a single dimensional array of n pointers to datatype. "
    },
    {
      "ques": "Pointers to Functions:",
      "ans": "The pointer variable is also used to point functions. Such pointer can be used to call or invoke that function. Extending this concept, we can also pass function name as an argument to another function.  These, can be understood with explanation given below,\nIn general a pointer to function is declared as,\ndatatype (*ptr_function)(datatype, datatype, ….datatype);\nwhere 	“datatype” is the data type allowed in C, \n“and ptr_function” is pointer name which points to function.\n\nExample,\nint  (*ptrfun)(int, float);\ndefines a pointer name “ptrfun” which points the function with two parameters, and return type int, where first parameter is of type int, and latter is of type float."
    },
    {
      "ques": "STORAGE CLASSES:",
      "ans": "1.All variables have a data type and they also have a “storage class”.\n2.We have written several programs in ‘c’, but we have not mentioned storage classes yet, because storage classes have default.\n3.If we do not specify the storage class of a variable in its declaration, the compiler will assume a storage class depending on the context in which the variable is used.\n4. Thus, variable have certain default storage classes.\n5.Basically two kinds of locations in a computer where a variable value may be kept. They are “MEMORY AND CPU REGISTER”"
    },
    {
      "ques": "VARIABLE’S STORAGE CLASS TELLS US",
      "ans": "1.Where the variable would be stored.\n2.What will be the initial value of the variable, if the initial value is not specifically assigned, (i.e., the default initial value)\n3.What is the scope of the variable, i.e., in which functions the value of the variable would be available.\n4.What is the life of the variable i.e., how long would the variable exist."
    },
    {
      "ques": "TYPES OF STORAGE CLASSES",
      "ans": "There are four storage classes in c, which is supported with respect to ‘os’.\n\nAuto storage class\nThe features of a variable defined to have an automatic storage class are as under:\nStorage                   - Stack of memory\nDefault value      - An unpredictable value, which is often called a garbage value. It                	 refers to Base address of the variable.\nScope                     - local to the block in which the variable defined or within the function.\nLife                     - Till the control remains within the blocks in which the variable is defined.\nNote: the keyword for this storage class is auto and not automatic.\n\n2.STATIC STORAGE CLASS:\nThe features of a variable defined to have an automatic storage class are as under:\nStorage		- PMA of memory\nDefault value 		- zero\nScope			- local to the block in which the variable defined or with in the function\nLife 			- value of the variable persists between different function calls.\nNote: static variable are initialized only once at the declaration.\n\n3.EXTERNAL STORAGE CLASS:\nThe features of a variable defined to have an automatic storage class are as under:\nStorage		- PMA of memory\nDefault value 		- zero\nScope 			- as long as the program’s execution\nLife 			- doesn’t come to an end.\nNote:1. External variables are declared outside all functions.\n2. The keyword for this storage class is ‘extern’.\n\n4.Register storage class: \nStorage 		- CPU registers\nDefault value		- garbage value\nScope 			- local to the block in which the variable is defined\nLife 	- Till the control remains within the block in which the variable is defined.\nNote:1. A value stored in a cpu register can always be accessed faster than the one which is stored in Memory.\nA good example of frequently used variables is loop counters.\nWe cannot use register storage class for all types of variables. Because the CPU registers in a Microcomputer are usually 16 bit registers and therefore cannot hold a float value or a double Value, which require 4 and 8 bytes respectively for storing a value."
    },
    {
      "ques": "STRUCTURES:",
      "ans": "Ordinary variable can hold one piece of information and array can hold a number of pieces of information of the same data type.  These two data types can handle a great variety of situations.  However if we want to represent a collection of data items of different types using a single name then we cannot use an array and ordinary variable.\n\nFortunately C supports a constructed data type known as a “structures” which is a method for packing data of different types.  Structures help to organize complex data in a more meaningful way."
    },
    {
      "ques": "Defining and Declaring Structures",
      "ans": "If you're writing a graphics program, your code needs to deal with the coordinates of points on the screen. Screen coordinates are written as an x value, giving the horizontal position, and a y value, giving the vertical position. \n\nstruct coord {\n\nint x;\nfloat y;\n\n};\nThe struct keyword, which identifies the beginning of a structure definition, must be followed immediately by the structure name, or tag (which follows the same rules as other C variable names). Within the braces following the structure name is a list of the structure's member variables. You must give a variable type and name for each member. The preceding statements define a structure type named coord that contains one integer variables x and one float variable y. They do not, however, actually create any instances of the structure coord. In other words, they don't declare (set aside storage for) any structures. There are two ways to declare structures. One is to follow the structure definition with a list of one or more variable names, as is done here.\n\nstruct coord {\nint x;\nfloat y;\n} first, second;\nThese statements define the structure type coord and declare two structures, first and second, of type coord. first and second are each instances of type coord; first contains one integer member named x and other floating member y, and so does second. This method of declaring structures combines the declaration with the definition. The second method is to declare structure variables at a different location in your source code from the definition. The following statements also declare two instances of type coord\n\nstruct coord {\nint x;\nfloat y;\n};\n/* Additional code may go here */\n\nstruct coord first, second;"
    },
    {
      "ques": "Accessing Structure Members:",
      "ans": "Individual structure members can be used like other variables of the same type. Structure members are accessed using the structure member operator (.), also called the dot operator, between the structure name and the member name. Thus, to have the structure named first refer to a screen location that has\n\ncoordinates x=50, y=100, you could write\n\nfirst.x = 50;\nfirst.y = 100;\n\nTo display the screen locations stored in the structure second, you could write\n\nprintf('d%f' second.x, second.y);\n\nAt this point, you might be wondering what the advantage is of using structures rather than individual variables. One major advantage is that you can copy information between structures of the same type with a simple equation statement. Continuing with the preceding example, the statement\n\nfirst = second;\n\nis equivalent to this statement:\n\nfirst.x = second.x;\n\nfirst.y = second.y;\n\nWhen your program uses complex structures with many members, this notation can be a great time saver. Other advantages of structures will become apparent as you learn some advanced techniques. In general, you'll find structures to be useful whenever information of different variable types needs to be treated as a group. For example, in a mailing list database, each entry could be a structure, and each piece of information (name, address, city, and so on) could be a structure member. "
    },
    {
      "ques": "Arrays of Structures:",
      "ans": "As we know array is a collection of similar data types. In the same way we can also define array of structures. In such type of arrayevery element is of structure type. Array of structure can be declared as follows."
    },
    {
      "ques": "Pointers to structure:",
      "ans": "We know that pointer is a variable that holds the address of another data variable. The variable may be of any data type i.e. int, float or double. In the same way we can also define pointer to structure. Here, starting address of the member variable can be accessed. Thus, such pointers are called structure pointers."
    },
    {
      "ques": "Nested structure:",
      "ans": "We can take any data type for declaring structure members like int, float, char  etc. in the same way we can also take object of one structure as member in another structure. Thus, structure can be used to create complex data application."
    },
    {
      "ques": "Unions",
      "ans": "Unions are similar to structures. A union is declared and used in the same ways that a structure is. A union differs from a structure in that only one of its members can be used at a time. The reason forthis is simple. All the members of a union occupy the same area of memory. They are laid on top of each other.this is simple. All the members of a union occupy the same area of memory. They are laid on top of each other."
    },
    {
      "ques": "Defining, Declaring, and Initializing Unions:",
      "ans": "The union keyword is used for declaring unions. A union is a collection of one or more variables (union_members) that have been grouped under a single name. In addition, each of these union members occupies the same area of memory. The keyword union identifies the beginning of a union definition. It's followed by a tag that is the name given to the union.\n\nUnions are defined and declared in the same fashion as structures. The only difference in the declarations is that the keyword union is used instead of struct. To define a simple union of a char variable and an integer variable, you would write the following:\n\nunion shared {\nchar c;\nint i;\n};\n\nThis union, shared, can be used to create instances of a union that can hold either a character value c or an integer value i. This is an OR condition. Unlike a structure that would hold both values, the union can hold only one value at a time. A union can be initialized on its declaration. Because only one member can be used at a time, only one can be initialized. To avoid confusion, only the first member of the union can be initialized.\n\nfollowing code shows an instance of the shared union being declared and initialized:\n\nunion shared generic_variable = {`@'};\n\nNotice that the generic_variable union was initialized just as the first member of a structure would be initialized."
    },
    {
      "ques": "Accessing Union Members:",
      "ans": "Individual union members can be used in the same way that structure members can be used by using the member operator (.). However, there is an important difference in accessing union members. Only one union member should be accessed at a time. Because a union stores its members on top of each other, it's important to access only one member at a time. "
    },
    {
      "ques": "BitFields:",
      "ans": "1.The Bit-field are used to reserve the memory space in terms of bits.\n2.we cant use the pointers to bit fields and hence we cant supply the value at runtime through scanf()function.\n3.Unlike some other computer languages, C has a built–in feature called a bit-field that allows you to access a single bit.\n4.Bit –fields a can be useful for a number of reasons such as\n5.It storage is limited, you can store several Boolean (true/ false), variables in one byte.\n6.the general from of a bit –field definition is <datatype> name: length;\n\nHere , type is the type of the bit-fields and length is the number of bits the field the type of bitfield must be int, signed or unsigned."
    },
    {
      "ques": "Enumerated Data Type:",
      "ans": "The enumerated data type gives you an opportunity to invent your own data type and define what value the variable of this data type can take. The format of the enum-definition is similar to that of a structure. Here’s how the example started above can be implemented."
    },
    {
      "ques": "Advantages:",
      "ans": "1. This can helps in making the program listing more readable. Which can be advantages when a program gets complicated or when more than  one programmer would be working on it.\n2. Using this we can also reduce programming errors."
    },
    {
      "ques": "FILES:",
      "ans": "1.scanf( ) and printf( ) functions read and write data which always uses the terminal (keyboard and screen) as the target.\n2.It becomes confusing and time consuming to use large volumes of data through terminals.\n3.The entire data is lost when either program terminates or computer is turned off.\n4.Sometimes it may be necessary to store data in a manner that can be later retrieved and processed. \n\nThis leads to employ the concept of FILES to store data permanently in the system.\n\nDEFINATION:\nFile is a set of records that can be accessed through the set of library functions. Record is logical group of data fields that comprise a single row of information, which describes the characteristics of an object.  A File is a place on disk where a group of related data (records ) can be stored."
    },
    {
      "ques": "File Operations:",
      "ans": "1. Creating a new file\n2. Opening an existing file\n3. Reading from a file\n4. Writing to a file\n5. Moving to a specific location in a file (seek)\n6. Closing a file"
    },
    {
      "ques": "Stream",
      "ans": "A stream is a sequence of characters. More exactly, it is a sequence of bytes of data. A sequence of bytes flowing into a program is an input stream; a sequence of bytes flowing out of a program is an output stream. By focusing on streams, you don't have to worry as much about where they're going or where they originated. The major advantage of streams, therefore, is that input/output programming is device independent. Programmers don't need to write special input/output functions for each device (keyboard, disk, and so on). The program sees input/output as a continuous stream of bytes no matter where the input is coming from or going to.\n\nEvery C stream is connected to a file. In this context, the term file doesn't refer to a disk file. Rather, it is an intermediate step between the stream that your program deals with and the actual physical device being used for input or output. For the most part, the beginning C programmer doesn't need to be concerned with these files, because the details of interactions between streams, files, and devices are taken care of automatically by the C library functions and the operating system."
    },
    {
      "ques": "File input/output functions",
      "ans": "fopen(fp, mode) : Open existing file / Create new file\nfclose(fp) : Closes a file associated with file pointer.\ncloseall ( ) : Closes all opened files with fopen()\nfgetc(ch, fp) : Reads character from current position and advances the pointer to next character.\nfprintf( ) : Writes all types of data values to the file.\nfscanf() : Reads all types of data values from a file. \ngets() : Reads string from a file.\nputs() : Writes string to a file. \n getw() :  Reads integer from a file.\nputw() : Writes integer to a file.\nfread() : Reads structured data written by fwrite() function\nfwrite() : Writes block of structured data to the file.\n fseek(): Sets the pointer position anywhere in the file.\nfeof(): Detects the end of file.\nrewind() : Sets the record pointer at the beginning of the file.\nferror() : Reports error occurred while read/write operations\nfflush() : Clears buffer of input stream and writes buffer of output stream.\nftell() : Returns the current pointer position."
    },
    {
      "ques": "Opening a File:",
      "ans": "The process of creating a stream linked to a disk file is called opening the file. When you open a file, it becomes available for reading (meaning that data is input from the file to the program), writing (meaning that data from the program is saved in the file), or both. When you're done using the file, you must close it. To open a file, you use the fopen() library function. The prototype of fopen() is located in STDIO.H and reads as follows:FILE *fopen (const char *filename, const char *mode);\nThis prototype tells you that fopen() returns a pointer to type FILE, which is a structure declared in STDIO.H. The members of the FILE structure are used by the program in the various file access operations, but you don't need to be concerned about them. However, for each file that you want to open, you must declare a pointer to type FILE. When you call fopen(), that function creates an instance of the FILE structure and returns a pointer to that structure. You use this pointer in all subsequent operations on the file. If fopen() fails, it returns NULL. Such a failure could be caused, for example, by a hardware error or by trying to open a file on a diskette that hasn't been formatted. The argument filename is the name of the file to be opened. As noted earlier, filename can and should contain a path specification. The filename argument can be a literal string enclosed in double quotation marks or a pointer to a string variable. The argument mode specifies the mode in which to open the file. In this context, mode controls whether the file is binary or text and whether it is for reading, writing, or both.\n\nThe default file mode is text. Remember that  fopen() returns NULL if an error occurs. Error conditions that can cause a return value of NULL include the following:\n1. Using an invalid filename.\n2. Trying to open a file on a disk that isn't ready (the drive door isn't closed or the disk isn't   formatted, for example).\n3. Trying to open a file in a nonexistent directory or on a nonexistent disk drive.\n4. Trying to open a nonexistent file in mode r."
    },
    {
      "ques": "Formatted File Output:",
      "ans": "Formatted file output is done with the library function fprintf(). The prototype of fprintf() is in the header file STDIO.H, and it reads as follows:\nint fprintf(FILE *fp, char *fmt, ...);\nThe first argument is a pointer to type FILE. To write data to a particular disk file, you pass the pointer that was returned when you opened the file with fopen(). \nThe second argument is the format string. The format string used by fprintf() follows exactly the same rules as printf().The final argument is .... What does that mean? In a function prototype, ellipses represent a variable number of arguments. In other words, in addition to the file pointer and the format string arguments, fprintf() takes zero, one, or more additional arguments. This is just like printf(). These arguments are the names of the variables to be output to the specified stream.\nRemember, fprintf() works just like printf(), except that it sends its output to the stream specified in the argument list. In fact, if you specify a stream argument of stdout, fprintf() is identical to printf()."
    },
    {
      "ques": "Formatted File Input:",
      "ans": "For formatted file input, use the fscanf() library function, which is used like scanf(), except that input comes from a specified stream instead of from stdin. The prototype for fscanf() is \nint fscanf(FILE *fp, const char *fmt, ...);\nThe argument fp is the pointer to type FILE returned by fopen(), and fmt is a pointer to the format string that specifies how fscanf() is to read the input. The components of the format string are the same as for scanf(). Finally, the ellipses (...) indicate one or more additional arguments, the addresses of the variables where fscanf() is to assign the input.\nBefore getting started with fscanf(), you might want to review the section on scanf(). fscanf() works exactly the same as scanf(), except that characters are taken from the specified stream rather than from stdin. "
    },
    {
      "ques": "Character Input and Output:",
      "ans": "When used with disk files, the term character I/O refers to single characters as well as lines of characters. Remember, a line is a sequence of zero or more characters terminated by the newline character. Use character I/O with text-mode files. The following sections describe character input/output functions.\n\nCharacter Input:\nThere are three character input functions: getc() and fgetc() for single characters, and fgets() for lines\nThe getc() and fgetc() Functions:\nThe functions getc() and fgetc() are identical and can be used interchangeably. They input a single character from the specified stream. Here is the prototype of getc(), which is in STDIO.H:\nint getc(FILE *fp);\nhe argument fp is the pointer returned by fopen() when the file is opened. The function returns the character that was input or EOF on error. If getc() and fgetc() return a single character, why are they prototyped to return a type int? The reason is that, when reading files, you need to be able to read in the end-of-file marker, which on some systems isn't a type char but a type int\nThe fgets() Function:To read a line of characters from a file, use the fgets() library function. The prototype is\nchar *fgets(char *str, int n, FILE *fp);\nThe argument str is a pointer to a buffer in which the input is to be stored, n is the maximum number of characters to be input, and fp is the pointer to type FILE that was returned by fopen() when the file was opened. When called, fgets() reads characters from fp into memory, starting at the location pointed to by str. Characters are read until a newline is encountered or until n-1 characters have been read, whichever occurs first. By setting n equal to the number of bytes allocated for the buffer str, you prevent input from overwriting memory beyond allocated space. (The n-1 is to allow space for the terminating  that fgets() adds to the end of the string.) If successful, fgets() returns str. Two types of errors can occur, as indicated by the return value of NULL:\n1. If a read error or EOF is encountered before any characters have been assigned to str, NULL is returned, and the memory pointed to by str is unchanged.\n2. If a read error or EOF is encountered after one or more characters have been assigned to str, NULL is returned, and the memory pointed to by str contains garbage.\n\nCharacter Output:\nYou need to know about two character output functions: putc() and fputs().\nThe putc() Function:\nThe library function putc() writes a single character to a specified stream. Its prototype in STDIO.H reads.\nint putc(int ch, FILE *fp);\nThe argument ch is the character to output. As with other character functions, it is formally called a type int, but only the lower-order byte is used. The argument fp is the pointer associated with the file (the pointer returned by fopen() when the file was opened). The function putc() returns the character just written if successful or EOF if an error occurs. The symbolic constant EOF is defined in STDIO.H, and it has the value -1. Because no 'real'character has that numeric value, EOF can be used as an error indicator (with text-mode files only).\nThe fputs() Function:\nTo write a line of characters to a stream, use the library function fputs(). This function works just like puts(), The only difference is that with fputs() you can specify the output stream. Also, fputs() doesn't add a newline to the end of the string; if you want it, you must explicitly include it. Its prototype in STDIO.H is\nchar fputs(char *str, FILE *fp);\nThe argument str is a pointer to the null-terminated string to be written, and fp is the pointer to type FILE returned by fopen() when the file was opened. The string pointed to by str is written to the file, minus its terminating. The function fputs() returns a non negative value if successful or EOF on error."
    },
    {
      "ques": "Direct File Input and Output:",
      "ans": "You use direct file I/O most often when you save data to be read later by the same or a different C program. Direct I/O is used only with binary-mode files. With direct output, blocks of data are written from memory to disk. Direct input reverses the process: A block of data is read from a disk file into memory. For example, a single direct-output function call can write an entire array of type double to disk, and a single direct-input function call can read the entire array from disk back into memory. The direct I/O functions are fread() and fwrite().\n\nfwrite() Function:\nThe fwrite() library function writes a block of data from memory to a binary-mode file. Its prototype in STDIO.H is\n\nint fwrite(void *buf, int size, int count, FILE *fp);\n\nThe argument buf is a pointer to the region of memory holding the data to be written to the file. The pointer type is void; it can be a pointer to anything. The argument size specifies the size, in bytes, of the individual data items, and count specifies the number of items to be written. For example, if you wanted to save a 100-element integer array, size would be 2 (because each int occupies 2 bytes) and count would be 100 (because the array contains 100 elements). To obtain the size argument, you can use the sizeof() operator. The argument fp is, of course, the pointer to type FILE, returned by fopen() when the file was opened. The fwrite() function returns the number of items written on success; if the value returned is less than count, it means that an error has occurred.\n\nfseek():It is used to set the position to a desired point in the file. fseek function is used to move the fi le position to a desired location within the fi le. It takes the following form:\nfseek(fi le ptr, offset, position);\nfi le ptr is a pointer to the fi le concerned, offset is a number or variable of type long, and position is an integer number. The offsetpecifi es the number of positions (bytes) to be moved from the location specified by position. The position can take one of the following three values:"
    },
    {
      "ques": "ftell():",
      "ans": "It is used to determine the current position in the fi le. It returns the position in terms of bytes from the start. ftell takes a fi le pointer and returns a number of type long, that corresponds to the current position. This function is useful in saving the current position of a fi le, which can be used later in the program. It takes the following form:\nn = ftell(fp);\nn would give the relative offset (in bytes) of the current posi tion. This means that n bytes have already been read (or written)."
    },
    {
      "ques": "rewind():",
      "ans": "It is used to set the position of the fi le pointer at the beginning of the fi le. rewind() takes a fi le pointer and resets the position to the start of the fi le. For example, the statement\nrewind(fp);\nn = ftell(fp);\nwould assign 0 to n because the fi le position has been set to the start of the fi le by rewind. Remember, the fi rst byte in the fi le is numbered as 0, second as 1, and so on. This function helps us in reading a file more than once, without having to close and open the fi le. Remember that whenever a fi le is opened for read ing or writing, a rewind is done implicitly."
    },
    {
      "ques": "Closing a file:",
      "ans": "A file must be closed as soon as all operations on it have been completed. This ensures that all outstanding information associated with the fi le is fl used out from the buffers and all links to the file are broken. This would close the fi le associated with the FILE pointer file inter. Look at the  Following segment of a program."
    },
    {
      "ques": "The C Preprocessor",
      "ans": "Recall that preprocessing is the first step in the C program compilation stage  this feature is unique to C compilers.  The preprocessor more or less provides its own language which can be a very powerful tool to the programmer. Recall that all preprocessor directives or commands begin with #. \n\nUse of the preprocessor is advantageous since it makes:\n1.programs easier to develop\n2.easier to read, \n3.easier to modify\n4.C code more transportable between different machine architectures."
    },
    {
      "ques": "Features of C language",
      "ans": "It is a robust language with rich set of built-in functions and operators that can be used to write any complex program.The C compiler combines the capabilities of an assembly language with features of a high-level language.Programs Written in C are efficient and fast. This is due to its variety of data type and powerful operators.It is many time faster than BASIC.C is highly portable this means that programs once written can be run on another machines with little or no modification.Another important feature of C program, is its ability to extend itself.A C program is basically a collection of functions that are supported by C library. We can also create our own function and add it to C library.C language is the most widely used language in operating systems and embedded system development today"
    },
    {
      "ques": "Different parts of C program",
      "ans": "1)Pre-processor :\n#include is the first word of any C program. It is also known as a pre-processor. The task of a pre-processor is to initialize the environment of the program, i.e to link the program with the header files required.So, when we say #include <stdio.h>, it is to inform the compiler to include the stdio.h header file to the program before executing it.\n\n 2)Header file :\n A Header file is a collection of built-in(readymade) functions, which we can directly use in our program. Header files contain definitions of the functions which can be incorporated into any C program by using pre-processor #include statement with the header file. Standard header files are provided with each compiler, and covers a range of areas like string handling, mathematical functions, data conversion, printing and reading of variables.With time, you will have a clear picture of what header files are, as of now consider as a readymade piece of function which comes packaged with the C language and you can use them without worrying about how they work, all you have to do is include the header file in your program.To use any of the standard functions, the appropriate header file must be included. This is done at the beginning of the C source file.For example, to use the printf() function in a program, which is used to display anything on the screen, the line #include <stdio.h> is required because the header file stdio.h contains the printf() function. All header files will have an extension.\n\n 3)main() function:\n  main() function is a function that must be there in every C program. Everything inside this function in a C program will be executed. In the above example, int written before the main() function is the return type of main() function. we will discuss about it in detail later. The curly braces { } just after the main() function encloses the body of main() function.We will learn what functions are in upcoming tutorials.\n\n 4)Comments :\n We can add comments in our program to describe what we are doing in the program. These comments are ignored by the compiler and are not executed.To add a single line comment, start it by adding two forward slashses // followed by the comment.To add multiline comment, enclode it between /* .... */, just like in the program above.\n\n 5)Return statement - return 0 :\n A return statement is just meant to define the end of any C program.All the C programs can be written and edited in normal text editors like Notepad or Notepad++ and must be saved with a file name with extension as .c If you do not add the extension .c then the compiler will not recognise it as a C language program file."
    },
    {
      "ques": "Compile and Run C Program",
      "ans": " To compile and run a C language program, you need a C compiler. To setup a C language compiler in your Computer/laptop,there are two ways:\n\n 1)Download a full fledged IDE like Turbo C or Microsoft Visual C++, which comes along with a C language compiler.\n\n  2)Or, you use any text editor to edit the program files and download the C compiler separately."
    },
    {
      "ques": "Without an IDE",
      "ans": "If you do not wish to setup an IDE and prefer the old school way, then download the C compiler which is called gcc from the gcc website https://gcc.gnu.org/install/.\n\n  Once you have downloaded and installed the gcc compiler, all you have to do it, open any text editor, copy and paste the C program code from the previous tutorial, and save it with the name hello.c \n\n  Open Command prompt or Terminal(if you use Ubunut or Mac OS),and go to the directory where you have saved the hello.c program file. \n\n Type the command gcc hello.c to compile the code. This will compile the code, and if there are no errors then it will produce an output file with name a.out(default name).\n\n  Now, to run the program, type in ./a.out and you will see Hello, World displayed on your screen."
    },
    {
      "ques": "Difference between Compile and Run",
      "ans": "You must be thinking why it is a 2 step process, first we compile the code and then we run the code. So, compilation is the process where the compiler checks whether the program is correct syntax wise, and there are no errors in the syntax.When we run a compiled program, then it actually executes the statements inside the main() function."
    },
    {
      "ques": "C Language Basic Syntax Rules",
      "ans": " C language syntax specify rules for sequence of characters to be written in C language. In simple language it states how to form statements in a C language program - How should the line of code start, how it should end, where to use double quotes, where to use curly brackets etc.\n\n  The rule specify how the character sequence will be grouped together, to form tokens. A smallest individual unit in C program is known as C Token. Tokens are either keywords, identifiers, constants, variables or any symbol which has some meaning in C language. A C program can also be called as a collection of various tokens. \n \n Then the tokens in this statement are→ printf, (, 'Hello,World', ) and ;.\n \nSo C tokens are basically the building blocks of a C program."
    },
    {
      "ques": "Semicolon ",
      "ans": "Semicolon is used to mark the end of a statement and beginning of another statement. Absence of semicolon at the end of any statement, will mislead the compiler to think that this statement is not yet finished and it will add the next consecutive statement after it, which may lead to compilation(syntax) error."
    },
    {
      "ques": "Comments",
      "ans": "Comments are plain simple text in a C program that are not compiled by the compiler. We write comments for better understanding of the program. Though writing comments is not compulsory, but it is recommended to make your program more descriptive. It make the code more readable.\n \nThere are two ways in which we can write comments.\n \n 1)Using // This is used to write a single line comment. \n \n 2)Using /* */: The statements enclosed within /* and */ , are used to write multi-line comments."
    },
    {
      "ques": "What are Keywords in C?",
      "ans": "Keywords are preserved words that have special meaning in C language. The meaning of C language keywords has already been described to the C compiler. These meaning cannot be changed. Thus, keywords cannot be used as variable names because that would try to change the existing meaning of the keyword, which is not allowed.(Don't worry if you do not know what variables are, you will soon understand.)"
    },
    {
      "ques": "Identifiers",
      "ans": " In C language identifiers are the names given to variables, constants, functions and user-define data. These identifier are defined against a set of rules. \n \n Rules for an Identifier \n \n 1)An Identifier can only have alphanumeric characters(a-z , A-Z , 0-9) and underscore(_).\n \n 2)The first character of an identifier can only contain alphabet(a-z , A-Z) or underscore (_).\n \n 3)Identifiers are also case sensitive in C. For example name and Name are two different identifiers in C.\n\n  4)Keywords are not allowed to be used as Identifiers.\n\n  5)No special characters, such as semicolon, period, whitespaces, slash or comma are permitted to be used in or as Identifier."
    },
    {
      "ques": "Character set",
      "ans": " In C language characters are grouped into the following catagories,\n\n  1)Letters(all alphabets a to z & A to Z).\n2)Digits (all digits 0 to 9).\n\n  3)Special characters, ( such as colon , semicolon , period ., underscore _, ampersand & etc).\n \n 4)White spaces."
    },
    {
      "ques": "Operators in C Language",
      "ans": " C language supports a rich set of built-in operators. An operator is a symbol that tells the compiler to perform a certain mathematical or logical manipulation. Operators are used in programs to manipulate data and variables. \n \n  C operators can be classified into following types:\n \n1)Arithmetic operators \n'+'adds two operands\n '-' subtract second operands from first\n '*' multiply two operand\n '/' divide numerator by denominator \n '%'remainder of division \n '++' Increment operator - increases integer value by one \n '--' Decrement operator - decreases integer value by one.\n\n 2)Relational operators \n '==' Check if two operand are equal\n '!=' Check if two operand are not equal.\n '>' Check if operand on the left is greater than operand on the right\n '<'Check operand on the left is smaller than right operand\n'>='check left operand is greater than or equal to right operand\n '<=' Check if operand on left is smaller than or equal to right operand.\n\n 3)Logical operators \n  C language supports following 3 logical operators. Suppose a = 1 and b = 0,\n	 '&&' Logical AND (a && b) is false. \n '||'	Logical OR (a || b) is true.\n	'!' Logical NOT (!a) is false.\n\n  4)Bitwise operators\n  Bitwise operators perform manipulations of data at bit level. These operators also perform shifting of bits from right to left. Bitwise operators are not applied to float or double(These are datatypes, we will learn about them in the next tutorial). \n\n '&' Bitwise AND\n '|'Bitwise OR \n '^' Bitwise exclusive OR \n '<<'left shift\n '>>'right shift\n\n 5)Assignment operators\n  Assignment operators supported by C language are as follows.\n'=' assigns values from right side operands to left side operand\n'+='adds right operand to the left operand and assign the result to left.\n'-='subtracts right operand from the left operand and assign the result to left operand.\n'*='mutiply left operand with the right operand and assign the result to left operand\n'/='divides left operand with the right operand and assign the result to left operand\n '%=' calculate modulus using two operands and assign the result to left operand.\n\n 6)Conditional operators\nThe conditional operators in C language are known by two more names \n 1)Ternary Operator \n2)? : Operator \n It is actually the if condition that we use in C language decision making, but using conditional operator, we turn the if condition statement into a short and simple operator. \n\n 7)Special operators \n 'sizeof' Returns the size of an variable \n '&' Returns the address of an variable\n '*'Pointer to a variable."
    },
    {
      "ques": "Data types in C Language",
      "ans": "Data types specify how we enter data into our programs and what type of data we enter. C language has some predefined set of data types to handle various kinds of data that we can use in our program. These datatypes have different storage capacities.\n\n  C language supports 2 different type of data types \n \n 1)Primary data types \n These are fundamental data types in C namely integer(int), floating point(float), character(char) and void.\n \n 2)Derived data types \n Derived data types are nothing but primary datatypes but a little twisted or grouped together like array, stucture, union and pointer. These are discussed in details later.\n Data type determines the type of data a variable will hold. If a variable x is declared as int. it means x can hold only integer values. Every variable which is used in the program must be declared as what data-type it is."
    },
    {
      "ques": "Variables in C Language",
      "ans": "When we want to store any information(data) on our computer/laptop, we store it in the computer's memory space. Instead of remembering the complex address of that memory space where we have stored our data, our operating system provides us with an option to create folders, name them, so that it becomes easier for us to find it and access it.\n imilarly, in C language, when we want to use some data value in our program, we can store it in a memory space and name the memory space so that it becomes easier to access it.\n The naming of an address is known as variable. Variable is the name of memory location. Unlike constant, variables are changeable, we can change value of a variable during execution of a program. A programmer can choose a meaningful variable name. Example : average, height, age, total etc."
    },
    {
      "ques": "Datatype of Variable",
      "ans": "A variable in C language must be given a type, which defines what type of data the variable will hold.\n 1)char Can hold/store a character in it.\n2)int Used to hold an integer.\n 3)float Used to hold a float value.\n4)double Used to hold a double value.\n void"
    },
    {
      "ques": "Rules to name a Variable",
      "ans": "1) Variable name must not start with a digit.\n 2)Variable name can consist of alphabets, digits and special symbols like underscore _.\n 3)Blank or spaces are not allowed in variable name.\n 4)Keywords are not allowed as variable name.\n 5)Upper and lower case names are treated as different, as C is case-sensitive, so it is suggested to keep the variable names in lower case."
    },
    {
      "ques": "Declaring, Defining and Initializing a variable",
      "ans": "Declaration of variables must be done before they are used in the program. Declaration does the following things.\n 1)It tells the compiler what the variable name is.\n 2)It specifies what type of data the variable will hold.\n 3)Until the variable is defined the compiler doesn't have to worry about allocating memory space to the variable.\n 4)Declaration is more like informing the compiler that there exist a variable with following datatype which is used in the program.\n 5)A variable is declared using the extern keyword, outside the main() function.."
    },
    {
      "ques": "Difference between Variable and Identifier",
      "ans": "An Identifier is a name given to any variable, function, structure, pointer or any other entity in a programming language. While a variable, as we have just learned in this tutorial is a named memory location to store data which is used in the program.\n\n1)identifiers\n1)Identifier is the name given to a variable, function etc.\n2)An identifier can be a variable, but not all indentifiers are variables.\n\n 2)Variable\n 1)While, variable is used to name a memory location which stores data.\n2)All variable names are identifiers."
    },
    {
      "ques": "C Input and Output",
      "ans": "Input means to provide the program with some data to be used in the program and Output means to display data on screen or write the data to a printer or a file.\n C programming language provides many built-in functions to read any given input and to display data on screen when there is a need to output the result.\n In this tutorial, we will learn about such functions, which can be used in our program to take input from user and to output the result on screen.\nAll these built-in functions are present in C header files, we will also specify the name of header files in which a particular function is defined while discussing about it.\n\n 1)scanf() and printf() functions\n The standard input-output header file, named stdio.h contains the definition of the functions printf() and scanf(), which are used to display output on screen and to take input from user respectively.You must be wondering what is the purpose of %d inside the scanf() or printf() functions. It is known as format string and this informs the scanf() function, what type of input to expect and in printf() it is used to give a heads up to the compiler, what type of output to expect.\n '%d' Scan or print an integer as signed decimal number \n '%f' Scan or print a floating point number\n '%c' To scan or print a character\n '%s' To scan or print a character string. The scanning ends at whitespace.\n\n We can also limit the number of digits or characters that can be input or output, by adding a number with the format string specifier, like '%1d' or '%3s', the first one means a single numeric digit and the second one means 3 characters, hence if you try to input 42, while scanf() has '%1d', it will take only 4 as input. Same is the case for output.\n In C Language, computer monitor, printer etc output devices are treated as files and the same process is followed to write output to these devices as would have been followed to write the output to a file.\n\n 2)getchar() & putchar() functions \nThe getchar() function reads a character from the terminal and returns it as an integer. This function reads only single character at a time. You can use this method in a loop in case you want to read more than one character. The putchar() function displays the character passed to it on the screen and returns the same character. This function too displays only a single character at a time. In case you want to display more than one characters, use putchar() method in a loop.\n\n 3)Difference between scanf() and gets() \nThe main difference between these two functions is that scanf() stops reading characters when it encounters a space, but gets() reads space as character too.\n If you enter name as Study Tonight using scanf() it will only read and store Study and will leave the part after space. But gets() function will read it completely."
    },
    {
      "ques": "Decision making in C",
      "ans": "Decision making is about deciding the order of execution of statements based on certain conditions or repeat a group of statements until certain specified conditions are met. C language handles decision-making by supporting the following statements,\n 1) if statement\n 2)switch statement\n 3) conditional operator statement (? : operator)\n 4)goto statement"
    },
    {
      "ques": "Decision making with if statement",
      "ans": "The if statement may be implemented in different forms depending on the complexity of conditions to be tested. The different forms are,\n 1)Simple if statement \n 2)if....else statement\n 3)Nested if....else statement\n 4)Using else if statement."
    },
    {
      "ques": "Switch statement in C",
      "ans": "When you want to solve multiple option type problems, for example: Menu like program, where one value is associated with each option and you need to choose only one at a time, then, switch statement is used.\n\n Switch statement is a control statement that allows us to choose only one choice among the many given choices. The expression in switch evaluates to return an integral value, which is then compared to the values present in different cases. It executes that block of code which matches the case value. If there is no match, then default block is executed(if present).\n\n Rules for using switch statement:\n\n 1)The expression (after switch keyword) must yield an integer value i.e the expression should be an integer or a variable or an expression that evaluates to an integer.\n 2)The case label values must be unique.\n3)The case label must end with a colon(:) \n 4)The next line, after the case statement, can be any valid C statement."
    },
    {
      "ques": "Difference between switch and if",
      "ans": "1)if statements can evaluate float conditions. switch statements cannot evaluate float conditions.\n 2)if statement can evaluate relational operators. switch statement cannot evaluate relational operators i.e they are not allowed in switch statement."
    },
    {
      "ques": "How to use Loops in C",
      "ans": " In any programming language including C, loops are used to execute a set of statements repeatedly until a particular condition is satisfied.\n\n Types of Loop: \n\n	1)while loop:\n while loop can be addressed as an entry control loop. It is completed in 3 steps. \n 1)Variable initialization.(e.g int x = 0;)\n 2)condition(e.g while(x <= 10))\n 3)Variable increment or decrement ( x++ or x-- or x = x + 2 )\n\n 2)	for loop \n for loop is used to execute a set of statements repeatedly until a particular condition is satisfied. We can say it is an open ended loop.\n\n 3)Nested for loop:\n We can also have nested for loops, i.e one for loop inside another for loop.\n\n 3)do while loop :\nn some situations it is necessary to execute body of the loop before testing the condition. Such situations can be handled with the help of do-while loop. do statement evaluates the body of the loop first and at the end, the condition is checked using while statement. It means that the body of the loop will be executed at least once, even though the starting condition inside while is initialized to be false. "
    },
    {
      "ques": "Arrays in C",
      "ans": " In C language, arrays are reffered to as structured data types. An array is defined as finite ordered collection of homogenous data, stored in contiguous memory locations.\n\n 1)finite means data range must be defined.\n 2)ordered means data must be stored in continuous memory addresses.\n 3)homogenous means data must be of similar data type.\n\n\n Example where arrays are used,\n\n1)to store list of Employee or Student names,\n 2)to store marks of students,\n 3)or to store list of numbers or characters etc.\n\n Since arrays provide an easy way to represent data, it is classified amongst the data structures in C. Other data structures in c are structure, lists, queues, trees etc. Array can be used to represent not only simple list of data but also table of data in two or three dimensions. \n\n 1)Declaring an Array:Like any other variable, arrays must be declared before they are used. \n 2)Initialization of an Array : After an array is declared it must be initialized. Otherwise, it will contain garbage value(any random value). An array can be initialized at either compile time or at runtime.\n\n Two dimensional Arrays :C language supports multidimensional arrays also. The simplest form of a multidimensional array is the two-dimensional array. Both the row's and column's index begins from 0."
    },
    {
      "ques": "String and Character Array",
      "ans": " String is a sequence of characters that is treated as a single data item and terminated by null character '\n'. Remember that C language does not support strings as a data type. A string is actually one-dimensional array of characters in C language. These are often used to create meaningful and readable programs.\n\n  String is a sequence of characters that is treated as a single data item and terminated by null character '0'. Remember that C language does not support strings as a data type. A string is actually one-dimensional array of characters in C language. These are often used to create meaningful and readable programs.\n\n String Input and Output:\n Input function scanf() can be used with %s format specifier to read a string input from the terminal. But there is one problem with scanf() function, it terminates its input on the first white space it encounters. Therefore if you try to read an input string 'Hello World' using scanf() function, it will only read Hello and terminate after encountering white spaces.\n\n String Handling Functions:\n C language supports a large number of string handling functions that can be used to carry out many of the string manipulations. These functions are packaged in string.h library. Hence, you must include string.h header file in your programs to use these functions. "
    },
    {
      "ques": "Storage classes in C",
      "ans": "In C language, each variable has a storage class which decides the following things:\n\n 1)scope i.e where the value of the variable would be available inside a program.\n 2)default initial value i.e if we do not explicitly initialize that variable, what will be its default initial value.\n 3)lifetime of that variable i.e for how long will that variable exist.\n\n 1)Automatic variables:\n 1)Scope: Variable defined with auto storage class are local to the function block inside which they are defined. 2)External variables 3)Static variables 3)Register variables"
    }
  ],
  "programs": [
    {
      "quesno": "itentrylevel",
      "ques": "Smart and Balanced",
      "ans": "Smart and Balanced"
    },
    {
      "quesno": "itentrylevel",
      "ques": "Smart and Balanced",
      "ans": "Smart and Balanced"
    },
    {
      "quesno": "itentrylevel",
      "ques": "Smart and Balanced",
      "ans": "Smart and Balanced"
    }
  ],
  "videos": [
    {
      "id": "w0SDwUU7wpo",
      "title": "Smart and Balanced",
      "time": "5:00 pm",
      "name": "Sateesh Patnana"
    },
    {
      "id": "w0SDwUU7wpo",
      "title": "Smart and Balanced",
      "time": "5:00 pm",
      "name": "Sateesh Patnana"
    },
    {
      "id": "w0SDwUU7wpo",
      "title": "Smart and Balanced",
      "time": "5:00 pm",
      "name": "Sateesh Patnana"
    }
  ]
}

